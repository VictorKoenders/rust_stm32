/// MOD CAN
/// Controller area network
const BASE_ADDRESS: u32 = 0x40006400;
/// master control register
/// Size: 0x20 bits
pub mod mcr {
	const REGISTER_ADDRESS_OFFSET: u32 = 0x0;
	const REGISTER_ADDRESS: u32 = super::BASE_ADDRESS + REGISTER_ADDRESS_OFFSET;

	const DBF_BIT_OFFSET: u8 = 16;
	const DBF_BIT_WIDTH: u8 = 1;
	/// DBF (Width: 1, Offset: 16)
	pub fn get_dbf() -> u8 { ::read(REGISTER_ADDRESS, DBF_BIT_OFFSET, DBF_BIT_WIDTH) as u8 }
	/// DBF (Width: 1, Offset: 16)
	pub fn set_dbf(value: u8) { ::write(REGISTER_ADDRESS, DBF_BIT_OFFSET, DBF_BIT_WIDTH, value as u32); }

	const RESET_BIT_OFFSET: u8 = 15;
	const RESET_BIT_WIDTH: u8 = 1;
	/// RESET (Width: 1, Offset: 15)
	pub fn get_reset() -> u8 { ::read(REGISTER_ADDRESS, RESET_BIT_OFFSET, RESET_BIT_WIDTH) as u8 }
	/// RESET (Width: 1, Offset: 15)
	pub fn set_reset(value: u8) { ::write(REGISTER_ADDRESS, RESET_BIT_OFFSET, RESET_BIT_WIDTH, value as u32); }

	const TTCM_BIT_OFFSET: u8 = 7;
	const TTCM_BIT_WIDTH: u8 = 1;
	/// TTCM (Width: 1, Offset: 7)
	pub fn get_ttcm() -> u8 { ::read(REGISTER_ADDRESS, TTCM_BIT_OFFSET, TTCM_BIT_WIDTH) as u8 }
	/// TTCM (Width: 1, Offset: 7)
	pub fn set_ttcm(value: u8) { ::write(REGISTER_ADDRESS, TTCM_BIT_OFFSET, TTCM_BIT_WIDTH, value as u32); }

	const ABOM_BIT_OFFSET: u8 = 6;
	const ABOM_BIT_WIDTH: u8 = 1;
	/// ABOM (Width: 1, Offset: 6)
	pub fn get_abom() -> u8 { ::read(REGISTER_ADDRESS, ABOM_BIT_OFFSET, ABOM_BIT_WIDTH) as u8 }
	/// ABOM (Width: 1, Offset: 6)
	pub fn set_abom(value: u8) { ::write(REGISTER_ADDRESS, ABOM_BIT_OFFSET, ABOM_BIT_WIDTH, value as u32); }

	const AWUM_BIT_OFFSET: u8 = 5;
	const AWUM_BIT_WIDTH: u8 = 1;
	/// AWUM (Width: 1, Offset: 5)
	pub fn get_awum() -> u8 { ::read(REGISTER_ADDRESS, AWUM_BIT_OFFSET, AWUM_BIT_WIDTH) as u8 }
	/// AWUM (Width: 1, Offset: 5)
	pub fn set_awum(value: u8) { ::write(REGISTER_ADDRESS, AWUM_BIT_OFFSET, AWUM_BIT_WIDTH, value as u32); }

	const NART_BIT_OFFSET: u8 = 4;
	const NART_BIT_WIDTH: u8 = 1;
	/// NART (Width: 1, Offset: 4)
	pub fn get_nart() -> u8 { ::read(REGISTER_ADDRESS, NART_BIT_OFFSET, NART_BIT_WIDTH) as u8 }
	/// NART (Width: 1, Offset: 4)
	pub fn set_nart(value: u8) { ::write(REGISTER_ADDRESS, NART_BIT_OFFSET, NART_BIT_WIDTH, value as u32); }

	const RFLM_BIT_OFFSET: u8 = 3;
	const RFLM_BIT_WIDTH: u8 = 1;
	/// RFLM (Width: 1, Offset: 3)
	pub fn get_rflm() -> u8 { ::read(REGISTER_ADDRESS, RFLM_BIT_OFFSET, RFLM_BIT_WIDTH) as u8 }
	/// RFLM (Width: 1, Offset: 3)
	pub fn set_rflm(value: u8) { ::write(REGISTER_ADDRESS, RFLM_BIT_OFFSET, RFLM_BIT_WIDTH, value as u32); }

	const TXFP_BIT_OFFSET: u8 = 2;
	const TXFP_BIT_WIDTH: u8 = 1;
	/// TXFP (Width: 1, Offset: 2)
	pub fn get_txfp() -> u8 { ::read(REGISTER_ADDRESS, TXFP_BIT_OFFSET, TXFP_BIT_WIDTH) as u8 }
	/// TXFP (Width: 1, Offset: 2)
	pub fn set_txfp(value: u8) { ::write(REGISTER_ADDRESS, TXFP_BIT_OFFSET, TXFP_BIT_WIDTH, value as u32); }

	const SLEEP_BIT_OFFSET: u8 = 1;
	const SLEEP_BIT_WIDTH: u8 = 1;
	/// SLEEP (Width: 1, Offset: 1)
	pub fn get_sleep() -> u8 { ::read(REGISTER_ADDRESS, SLEEP_BIT_OFFSET, SLEEP_BIT_WIDTH) as u8 }
	/// SLEEP (Width: 1, Offset: 1)
	pub fn set_sleep(value: u8) { ::write(REGISTER_ADDRESS, SLEEP_BIT_OFFSET, SLEEP_BIT_WIDTH, value as u32); }

	const INRQ_BIT_OFFSET: u8 = 0;
	const INRQ_BIT_WIDTH: u8 = 1;
	/// INRQ (Width: 1, Offset: 0)
	pub fn get_inrq() -> u8 { ::read(REGISTER_ADDRESS, INRQ_BIT_OFFSET, INRQ_BIT_WIDTH) as u8 }
	/// INRQ (Width: 1, Offset: 0)
	pub fn set_inrq(value: u8) { ::write(REGISTER_ADDRESS, INRQ_BIT_OFFSET, INRQ_BIT_WIDTH, value as u32); }
}
/// master status register
/// Size: 0x20 bits
pub mod msr {
	const REGISTER_ADDRESS_OFFSET: u32 = 0x4;
	const REGISTER_ADDRESS: u32 = super::BASE_ADDRESS + REGISTER_ADDRESS_OFFSET;

	const RX_BIT_OFFSET: u8 = 11;
	const RX_BIT_WIDTH: u8 = 1;
	/// RX (Width: 1, Offset: 11)
	pub fn get_rx() -> u8 { ::read(REGISTER_ADDRESS, RX_BIT_OFFSET, RX_BIT_WIDTH) as u8 }

	const SAMP_BIT_OFFSET: u8 = 10;
	const SAMP_BIT_WIDTH: u8 = 1;
	/// SAMP (Width: 1, Offset: 10)
	pub fn get_samp() -> u8 { ::read(REGISTER_ADDRESS, SAMP_BIT_OFFSET, SAMP_BIT_WIDTH) as u8 }

	const RXM_BIT_OFFSET: u8 = 9;
	const RXM_BIT_WIDTH: u8 = 1;
	/// RXM (Width: 1, Offset: 9)
	pub fn get_rxm() -> u8 { ::read(REGISTER_ADDRESS, RXM_BIT_OFFSET, RXM_BIT_WIDTH) as u8 }

	const TXM_BIT_OFFSET: u8 = 8;
	const TXM_BIT_WIDTH: u8 = 1;
	/// TXM (Width: 1, Offset: 8)
	pub fn get_txm() -> u8 { ::read(REGISTER_ADDRESS, TXM_BIT_OFFSET, TXM_BIT_WIDTH) as u8 }

	const SLAKI_BIT_OFFSET: u8 = 4;
	const SLAKI_BIT_WIDTH: u8 = 1;
	/// SLAKI (Width: 1, Offset: 4)
	pub fn get_slaki() -> u8 { ::read(REGISTER_ADDRESS, SLAKI_BIT_OFFSET, SLAKI_BIT_WIDTH) as u8 }
	/// SLAKI (Width: 1, Offset: 4)
	pub fn set_slaki(value: u8) { ::write(REGISTER_ADDRESS, SLAKI_BIT_OFFSET, SLAKI_BIT_WIDTH, value as u32); }

	const WKUI_BIT_OFFSET: u8 = 3;
	const WKUI_BIT_WIDTH: u8 = 1;
	/// WKUI (Width: 1, Offset: 3)
	pub fn get_wkui() -> u8 { ::read(REGISTER_ADDRESS, WKUI_BIT_OFFSET, WKUI_BIT_WIDTH) as u8 }
	/// WKUI (Width: 1, Offset: 3)
	pub fn set_wkui(value: u8) { ::write(REGISTER_ADDRESS, WKUI_BIT_OFFSET, WKUI_BIT_WIDTH, value as u32); }

	const ERRI_BIT_OFFSET: u8 = 2;
	const ERRI_BIT_WIDTH: u8 = 1;
	/// ERRI (Width: 1, Offset: 2)
	pub fn get_erri() -> u8 { ::read(REGISTER_ADDRESS, ERRI_BIT_OFFSET, ERRI_BIT_WIDTH) as u8 }
	/// ERRI (Width: 1, Offset: 2)
	pub fn set_erri(value: u8) { ::write(REGISTER_ADDRESS, ERRI_BIT_OFFSET, ERRI_BIT_WIDTH, value as u32); }

	const SLAK_BIT_OFFSET: u8 = 1;
	const SLAK_BIT_WIDTH: u8 = 1;
	/// SLAK (Width: 1, Offset: 1)
	pub fn get_slak() -> u8 { ::read(REGISTER_ADDRESS, SLAK_BIT_OFFSET, SLAK_BIT_WIDTH) as u8 }

	const INAK_BIT_OFFSET: u8 = 0;
	const INAK_BIT_WIDTH: u8 = 1;
	/// INAK (Width: 1, Offset: 0)
	pub fn get_inak() -> u8 { ::read(REGISTER_ADDRESS, INAK_BIT_OFFSET, INAK_BIT_WIDTH) as u8 }
}
/// transmit status register
/// Size: 0x20 bits
pub mod tsr {
	const REGISTER_ADDRESS_OFFSET: u32 = 0x8;
	const REGISTER_ADDRESS: u32 = super::BASE_ADDRESS + REGISTER_ADDRESS_OFFSET;

	const LOW2_BIT_OFFSET: u8 = 31;
	const LOW2_BIT_WIDTH: u8 = 1;
	/// Lowest priority flag for mailbox 2 (Width: 1, Offset: 31)
	pub fn get_low2() -> u8 { ::read(REGISTER_ADDRESS, LOW2_BIT_OFFSET, LOW2_BIT_WIDTH) as u8 }

	const LOW1_BIT_OFFSET: u8 = 30;
	const LOW1_BIT_WIDTH: u8 = 1;
	/// Lowest priority flag for mailbox 1 (Width: 1, Offset: 30)
	pub fn get_low1() -> u8 { ::read(REGISTER_ADDRESS, LOW1_BIT_OFFSET, LOW1_BIT_WIDTH) as u8 }

	const LOW0_BIT_OFFSET: u8 = 29;
	const LOW0_BIT_WIDTH: u8 = 1;
	/// Lowest priority flag for mailbox 0 (Width: 1, Offset: 29)
	pub fn get_low0() -> u8 { ::read(REGISTER_ADDRESS, LOW0_BIT_OFFSET, LOW0_BIT_WIDTH) as u8 }

	const TME2_BIT_OFFSET: u8 = 28;
	const TME2_BIT_WIDTH: u8 = 1;
	/// Lowest priority flag for mailbox 2 (Width: 1, Offset: 28)
	pub fn get_tme2() -> u8 { ::read(REGISTER_ADDRESS, TME2_BIT_OFFSET, TME2_BIT_WIDTH) as u8 }

	const TME1_BIT_OFFSET: u8 = 27;
	const TME1_BIT_WIDTH: u8 = 1;
	/// Lowest priority flag for mailbox 1 (Width: 1, Offset: 27)
	pub fn get_tme1() -> u8 { ::read(REGISTER_ADDRESS, TME1_BIT_OFFSET, TME1_BIT_WIDTH) as u8 }

	const TME0_BIT_OFFSET: u8 = 26;
	const TME0_BIT_WIDTH: u8 = 1;
	/// Lowest priority flag for mailbox 0 (Width: 1, Offset: 26)
	pub fn get_tme0() -> u8 { ::read(REGISTER_ADDRESS, TME0_BIT_OFFSET, TME0_BIT_WIDTH) as u8 }

	const CODE_BIT_OFFSET: u8 = 24;
	const CODE_BIT_WIDTH: u8 = 2;
	/// CODE (Width: 2, Offset: 24)
	pub fn get_code() -> u8 { ::read(REGISTER_ADDRESS, CODE_BIT_OFFSET, CODE_BIT_WIDTH) as u8 }

	const ABRQ2_BIT_OFFSET: u8 = 23;
	const ABRQ2_BIT_WIDTH: u8 = 1;
	/// ABRQ2 (Width: 1, Offset: 23)
	pub fn get_abrq2() -> u8 { ::read(REGISTER_ADDRESS, ABRQ2_BIT_OFFSET, ABRQ2_BIT_WIDTH) as u8 }
	/// ABRQ2 (Width: 1, Offset: 23)
	pub fn set_abrq2(value: u8) { ::write(REGISTER_ADDRESS, ABRQ2_BIT_OFFSET, ABRQ2_BIT_WIDTH, value as u32); }

	const TERR2_BIT_OFFSET: u8 = 19;
	const TERR2_BIT_WIDTH: u8 = 1;
	/// TERR2 (Width: 1, Offset: 19)
	pub fn get_terr2() -> u8 { ::read(REGISTER_ADDRESS, TERR2_BIT_OFFSET, TERR2_BIT_WIDTH) as u8 }
	/// TERR2 (Width: 1, Offset: 19)
	pub fn set_terr2(value: u8) { ::write(REGISTER_ADDRESS, TERR2_BIT_OFFSET, TERR2_BIT_WIDTH, value as u32); }

	const ALST2_BIT_OFFSET: u8 = 18;
	const ALST2_BIT_WIDTH: u8 = 1;
	/// ALST2 (Width: 1, Offset: 18)
	pub fn get_alst2() -> u8 { ::read(REGISTER_ADDRESS, ALST2_BIT_OFFSET, ALST2_BIT_WIDTH) as u8 }
	/// ALST2 (Width: 1, Offset: 18)
	pub fn set_alst2(value: u8) { ::write(REGISTER_ADDRESS, ALST2_BIT_OFFSET, ALST2_BIT_WIDTH, value as u32); }

	const TXOK2_BIT_OFFSET: u8 = 17;
	const TXOK2_BIT_WIDTH: u8 = 1;
	/// TXOK2 (Width: 1, Offset: 17)
	pub fn get_txok2() -> u8 { ::read(REGISTER_ADDRESS, TXOK2_BIT_OFFSET, TXOK2_BIT_WIDTH) as u8 }
	/// TXOK2 (Width: 1, Offset: 17)
	pub fn set_txok2(value: u8) { ::write(REGISTER_ADDRESS, TXOK2_BIT_OFFSET, TXOK2_BIT_WIDTH, value as u32); }

	const RQCP2_BIT_OFFSET: u8 = 16;
	const RQCP2_BIT_WIDTH: u8 = 1;
	/// RQCP2 (Width: 1, Offset: 16)
	pub fn get_rqcp2() -> u8 { ::read(REGISTER_ADDRESS, RQCP2_BIT_OFFSET, RQCP2_BIT_WIDTH) as u8 }
	/// RQCP2 (Width: 1, Offset: 16)
	pub fn set_rqcp2(value: u8) { ::write(REGISTER_ADDRESS, RQCP2_BIT_OFFSET, RQCP2_BIT_WIDTH, value as u32); }

	const ABRQ1_BIT_OFFSET: u8 = 15;
	const ABRQ1_BIT_WIDTH: u8 = 1;
	/// ABRQ1 (Width: 1, Offset: 15)
	pub fn get_abrq1() -> u8 { ::read(REGISTER_ADDRESS, ABRQ1_BIT_OFFSET, ABRQ1_BIT_WIDTH) as u8 }
	/// ABRQ1 (Width: 1, Offset: 15)
	pub fn set_abrq1(value: u8) { ::write(REGISTER_ADDRESS, ABRQ1_BIT_OFFSET, ABRQ1_BIT_WIDTH, value as u32); }

	const TERR1_BIT_OFFSET: u8 = 11;
	const TERR1_BIT_WIDTH: u8 = 1;
	/// TERR1 (Width: 1, Offset: 11)
	pub fn get_terr1() -> u8 { ::read(REGISTER_ADDRESS, TERR1_BIT_OFFSET, TERR1_BIT_WIDTH) as u8 }
	/// TERR1 (Width: 1, Offset: 11)
	pub fn set_terr1(value: u8) { ::write(REGISTER_ADDRESS, TERR1_BIT_OFFSET, TERR1_BIT_WIDTH, value as u32); }

	const ALST1_BIT_OFFSET: u8 = 10;
	const ALST1_BIT_WIDTH: u8 = 1;
	/// ALST1 (Width: 1, Offset: 10)
	pub fn get_alst1() -> u8 { ::read(REGISTER_ADDRESS, ALST1_BIT_OFFSET, ALST1_BIT_WIDTH) as u8 }
	/// ALST1 (Width: 1, Offset: 10)
	pub fn set_alst1(value: u8) { ::write(REGISTER_ADDRESS, ALST1_BIT_OFFSET, ALST1_BIT_WIDTH, value as u32); }

	const TXOK1_BIT_OFFSET: u8 = 9;
	const TXOK1_BIT_WIDTH: u8 = 1;
	/// TXOK1 (Width: 1, Offset: 9)
	pub fn get_txok1() -> u8 { ::read(REGISTER_ADDRESS, TXOK1_BIT_OFFSET, TXOK1_BIT_WIDTH) as u8 }
	/// TXOK1 (Width: 1, Offset: 9)
	pub fn set_txok1(value: u8) { ::write(REGISTER_ADDRESS, TXOK1_BIT_OFFSET, TXOK1_BIT_WIDTH, value as u32); }

	const RQCP1_BIT_OFFSET: u8 = 8;
	const RQCP1_BIT_WIDTH: u8 = 1;
	/// RQCP1 (Width: 1, Offset: 8)
	pub fn get_rqcp1() -> u8 { ::read(REGISTER_ADDRESS, RQCP1_BIT_OFFSET, RQCP1_BIT_WIDTH) as u8 }
	/// RQCP1 (Width: 1, Offset: 8)
	pub fn set_rqcp1(value: u8) { ::write(REGISTER_ADDRESS, RQCP1_BIT_OFFSET, RQCP1_BIT_WIDTH, value as u32); }

	const ABRQ0_BIT_OFFSET: u8 = 7;
	const ABRQ0_BIT_WIDTH: u8 = 1;
	/// ABRQ0 (Width: 1, Offset: 7)
	pub fn get_abrq0() -> u8 { ::read(REGISTER_ADDRESS, ABRQ0_BIT_OFFSET, ABRQ0_BIT_WIDTH) as u8 }
	/// ABRQ0 (Width: 1, Offset: 7)
	pub fn set_abrq0(value: u8) { ::write(REGISTER_ADDRESS, ABRQ0_BIT_OFFSET, ABRQ0_BIT_WIDTH, value as u32); }

	const TERR0_BIT_OFFSET: u8 = 3;
	const TERR0_BIT_WIDTH: u8 = 1;
	/// TERR0 (Width: 1, Offset: 3)
	pub fn get_terr0() -> u8 { ::read(REGISTER_ADDRESS, TERR0_BIT_OFFSET, TERR0_BIT_WIDTH) as u8 }
	/// TERR0 (Width: 1, Offset: 3)
	pub fn set_terr0(value: u8) { ::write(REGISTER_ADDRESS, TERR0_BIT_OFFSET, TERR0_BIT_WIDTH, value as u32); }

	const ALST0_BIT_OFFSET: u8 = 2;
	const ALST0_BIT_WIDTH: u8 = 1;
	/// ALST0 (Width: 1, Offset: 2)
	pub fn get_alst0() -> u8 { ::read(REGISTER_ADDRESS, ALST0_BIT_OFFSET, ALST0_BIT_WIDTH) as u8 }
	/// ALST0 (Width: 1, Offset: 2)
	pub fn set_alst0(value: u8) { ::write(REGISTER_ADDRESS, ALST0_BIT_OFFSET, ALST0_BIT_WIDTH, value as u32); }

	const TXOK0_BIT_OFFSET: u8 = 1;
	const TXOK0_BIT_WIDTH: u8 = 1;
	/// TXOK0 (Width: 1, Offset: 1)
	pub fn get_txok0() -> u8 { ::read(REGISTER_ADDRESS, TXOK0_BIT_OFFSET, TXOK0_BIT_WIDTH) as u8 }
	/// TXOK0 (Width: 1, Offset: 1)
	pub fn set_txok0(value: u8) { ::write(REGISTER_ADDRESS, TXOK0_BIT_OFFSET, TXOK0_BIT_WIDTH, value as u32); }

	const RQCP0_BIT_OFFSET: u8 = 0;
	const RQCP0_BIT_WIDTH: u8 = 1;
	/// RQCP0 (Width: 1, Offset: 0)
	pub fn get_rqcp0() -> u8 { ::read(REGISTER_ADDRESS, RQCP0_BIT_OFFSET, RQCP0_BIT_WIDTH) as u8 }
	/// RQCP0 (Width: 1, Offset: 0)
	pub fn set_rqcp0(value: u8) { ::write(REGISTER_ADDRESS, RQCP0_BIT_OFFSET, RQCP0_BIT_WIDTH, value as u32); }
}
/// receive FIFO 0 register
/// Size: 0x20 bits
pub mod rf0r {
	const REGISTER_ADDRESS_OFFSET: u32 = 0xC;
	const REGISTER_ADDRESS: u32 = super::BASE_ADDRESS + REGISTER_ADDRESS_OFFSET;

	const RFOM0_BIT_OFFSET: u8 = 5;
	const RFOM0_BIT_WIDTH: u8 = 1;
	/// RFOM0 (Width: 1, Offset: 5)
	pub fn get_rfom0() -> u8 { ::read(REGISTER_ADDRESS, RFOM0_BIT_OFFSET, RFOM0_BIT_WIDTH) as u8 }
	/// RFOM0 (Width: 1, Offset: 5)
	pub fn set_rfom0(value: u8) { ::write(REGISTER_ADDRESS, RFOM0_BIT_OFFSET, RFOM0_BIT_WIDTH, value as u32); }

	const FOVR0_BIT_OFFSET: u8 = 4;
	const FOVR0_BIT_WIDTH: u8 = 1;
	/// FOVR0 (Width: 1, Offset: 4)
	pub fn get_fovr0() -> u8 { ::read(REGISTER_ADDRESS, FOVR0_BIT_OFFSET, FOVR0_BIT_WIDTH) as u8 }
	/// FOVR0 (Width: 1, Offset: 4)
	pub fn set_fovr0(value: u8) { ::write(REGISTER_ADDRESS, FOVR0_BIT_OFFSET, FOVR0_BIT_WIDTH, value as u32); }

	const FULL0_BIT_OFFSET: u8 = 3;
	const FULL0_BIT_WIDTH: u8 = 1;
	/// FULL0 (Width: 1, Offset: 3)
	pub fn get_full0() -> u8 { ::read(REGISTER_ADDRESS, FULL0_BIT_OFFSET, FULL0_BIT_WIDTH) as u8 }
	/// FULL0 (Width: 1, Offset: 3)
	pub fn set_full0(value: u8) { ::write(REGISTER_ADDRESS, FULL0_BIT_OFFSET, FULL0_BIT_WIDTH, value as u32); }

	const FMP0_BIT_OFFSET: u8 = 0;
	const FMP0_BIT_WIDTH: u8 = 2;
	/// FMP0 (Width: 2, Offset: 0)
	pub fn get_fmp0() -> u8 { ::read(REGISTER_ADDRESS, FMP0_BIT_OFFSET, FMP0_BIT_WIDTH) as u8 }
}
/// receive FIFO 1 register
/// Size: 0x20 bits
pub mod rf1r {
	const REGISTER_ADDRESS_OFFSET: u32 = 0x10;
	const REGISTER_ADDRESS: u32 = super::BASE_ADDRESS + REGISTER_ADDRESS_OFFSET;

	const RFOM1_BIT_OFFSET: u8 = 5;
	const RFOM1_BIT_WIDTH: u8 = 1;
	/// RFOM1 (Width: 1, Offset: 5)
	pub fn get_rfom1() -> u8 { ::read(REGISTER_ADDRESS, RFOM1_BIT_OFFSET, RFOM1_BIT_WIDTH) as u8 }
	/// RFOM1 (Width: 1, Offset: 5)
	pub fn set_rfom1(value: u8) { ::write(REGISTER_ADDRESS, RFOM1_BIT_OFFSET, RFOM1_BIT_WIDTH, value as u32); }

	const FOVR1_BIT_OFFSET: u8 = 4;
	const FOVR1_BIT_WIDTH: u8 = 1;
	/// FOVR1 (Width: 1, Offset: 4)
	pub fn get_fovr1() -> u8 { ::read(REGISTER_ADDRESS, FOVR1_BIT_OFFSET, FOVR1_BIT_WIDTH) as u8 }
	/// FOVR1 (Width: 1, Offset: 4)
	pub fn set_fovr1(value: u8) { ::write(REGISTER_ADDRESS, FOVR1_BIT_OFFSET, FOVR1_BIT_WIDTH, value as u32); }

	const FULL1_BIT_OFFSET: u8 = 3;
	const FULL1_BIT_WIDTH: u8 = 1;
	/// FULL1 (Width: 1, Offset: 3)
	pub fn get_full1() -> u8 { ::read(REGISTER_ADDRESS, FULL1_BIT_OFFSET, FULL1_BIT_WIDTH) as u8 }
	/// FULL1 (Width: 1, Offset: 3)
	pub fn set_full1(value: u8) { ::write(REGISTER_ADDRESS, FULL1_BIT_OFFSET, FULL1_BIT_WIDTH, value as u32); }

	const FMP1_BIT_OFFSET: u8 = 0;
	const FMP1_BIT_WIDTH: u8 = 2;
	/// FMP1 (Width: 2, Offset: 0)
	pub fn get_fmp1() -> u8 { ::read(REGISTER_ADDRESS, FMP1_BIT_OFFSET, FMP1_BIT_WIDTH) as u8 }
}
/// interrupt enable register
/// Size: 0x20 bits
pub mod ier {
	const REGISTER_ADDRESS_OFFSET: u32 = 0x14;
	const REGISTER_ADDRESS: u32 = super::BASE_ADDRESS + REGISTER_ADDRESS_OFFSET;

	const SLKIE_BIT_OFFSET: u8 = 17;
	const SLKIE_BIT_WIDTH: u8 = 1;
	/// SLKIE (Width: 1, Offset: 17)
	pub fn get_slkie() -> u8 { ::read(REGISTER_ADDRESS, SLKIE_BIT_OFFSET, SLKIE_BIT_WIDTH) as u8 }
	/// SLKIE (Width: 1, Offset: 17)
	pub fn set_slkie(value: u8) { ::write(REGISTER_ADDRESS, SLKIE_BIT_OFFSET, SLKIE_BIT_WIDTH, value as u32); }

	const WKUIE_BIT_OFFSET: u8 = 16;
	const WKUIE_BIT_WIDTH: u8 = 1;
	/// WKUIE (Width: 1, Offset: 16)
	pub fn get_wkuie() -> u8 { ::read(REGISTER_ADDRESS, WKUIE_BIT_OFFSET, WKUIE_BIT_WIDTH) as u8 }
	/// WKUIE (Width: 1, Offset: 16)
	pub fn set_wkuie(value: u8) { ::write(REGISTER_ADDRESS, WKUIE_BIT_OFFSET, WKUIE_BIT_WIDTH, value as u32); }

	const ERRIE_BIT_OFFSET: u8 = 15;
	const ERRIE_BIT_WIDTH: u8 = 1;
	/// ERRIE (Width: 1, Offset: 15)
	pub fn get_errie() -> u8 { ::read(REGISTER_ADDRESS, ERRIE_BIT_OFFSET, ERRIE_BIT_WIDTH) as u8 }
	/// ERRIE (Width: 1, Offset: 15)
	pub fn set_errie(value: u8) { ::write(REGISTER_ADDRESS, ERRIE_BIT_OFFSET, ERRIE_BIT_WIDTH, value as u32); }

	const LECIE_BIT_OFFSET: u8 = 11;
	const LECIE_BIT_WIDTH: u8 = 1;
	/// LECIE (Width: 1, Offset: 11)
	pub fn get_lecie() -> u8 { ::read(REGISTER_ADDRESS, LECIE_BIT_OFFSET, LECIE_BIT_WIDTH) as u8 }
	/// LECIE (Width: 1, Offset: 11)
	pub fn set_lecie(value: u8) { ::write(REGISTER_ADDRESS, LECIE_BIT_OFFSET, LECIE_BIT_WIDTH, value as u32); }

	const BOFIE_BIT_OFFSET: u8 = 10;
	const BOFIE_BIT_WIDTH: u8 = 1;
	/// BOFIE (Width: 1, Offset: 10)
	pub fn get_bofie() -> u8 { ::read(REGISTER_ADDRESS, BOFIE_BIT_OFFSET, BOFIE_BIT_WIDTH) as u8 }
	/// BOFIE (Width: 1, Offset: 10)
	pub fn set_bofie(value: u8) { ::write(REGISTER_ADDRESS, BOFIE_BIT_OFFSET, BOFIE_BIT_WIDTH, value as u32); }

	const EPVIE_BIT_OFFSET: u8 = 9;
	const EPVIE_BIT_WIDTH: u8 = 1;
	/// EPVIE (Width: 1, Offset: 9)
	pub fn get_epvie() -> u8 { ::read(REGISTER_ADDRESS, EPVIE_BIT_OFFSET, EPVIE_BIT_WIDTH) as u8 }
	/// EPVIE (Width: 1, Offset: 9)
	pub fn set_epvie(value: u8) { ::write(REGISTER_ADDRESS, EPVIE_BIT_OFFSET, EPVIE_BIT_WIDTH, value as u32); }

	const EWGIE_BIT_OFFSET: u8 = 8;
	const EWGIE_BIT_WIDTH: u8 = 1;
	/// EWGIE (Width: 1, Offset: 8)
	pub fn get_ewgie() -> u8 { ::read(REGISTER_ADDRESS, EWGIE_BIT_OFFSET, EWGIE_BIT_WIDTH) as u8 }
	/// EWGIE (Width: 1, Offset: 8)
	pub fn set_ewgie(value: u8) { ::write(REGISTER_ADDRESS, EWGIE_BIT_OFFSET, EWGIE_BIT_WIDTH, value as u32); }

	const FOVIE1_BIT_OFFSET: u8 = 6;
	const FOVIE1_BIT_WIDTH: u8 = 1;
	/// FOVIE1 (Width: 1, Offset: 6)
	pub fn get_fovie1() -> u8 { ::read(REGISTER_ADDRESS, FOVIE1_BIT_OFFSET, FOVIE1_BIT_WIDTH) as u8 }
	/// FOVIE1 (Width: 1, Offset: 6)
	pub fn set_fovie1(value: u8) { ::write(REGISTER_ADDRESS, FOVIE1_BIT_OFFSET, FOVIE1_BIT_WIDTH, value as u32); }

	const FFIE1_BIT_OFFSET: u8 = 5;
	const FFIE1_BIT_WIDTH: u8 = 1;
	/// FFIE1 (Width: 1, Offset: 5)
	pub fn get_ffie1() -> u8 { ::read(REGISTER_ADDRESS, FFIE1_BIT_OFFSET, FFIE1_BIT_WIDTH) as u8 }
	/// FFIE1 (Width: 1, Offset: 5)
	pub fn set_ffie1(value: u8) { ::write(REGISTER_ADDRESS, FFIE1_BIT_OFFSET, FFIE1_BIT_WIDTH, value as u32); }

	const FMPIE1_BIT_OFFSET: u8 = 4;
	const FMPIE1_BIT_WIDTH: u8 = 1;
	/// FMPIE1 (Width: 1, Offset: 4)
	pub fn get_fmpie1() -> u8 { ::read(REGISTER_ADDRESS, FMPIE1_BIT_OFFSET, FMPIE1_BIT_WIDTH) as u8 }
	/// FMPIE1 (Width: 1, Offset: 4)
	pub fn set_fmpie1(value: u8) { ::write(REGISTER_ADDRESS, FMPIE1_BIT_OFFSET, FMPIE1_BIT_WIDTH, value as u32); }

	const FOVIE0_BIT_OFFSET: u8 = 3;
	const FOVIE0_BIT_WIDTH: u8 = 1;
	/// FOVIE0 (Width: 1, Offset: 3)
	pub fn get_fovie0() -> u8 { ::read(REGISTER_ADDRESS, FOVIE0_BIT_OFFSET, FOVIE0_BIT_WIDTH) as u8 }
	/// FOVIE0 (Width: 1, Offset: 3)
	pub fn set_fovie0(value: u8) { ::write(REGISTER_ADDRESS, FOVIE0_BIT_OFFSET, FOVIE0_BIT_WIDTH, value as u32); }

	const FFIE0_BIT_OFFSET: u8 = 2;
	const FFIE0_BIT_WIDTH: u8 = 1;
	/// FFIE0 (Width: 1, Offset: 2)
	pub fn get_ffie0() -> u8 { ::read(REGISTER_ADDRESS, FFIE0_BIT_OFFSET, FFIE0_BIT_WIDTH) as u8 }
	/// FFIE0 (Width: 1, Offset: 2)
	pub fn set_ffie0(value: u8) { ::write(REGISTER_ADDRESS, FFIE0_BIT_OFFSET, FFIE0_BIT_WIDTH, value as u32); }

	const FMPIE0_BIT_OFFSET: u8 = 1;
	const FMPIE0_BIT_WIDTH: u8 = 1;
	/// FMPIE0 (Width: 1, Offset: 1)
	pub fn get_fmpie0() -> u8 { ::read(REGISTER_ADDRESS, FMPIE0_BIT_OFFSET, FMPIE0_BIT_WIDTH) as u8 }
	/// FMPIE0 (Width: 1, Offset: 1)
	pub fn set_fmpie0(value: u8) { ::write(REGISTER_ADDRESS, FMPIE0_BIT_OFFSET, FMPIE0_BIT_WIDTH, value as u32); }

	const TMEIE_BIT_OFFSET: u8 = 0;
	const TMEIE_BIT_WIDTH: u8 = 1;
	/// TMEIE (Width: 1, Offset: 0)
	pub fn get_tmeie() -> u8 { ::read(REGISTER_ADDRESS, TMEIE_BIT_OFFSET, TMEIE_BIT_WIDTH) as u8 }
	/// TMEIE (Width: 1, Offset: 0)
	pub fn set_tmeie(value: u8) { ::write(REGISTER_ADDRESS, TMEIE_BIT_OFFSET, TMEIE_BIT_WIDTH, value as u32); }
}
/// error status register
/// Size: 0x20 bits
pub mod esr {
	const REGISTER_ADDRESS_OFFSET: u32 = 0x18;
	const REGISTER_ADDRESS: u32 = super::BASE_ADDRESS + REGISTER_ADDRESS_OFFSET;

	const REC_BIT_OFFSET: u8 = 24;
	const REC_BIT_WIDTH: u8 = 8;
	/// REC (Width: 8, Offset: 24)
	pub fn get_rec() -> u8 { ::read(REGISTER_ADDRESS, REC_BIT_OFFSET, REC_BIT_WIDTH) as u8 }

	const TEC_BIT_OFFSET: u8 = 16;
	const TEC_BIT_WIDTH: u8 = 8;
	/// TEC (Width: 8, Offset: 16)
	pub fn get_tec() -> u8 { ::read(REGISTER_ADDRESS, TEC_BIT_OFFSET, TEC_BIT_WIDTH) as u8 }

	const LEC_BIT_OFFSET: u8 = 4;
	const LEC_BIT_WIDTH: u8 = 3;
	/// LEC (Width: 3, Offset: 4)
	pub fn get_lec() -> u8 { ::read(REGISTER_ADDRESS, LEC_BIT_OFFSET, LEC_BIT_WIDTH) as u8 }
	/// LEC (Width: 3, Offset: 4)
	pub fn set_lec(value: u8) { ::write(REGISTER_ADDRESS, LEC_BIT_OFFSET, LEC_BIT_WIDTH, value as u32); }

	const BOFF_BIT_OFFSET: u8 = 2;
	const BOFF_BIT_WIDTH: u8 = 1;
	/// BOFF (Width: 1, Offset: 2)
	pub fn get_boff() -> u8 { ::read(REGISTER_ADDRESS, BOFF_BIT_OFFSET, BOFF_BIT_WIDTH) as u8 }

	const EPVF_BIT_OFFSET: u8 = 1;
	const EPVF_BIT_WIDTH: u8 = 1;
	/// EPVF (Width: 1, Offset: 1)
	pub fn get_epvf() -> u8 { ::read(REGISTER_ADDRESS, EPVF_BIT_OFFSET, EPVF_BIT_WIDTH) as u8 }

	const EWGF_BIT_OFFSET: u8 = 0;
	const EWGF_BIT_WIDTH: u8 = 1;
	/// EWGF (Width: 1, Offset: 0)
	pub fn get_ewgf() -> u8 { ::read(REGISTER_ADDRESS, EWGF_BIT_OFFSET, EWGF_BIT_WIDTH) as u8 }
}
/// bit timing register
/// Size: 0x20 bits
pub mod btr {
	const REGISTER_ADDRESS_OFFSET: u32 = 0x1C;
	const REGISTER_ADDRESS: u32 = super::BASE_ADDRESS + REGISTER_ADDRESS_OFFSET;

	const SILM_BIT_OFFSET: u8 = 31;
	const SILM_BIT_WIDTH: u8 = 1;
	/// SILM (Width: 1, Offset: 31)
	pub fn get_silm() -> u8 { ::read(REGISTER_ADDRESS, SILM_BIT_OFFSET, SILM_BIT_WIDTH) as u8 }
	/// SILM (Width: 1, Offset: 31)
	pub fn set_silm(value: u8) { ::write(REGISTER_ADDRESS, SILM_BIT_OFFSET, SILM_BIT_WIDTH, value as u32); }

	const LBKM_BIT_OFFSET: u8 = 30;
	const LBKM_BIT_WIDTH: u8 = 1;
	/// LBKM (Width: 1, Offset: 30)
	pub fn get_lbkm() -> u8 { ::read(REGISTER_ADDRESS, LBKM_BIT_OFFSET, LBKM_BIT_WIDTH) as u8 }
	/// LBKM (Width: 1, Offset: 30)
	pub fn set_lbkm(value: u8) { ::write(REGISTER_ADDRESS, LBKM_BIT_OFFSET, LBKM_BIT_WIDTH, value as u32); }

	const SJW_BIT_OFFSET: u8 = 24;
	const SJW_BIT_WIDTH: u8 = 2;
	/// SJW (Width: 2, Offset: 24)
	pub fn get_sjw() -> u8 { ::read(REGISTER_ADDRESS, SJW_BIT_OFFSET, SJW_BIT_WIDTH) as u8 }
	/// SJW (Width: 2, Offset: 24)
	pub fn set_sjw(value: u8) { ::write(REGISTER_ADDRESS, SJW_BIT_OFFSET, SJW_BIT_WIDTH, value as u32); }

	const TS2_BIT_OFFSET: u8 = 20;
	const TS2_BIT_WIDTH: u8 = 3;
	/// TS2 (Width: 3, Offset: 20)
	pub fn get_ts2() -> u8 { ::read(REGISTER_ADDRESS, TS2_BIT_OFFSET, TS2_BIT_WIDTH) as u8 }
	/// TS2 (Width: 3, Offset: 20)
	pub fn set_ts2(value: u8) { ::write(REGISTER_ADDRESS, TS2_BIT_OFFSET, TS2_BIT_WIDTH, value as u32); }

	const TS1_BIT_OFFSET: u8 = 16;
	const TS1_BIT_WIDTH: u8 = 4;
	/// TS1 (Width: 4, Offset: 16)
	pub fn get_ts1() -> u8 { ::read(REGISTER_ADDRESS, TS1_BIT_OFFSET, TS1_BIT_WIDTH) as u8 }
	/// TS1 (Width: 4, Offset: 16)
	pub fn set_ts1(value: u8) { ::write(REGISTER_ADDRESS, TS1_BIT_OFFSET, TS1_BIT_WIDTH, value as u32); }

	const BRP_BIT_OFFSET: u8 = 0;
	const BRP_BIT_WIDTH: u8 = 10;
	/// BRP (Width: 10, Offset: 0)
	pub fn get_brp() -> u16 { ::read(REGISTER_ADDRESS, BRP_BIT_OFFSET, BRP_BIT_WIDTH) as u16 }
	/// BRP (Width: 10, Offset: 0)
	pub fn set_brp(value: u16) { ::write(REGISTER_ADDRESS, BRP_BIT_OFFSET, BRP_BIT_WIDTH, value as u32); }
}
/// TX mailbox identifier register
/// Size: 0x20 bits
pub mod ti0r {
	const REGISTER_ADDRESS_OFFSET: u32 = 0x180;
	const REGISTER_ADDRESS: u32 = super::BASE_ADDRESS + REGISTER_ADDRESS_OFFSET;

	const STID_BIT_OFFSET: u8 = 21;
	const STID_BIT_WIDTH: u8 = 11;
	/// STID (Width: 11, Offset: 21)
	pub fn get_stid() -> u16 { ::read(REGISTER_ADDRESS, STID_BIT_OFFSET, STID_BIT_WIDTH) as u16 }
	/// STID (Width: 11, Offset: 21)
	pub fn set_stid(value: u16) { ::write(REGISTER_ADDRESS, STID_BIT_OFFSET, STID_BIT_WIDTH, value as u32); }

	const EXID_BIT_OFFSET: u8 = 3;
	const EXID_BIT_WIDTH: u8 = 18;
	/// EXID (Width: 18, Offset: 3)
	pub fn get_exid() -> u32 { ::read(REGISTER_ADDRESS, EXID_BIT_OFFSET, EXID_BIT_WIDTH) as u32 }
	/// EXID (Width: 18, Offset: 3)
	pub fn set_exid(value: u32) { ::write(REGISTER_ADDRESS, EXID_BIT_OFFSET, EXID_BIT_WIDTH, value as u32); }

	const IDE_BIT_OFFSET: u8 = 2;
	const IDE_BIT_WIDTH: u8 = 1;
	/// IDE (Width: 1, Offset: 2)
	pub fn get_ide() -> u8 { ::read(REGISTER_ADDRESS, IDE_BIT_OFFSET, IDE_BIT_WIDTH) as u8 }
	/// IDE (Width: 1, Offset: 2)
	pub fn set_ide(value: u8) { ::write(REGISTER_ADDRESS, IDE_BIT_OFFSET, IDE_BIT_WIDTH, value as u32); }

	const RTR_BIT_OFFSET: u8 = 1;
	const RTR_BIT_WIDTH: u8 = 1;
	/// RTR (Width: 1, Offset: 1)
	pub fn get_rtr() -> u8 { ::read(REGISTER_ADDRESS, RTR_BIT_OFFSET, RTR_BIT_WIDTH) as u8 }
	/// RTR (Width: 1, Offset: 1)
	pub fn set_rtr(value: u8) { ::write(REGISTER_ADDRESS, RTR_BIT_OFFSET, RTR_BIT_WIDTH, value as u32); }

	const TXRQ_BIT_OFFSET: u8 = 0;
	const TXRQ_BIT_WIDTH: u8 = 1;
	/// TXRQ (Width: 1, Offset: 0)
	pub fn get_txrq() -> u8 { ::read(REGISTER_ADDRESS, TXRQ_BIT_OFFSET, TXRQ_BIT_WIDTH) as u8 }
	/// TXRQ (Width: 1, Offset: 0)
	pub fn set_txrq(value: u8) { ::write(REGISTER_ADDRESS, TXRQ_BIT_OFFSET, TXRQ_BIT_WIDTH, value as u32); }
}
/// mailbox data length control and time stamp register
/// Size: 0x20 bits
pub mod tdt0r {
	const REGISTER_ADDRESS_OFFSET: u32 = 0x184;
	const REGISTER_ADDRESS: u32 = super::BASE_ADDRESS + REGISTER_ADDRESS_OFFSET;

	const TIME_BIT_OFFSET: u8 = 16;
	const TIME_BIT_WIDTH: u8 = 16;
	/// TIME (Width: 16, Offset: 16)
	pub fn get_time() -> u16 { ::read(REGISTER_ADDRESS, TIME_BIT_OFFSET, TIME_BIT_WIDTH) as u16 }
	/// TIME (Width: 16, Offset: 16)
	pub fn set_time(value: u16) { ::write(REGISTER_ADDRESS, TIME_BIT_OFFSET, TIME_BIT_WIDTH, value as u32); }

	const TGT_BIT_OFFSET: u8 = 8;
	const TGT_BIT_WIDTH: u8 = 1;
	/// TGT (Width: 1, Offset: 8)
	pub fn get_tgt() -> u8 { ::read(REGISTER_ADDRESS, TGT_BIT_OFFSET, TGT_BIT_WIDTH) as u8 }
	/// TGT (Width: 1, Offset: 8)
	pub fn set_tgt(value: u8) { ::write(REGISTER_ADDRESS, TGT_BIT_OFFSET, TGT_BIT_WIDTH, value as u32); }

	const DLC_BIT_OFFSET: u8 = 0;
	const DLC_BIT_WIDTH: u8 = 4;
	/// DLC (Width: 4, Offset: 0)
	pub fn get_dlc() -> u8 { ::read(REGISTER_ADDRESS, DLC_BIT_OFFSET, DLC_BIT_WIDTH) as u8 }
	/// DLC (Width: 4, Offset: 0)
	pub fn set_dlc(value: u8) { ::write(REGISTER_ADDRESS, DLC_BIT_OFFSET, DLC_BIT_WIDTH, value as u32); }
}
/// mailbox data low register
/// Size: 0x20 bits
pub mod tdl0r {
	const REGISTER_ADDRESS_OFFSET: u32 = 0x188;
	const REGISTER_ADDRESS: u32 = super::BASE_ADDRESS + REGISTER_ADDRESS_OFFSET;

	const DATA3_BIT_OFFSET: u8 = 24;
	const DATA3_BIT_WIDTH: u8 = 8;
	/// DATA3 (Width: 8, Offset: 24)
	pub fn get_data3() -> u8 { ::read(REGISTER_ADDRESS, DATA3_BIT_OFFSET, DATA3_BIT_WIDTH) as u8 }
	/// DATA3 (Width: 8, Offset: 24)
	pub fn set_data3(value: u8) { ::write(REGISTER_ADDRESS, DATA3_BIT_OFFSET, DATA3_BIT_WIDTH, value as u32); }

	const DATA2_BIT_OFFSET: u8 = 16;
	const DATA2_BIT_WIDTH: u8 = 8;
	/// DATA2 (Width: 8, Offset: 16)
	pub fn get_data2() -> u8 { ::read(REGISTER_ADDRESS, DATA2_BIT_OFFSET, DATA2_BIT_WIDTH) as u8 }
	/// DATA2 (Width: 8, Offset: 16)
	pub fn set_data2(value: u8) { ::write(REGISTER_ADDRESS, DATA2_BIT_OFFSET, DATA2_BIT_WIDTH, value as u32); }

	const DATA1_BIT_OFFSET: u8 = 8;
	const DATA1_BIT_WIDTH: u8 = 8;
	/// DATA1 (Width: 8, Offset: 8)
	pub fn get_data1() -> u8 { ::read(REGISTER_ADDRESS, DATA1_BIT_OFFSET, DATA1_BIT_WIDTH) as u8 }
	/// DATA1 (Width: 8, Offset: 8)
	pub fn set_data1(value: u8) { ::write(REGISTER_ADDRESS, DATA1_BIT_OFFSET, DATA1_BIT_WIDTH, value as u32); }

	const DATA0_BIT_OFFSET: u8 = 0;
	const DATA0_BIT_WIDTH: u8 = 8;
	/// DATA0 (Width: 8, Offset: 0)
	pub fn get_data0() -> u8 { ::read(REGISTER_ADDRESS, DATA0_BIT_OFFSET, DATA0_BIT_WIDTH) as u8 }
	/// DATA0 (Width: 8, Offset: 0)
	pub fn set_data0(value: u8) { ::write(REGISTER_ADDRESS, DATA0_BIT_OFFSET, DATA0_BIT_WIDTH, value as u32); }
}
/// mailbox data high register
/// Size: 0x20 bits
pub mod tdh0r {
	const REGISTER_ADDRESS_OFFSET: u32 = 0x18C;
	const REGISTER_ADDRESS: u32 = super::BASE_ADDRESS + REGISTER_ADDRESS_OFFSET;

	const DATA7_BIT_OFFSET: u8 = 24;
	const DATA7_BIT_WIDTH: u8 = 8;
	/// DATA7 (Width: 8, Offset: 24)
	pub fn get_data7() -> u8 { ::read(REGISTER_ADDRESS, DATA7_BIT_OFFSET, DATA7_BIT_WIDTH) as u8 }
	/// DATA7 (Width: 8, Offset: 24)
	pub fn set_data7(value: u8) { ::write(REGISTER_ADDRESS, DATA7_BIT_OFFSET, DATA7_BIT_WIDTH, value as u32); }

	const DATA6_BIT_OFFSET: u8 = 16;
	const DATA6_BIT_WIDTH: u8 = 8;
	/// DATA6 (Width: 8, Offset: 16)
	pub fn get_data6() -> u8 { ::read(REGISTER_ADDRESS, DATA6_BIT_OFFSET, DATA6_BIT_WIDTH) as u8 }
	/// DATA6 (Width: 8, Offset: 16)
	pub fn set_data6(value: u8) { ::write(REGISTER_ADDRESS, DATA6_BIT_OFFSET, DATA6_BIT_WIDTH, value as u32); }

	const DATA5_BIT_OFFSET: u8 = 8;
	const DATA5_BIT_WIDTH: u8 = 8;
	/// DATA5 (Width: 8, Offset: 8)
	pub fn get_data5() -> u8 { ::read(REGISTER_ADDRESS, DATA5_BIT_OFFSET, DATA5_BIT_WIDTH) as u8 }
	/// DATA5 (Width: 8, Offset: 8)
	pub fn set_data5(value: u8) { ::write(REGISTER_ADDRESS, DATA5_BIT_OFFSET, DATA5_BIT_WIDTH, value as u32); }

	const DATA4_BIT_OFFSET: u8 = 0;
	const DATA4_BIT_WIDTH: u8 = 8;
	/// DATA4 (Width: 8, Offset: 0)
	pub fn get_data4() -> u8 { ::read(REGISTER_ADDRESS, DATA4_BIT_OFFSET, DATA4_BIT_WIDTH) as u8 }
	/// DATA4 (Width: 8, Offset: 0)
	pub fn set_data4(value: u8) { ::write(REGISTER_ADDRESS, DATA4_BIT_OFFSET, DATA4_BIT_WIDTH, value as u32); }
}
/// TX mailbox identifier register
/// Size: 0x20 bits
pub mod ti1r {
	const REGISTER_ADDRESS_OFFSET: u32 = 0x190;
	const REGISTER_ADDRESS: u32 = super::BASE_ADDRESS + REGISTER_ADDRESS_OFFSET;

	const STID_BIT_OFFSET: u8 = 21;
	const STID_BIT_WIDTH: u8 = 11;
	/// STID (Width: 11, Offset: 21)
	pub fn get_stid() -> u16 { ::read(REGISTER_ADDRESS, STID_BIT_OFFSET, STID_BIT_WIDTH) as u16 }
	/// STID (Width: 11, Offset: 21)
	pub fn set_stid(value: u16) { ::write(REGISTER_ADDRESS, STID_BIT_OFFSET, STID_BIT_WIDTH, value as u32); }

	const EXID_BIT_OFFSET: u8 = 3;
	const EXID_BIT_WIDTH: u8 = 18;
	/// EXID (Width: 18, Offset: 3)
	pub fn get_exid() -> u32 { ::read(REGISTER_ADDRESS, EXID_BIT_OFFSET, EXID_BIT_WIDTH) as u32 }
	/// EXID (Width: 18, Offset: 3)
	pub fn set_exid(value: u32) { ::write(REGISTER_ADDRESS, EXID_BIT_OFFSET, EXID_BIT_WIDTH, value as u32); }

	const IDE_BIT_OFFSET: u8 = 2;
	const IDE_BIT_WIDTH: u8 = 1;
	/// IDE (Width: 1, Offset: 2)
	pub fn get_ide() -> u8 { ::read(REGISTER_ADDRESS, IDE_BIT_OFFSET, IDE_BIT_WIDTH) as u8 }
	/// IDE (Width: 1, Offset: 2)
	pub fn set_ide(value: u8) { ::write(REGISTER_ADDRESS, IDE_BIT_OFFSET, IDE_BIT_WIDTH, value as u32); }

	const RTR_BIT_OFFSET: u8 = 1;
	const RTR_BIT_WIDTH: u8 = 1;
	/// RTR (Width: 1, Offset: 1)
	pub fn get_rtr() -> u8 { ::read(REGISTER_ADDRESS, RTR_BIT_OFFSET, RTR_BIT_WIDTH) as u8 }
	/// RTR (Width: 1, Offset: 1)
	pub fn set_rtr(value: u8) { ::write(REGISTER_ADDRESS, RTR_BIT_OFFSET, RTR_BIT_WIDTH, value as u32); }

	const TXRQ_BIT_OFFSET: u8 = 0;
	const TXRQ_BIT_WIDTH: u8 = 1;
	/// TXRQ (Width: 1, Offset: 0)
	pub fn get_txrq() -> u8 { ::read(REGISTER_ADDRESS, TXRQ_BIT_OFFSET, TXRQ_BIT_WIDTH) as u8 }
	/// TXRQ (Width: 1, Offset: 0)
	pub fn set_txrq(value: u8) { ::write(REGISTER_ADDRESS, TXRQ_BIT_OFFSET, TXRQ_BIT_WIDTH, value as u32); }
}
/// mailbox data length control and time stamp register
/// Size: 0x20 bits
pub mod tdt1r {
	const REGISTER_ADDRESS_OFFSET: u32 = 0x194;
	const REGISTER_ADDRESS: u32 = super::BASE_ADDRESS + REGISTER_ADDRESS_OFFSET;

	const TIME_BIT_OFFSET: u8 = 16;
	const TIME_BIT_WIDTH: u8 = 16;
	/// TIME (Width: 16, Offset: 16)
	pub fn get_time() -> u16 { ::read(REGISTER_ADDRESS, TIME_BIT_OFFSET, TIME_BIT_WIDTH) as u16 }
	/// TIME (Width: 16, Offset: 16)
	pub fn set_time(value: u16) { ::write(REGISTER_ADDRESS, TIME_BIT_OFFSET, TIME_BIT_WIDTH, value as u32); }

	const TGT_BIT_OFFSET: u8 = 8;
	const TGT_BIT_WIDTH: u8 = 1;
	/// TGT (Width: 1, Offset: 8)
	pub fn get_tgt() -> u8 { ::read(REGISTER_ADDRESS, TGT_BIT_OFFSET, TGT_BIT_WIDTH) as u8 }
	/// TGT (Width: 1, Offset: 8)
	pub fn set_tgt(value: u8) { ::write(REGISTER_ADDRESS, TGT_BIT_OFFSET, TGT_BIT_WIDTH, value as u32); }

	const DLC_BIT_OFFSET: u8 = 0;
	const DLC_BIT_WIDTH: u8 = 4;
	/// DLC (Width: 4, Offset: 0)
	pub fn get_dlc() -> u8 { ::read(REGISTER_ADDRESS, DLC_BIT_OFFSET, DLC_BIT_WIDTH) as u8 }
	/// DLC (Width: 4, Offset: 0)
	pub fn set_dlc(value: u8) { ::write(REGISTER_ADDRESS, DLC_BIT_OFFSET, DLC_BIT_WIDTH, value as u32); }
}
/// mailbox data low register
/// Size: 0x20 bits
pub mod tdl1r {
	const REGISTER_ADDRESS_OFFSET: u32 = 0x198;
	const REGISTER_ADDRESS: u32 = super::BASE_ADDRESS + REGISTER_ADDRESS_OFFSET;

	const DATA3_BIT_OFFSET: u8 = 24;
	const DATA3_BIT_WIDTH: u8 = 8;
	/// DATA3 (Width: 8, Offset: 24)
	pub fn get_data3() -> u8 { ::read(REGISTER_ADDRESS, DATA3_BIT_OFFSET, DATA3_BIT_WIDTH) as u8 }
	/// DATA3 (Width: 8, Offset: 24)
	pub fn set_data3(value: u8) { ::write(REGISTER_ADDRESS, DATA3_BIT_OFFSET, DATA3_BIT_WIDTH, value as u32); }

	const DATA2_BIT_OFFSET: u8 = 16;
	const DATA2_BIT_WIDTH: u8 = 8;
	/// DATA2 (Width: 8, Offset: 16)
	pub fn get_data2() -> u8 { ::read(REGISTER_ADDRESS, DATA2_BIT_OFFSET, DATA2_BIT_WIDTH) as u8 }
	/// DATA2 (Width: 8, Offset: 16)
	pub fn set_data2(value: u8) { ::write(REGISTER_ADDRESS, DATA2_BIT_OFFSET, DATA2_BIT_WIDTH, value as u32); }

	const DATA1_BIT_OFFSET: u8 = 8;
	const DATA1_BIT_WIDTH: u8 = 8;
	/// DATA1 (Width: 8, Offset: 8)
	pub fn get_data1() -> u8 { ::read(REGISTER_ADDRESS, DATA1_BIT_OFFSET, DATA1_BIT_WIDTH) as u8 }
	/// DATA1 (Width: 8, Offset: 8)
	pub fn set_data1(value: u8) { ::write(REGISTER_ADDRESS, DATA1_BIT_OFFSET, DATA1_BIT_WIDTH, value as u32); }

	const DATA0_BIT_OFFSET: u8 = 0;
	const DATA0_BIT_WIDTH: u8 = 8;
	/// DATA0 (Width: 8, Offset: 0)
	pub fn get_data0() -> u8 { ::read(REGISTER_ADDRESS, DATA0_BIT_OFFSET, DATA0_BIT_WIDTH) as u8 }
	/// DATA0 (Width: 8, Offset: 0)
	pub fn set_data0(value: u8) { ::write(REGISTER_ADDRESS, DATA0_BIT_OFFSET, DATA0_BIT_WIDTH, value as u32); }
}
/// mailbox data high register
/// Size: 0x20 bits
pub mod tdh1r {
	const REGISTER_ADDRESS_OFFSET: u32 = 0x19C;
	const REGISTER_ADDRESS: u32 = super::BASE_ADDRESS + REGISTER_ADDRESS_OFFSET;

	const DATA7_BIT_OFFSET: u8 = 24;
	const DATA7_BIT_WIDTH: u8 = 8;
	/// DATA7 (Width: 8, Offset: 24)
	pub fn get_data7() -> u8 { ::read(REGISTER_ADDRESS, DATA7_BIT_OFFSET, DATA7_BIT_WIDTH) as u8 }
	/// DATA7 (Width: 8, Offset: 24)
	pub fn set_data7(value: u8) { ::write(REGISTER_ADDRESS, DATA7_BIT_OFFSET, DATA7_BIT_WIDTH, value as u32); }

	const DATA6_BIT_OFFSET: u8 = 16;
	const DATA6_BIT_WIDTH: u8 = 8;
	/// DATA6 (Width: 8, Offset: 16)
	pub fn get_data6() -> u8 { ::read(REGISTER_ADDRESS, DATA6_BIT_OFFSET, DATA6_BIT_WIDTH) as u8 }
	/// DATA6 (Width: 8, Offset: 16)
	pub fn set_data6(value: u8) { ::write(REGISTER_ADDRESS, DATA6_BIT_OFFSET, DATA6_BIT_WIDTH, value as u32); }

	const DATA5_BIT_OFFSET: u8 = 8;
	const DATA5_BIT_WIDTH: u8 = 8;
	/// DATA5 (Width: 8, Offset: 8)
	pub fn get_data5() -> u8 { ::read(REGISTER_ADDRESS, DATA5_BIT_OFFSET, DATA5_BIT_WIDTH) as u8 }
	/// DATA5 (Width: 8, Offset: 8)
	pub fn set_data5(value: u8) { ::write(REGISTER_ADDRESS, DATA5_BIT_OFFSET, DATA5_BIT_WIDTH, value as u32); }

	const DATA4_BIT_OFFSET: u8 = 0;
	const DATA4_BIT_WIDTH: u8 = 8;
	/// DATA4 (Width: 8, Offset: 0)
	pub fn get_data4() -> u8 { ::read(REGISTER_ADDRESS, DATA4_BIT_OFFSET, DATA4_BIT_WIDTH) as u8 }
	/// DATA4 (Width: 8, Offset: 0)
	pub fn set_data4(value: u8) { ::write(REGISTER_ADDRESS, DATA4_BIT_OFFSET, DATA4_BIT_WIDTH, value as u32); }
}
/// TX mailbox identifier register
/// Size: 0x20 bits
pub mod ti2r {
	const REGISTER_ADDRESS_OFFSET: u32 = 0x1A0;
	const REGISTER_ADDRESS: u32 = super::BASE_ADDRESS + REGISTER_ADDRESS_OFFSET;

	const STID_BIT_OFFSET: u8 = 21;
	const STID_BIT_WIDTH: u8 = 11;
	/// STID (Width: 11, Offset: 21)
	pub fn get_stid() -> u16 { ::read(REGISTER_ADDRESS, STID_BIT_OFFSET, STID_BIT_WIDTH) as u16 }
	/// STID (Width: 11, Offset: 21)
	pub fn set_stid(value: u16) { ::write(REGISTER_ADDRESS, STID_BIT_OFFSET, STID_BIT_WIDTH, value as u32); }

	const EXID_BIT_OFFSET: u8 = 3;
	const EXID_BIT_WIDTH: u8 = 18;
	/// EXID (Width: 18, Offset: 3)
	pub fn get_exid() -> u32 { ::read(REGISTER_ADDRESS, EXID_BIT_OFFSET, EXID_BIT_WIDTH) as u32 }
	/// EXID (Width: 18, Offset: 3)
	pub fn set_exid(value: u32) { ::write(REGISTER_ADDRESS, EXID_BIT_OFFSET, EXID_BIT_WIDTH, value as u32); }

	const IDE_BIT_OFFSET: u8 = 2;
	const IDE_BIT_WIDTH: u8 = 1;
	/// IDE (Width: 1, Offset: 2)
	pub fn get_ide() -> u8 { ::read(REGISTER_ADDRESS, IDE_BIT_OFFSET, IDE_BIT_WIDTH) as u8 }
	/// IDE (Width: 1, Offset: 2)
	pub fn set_ide(value: u8) { ::write(REGISTER_ADDRESS, IDE_BIT_OFFSET, IDE_BIT_WIDTH, value as u32); }

	const RTR_BIT_OFFSET: u8 = 1;
	const RTR_BIT_WIDTH: u8 = 1;
	/// RTR (Width: 1, Offset: 1)
	pub fn get_rtr() -> u8 { ::read(REGISTER_ADDRESS, RTR_BIT_OFFSET, RTR_BIT_WIDTH) as u8 }
	/// RTR (Width: 1, Offset: 1)
	pub fn set_rtr(value: u8) { ::write(REGISTER_ADDRESS, RTR_BIT_OFFSET, RTR_BIT_WIDTH, value as u32); }

	const TXRQ_BIT_OFFSET: u8 = 0;
	const TXRQ_BIT_WIDTH: u8 = 1;
	/// TXRQ (Width: 1, Offset: 0)
	pub fn get_txrq() -> u8 { ::read(REGISTER_ADDRESS, TXRQ_BIT_OFFSET, TXRQ_BIT_WIDTH) as u8 }
	/// TXRQ (Width: 1, Offset: 0)
	pub fn set_txrq(value: u8) { ::write(REGISTER_ADDRESS, TXRQ_BIT_OFFSET, TXRQ_BIT_WIDTH, value as u32); }
}
/// mailbox data length control and time stamp register
/// Size: 0x20 bits
pub mod tdt2r {
	const REGISTER_ADDRESS_OFFSET: u32 = 0x1A4;
	const REGISTER_ADDRESS: u32 = super::BASE_ADDRESS + REGISTER_ADDRESS_OFFSET;

	const TIME_BIT_OFFSET: u8 = 16;
	const TIME_BIT_WIDTH: u8 = 16;
	/// TIME (Width: 16, Offset: 16)
	pub fn get_time() -> u16 { ::read(REGISTER_ADDRESS, TIME_BIT_OFFSET, TIME_BIT_WIDTH) as u16 }
	/// TIME (Width: 16, Offset: 16)
	pub fn set_time(value: u16) { ::write(REGISTER_ADDRESS, TIME_BIT_OFFSET, TIME_BIT_WIDTH, value as u32); }

	const TGT_BIT_OFFSET: u8 = 8;
	const TGT_BIT_WIDTH: u8 = 1;
	/// TGT (Width: 1, Offset: 8)
	pub fn get_tgt() -> u8 { ::read(REGISTER_ADDRESS, TGT_BIT_OFFSET, TGT_BIT_WIDTH) as u8 }
	/// TGT (Width: 1, Offset: 8)
	pub fn set_tgt(value: u8) { ::write(REGISTER_ADDRESS, TGT_BIT_OFFSET, TGT_BIT_WIDTH, value as u32); }

	const DLC_BIT_OFFSET: u8 = 0;
	const DLC_BIT_WIDTH: u8 = 4;
	/// DLC (Width: 4, Offset: 0)
	pub fn get_dlc() -> u8 { ::read(REGISTER_ADDRESS, DLC_BIT_OFFSET, DLC_BIT_WIDTH) as u8 }
	/// DLC (Width: 4, Offset: 0)
	pub fn set_dlc(value: u8) { ::write(REGISTER_ADDRESS, DLC_BIT_OFFSET, DLC_BIT_WIDTH, value as u32); }
}
/// mailbox data low register
/// Size: 0x20 bits
pub mod tdl2r {
	const REGISTER_ADDRESS_OFFSET: u32 = 0x1A8;
	const REGISTER_ADDRESS: u32 = super::BASE_ADDRESS + REGISTER_ADDRESS_OFFSET;

	const DATA3_BIT_OFFSET: u8 = 24;
	const DATA3_BIT_WIDTH: u8 = 8;
	/// DATA3 (Width: 8, Offset: 24)
	pub fn get_data3() -> u8 { ::read(REGISTER_ADDRESS, DATA3_BIT_OFFSET, DATA3_BIT_WIDTH) as u8 }
	/// DATA3 (Width: 8, Offset: 24)
	pub fn set_data3(value: u8) { ::write(REGISTER_ADDRESS, DATA3_BIT_OFFSET, DATA3_BIT_WIDTH, value as u32); }

	const DATA2_BIT_OFFSET: u8 = 16;
	const DATA2_BIT_WIDTH: u8 = 8;
	/// DATA2 (Width: 8, Offset: 16)
	pub fn get_data2() -> u8 { ::read(REGISTER_ADDRESS, DATA2_BIT_OFFSET, DATA2_BIT_WIDTH) as u8 }
	/// DATA2 (Width: 8, Offset: 16)
	pub fn set_data2(value: u8) { ::write(REGISTER_ADDRESS, DATA2_BIT_OFFSET, DATA2_BIT_WIDTH, value as u32); }

	const DATA1_BIT_OFFSET: u8 = 8;
	const DATA1_BIT_WIDTH: u8 = 8;
	/// DATA1 (Width: 8, Offset: 8)
	pub fn get_data1() -> u8 { ::read(REGISTER_ADDRESS, DATA1_BIT_OFFSET, DATA1_BIT_WIDTH) as u8 }
	/// DATA1 (Width: 8, Offset: 8)
	pub fn set_data1(value: u8) { ::write(REGISTER_ADDRESS, DATA1_BIT_OFFSET, DATA1_BIT_WIDTH, value as u32); }

	const DATA0_BIT_OFFSET: u8 = 0;
	const DATA0_BIT_WIDTH: u8 = 8;
	/// DATA0 (Width: 8, Offset: 0)
	pub fn get_data0() -> u8 { ::read(REGISTER_ADDRESS, DATA0_BIT_OFFSET, DATA0_BIT_WIDTH) as u8 }
	/// DATA0 (Width: 8, Offset: 0)
	pub fn set_data0(value: u8) { ::write(REGISTER_ADDRESS, DATA0_BIT_OFFSET, DATA0_BIT_WIDTH, value as u32); }
}
/// mailbox data high register
/// Size: 0x20 bits
pub mod tdh2r {
	const REGISTER_ADDRESS_OFFSET: u32 = 0x1AC;
	const REGISTER_ADDRESS: u32 = super::BASE_ADDRESS + REGISTER_ADDRESS_OFFSET;

	const DATA7_BIT_OFFSET: u8 = 24;
	const DATA7_BIT_WIDTH: u8 = 8;
	/// DATA7 (Width: 8, Offset: 24)
	pub fn get_data7() -> u8 { ::read(REGISTER_ADDRESS, DATA7_BIT_OFFSET, DATA7_BIT_WIDTH) as u8 }
	/// DATA7 (Width: 8, Offset: 24)
	pub fn set_data7(value: u8) { ::write(REGISTER_ADDRESS, DATA7_BIT_OFFSET, DATA7_BIT_WIDTH, value as u32); }

	const DATA6_BIT_OFFSET: u8 = 16;
	const DATA6_BIT_WIDTH: u8 = 8;
	/// DATA6 (Width: 8, Offset: 16)
	pub fn get_data6() -> u8 { ::read(REGISTER_ADDRESS, DATA6_BIT_OFFSET, DATA6_BIT_WIDTH) as u8 }
	/// DATA6 (Width: 8, Offset: 16)
	pub fn set_data6(value: u8) { ::write(REGISTER_ADDRESS, DATA6_BIT_OFFSET, DATA6_BIT_WIDTH, value as u32); }

	const DATA5_BIT_OFFSET: u8 = 8;
	const DATA5_BIT_WIDTH: u8 = 8;
	/// DATA5 (Width: 8, Offset: 8)
	pub fn get_data5() -> u8 { ::read(REGISTER_ADDRESS, DATA5_BIT_OFFSET, DATA5_BIT_WIDTH) as u8 }
	/// DATA5 (Width: 8, Offset: 8)
	pub fn set_data5(value: u8) { ::write(REGISTER_ADDRESS, DATA5_BIT_OFFSET, DATA5_BIT_WIDTH, value as u32); }

	const DATA4_BIT_OFFSET: u8 = 0;
	const DATA4_BIT_WIDTH: u8 = 8;
	/// DATA4 (Width: 8, Offset: 0)
	pub fn get_data4() -> u8 { ::read(REGISTER_ADDRESS, DATA4_BIT_OFFSET, DATA4_BIT_WIDTH) as u8 }
	/// DATA4 (Width: 8, Offset: 0)
	pub fn set_data4(value: u8) { ::write(REGISTER_ADDRESS, DATA4_BIT_OFFSET, DATA4_BIT_WIDTH, value as u32); }
}
/// receive FIFO mailbox identifier register
/// Size: 0x20 bits
pub mod ri0r {
	const REGISTER_ADDRESS_OFFSET: u32 = 0x1B0;
	const REGISTER_ADDRESS: u32 = super::BASE_ADDRESS + REGISTER_ADDRESS_OFFSET;

	const STID_BIT_OFFSET: u8 = 21;
	const STID_BIT_WIDTH: u8 = 11;
	/// STID (Width: 11, Offset: 21)
	pub fn get_stid() -> u16 { ::read(REGISTER_ADDRESS, STID_BIT_OFFSET, STID_BIT_WIDTH) as u16 }

	const EXID_BIT_OFFSET: u8 = 3;
	const EXID_BIT_WIDTH: u8 = 18;
	/// EXID (Width: 18, Offset: 3)
	pub fn get_exid() -> u32 { ::read(REGISTER_ADDRESS, EXID_BIT_OFFSET, EXID_BIT_WIDTH) as u32 }

	const IDE_BIT_OFFSET: u8 = 2;
	const IDE_BIT_WIDTH: u8 = 1;
	/// IDE (Width: 1, Offset: 2)
	pub fn get_ide() -> u8 { ::read(REGISTER_ADDRESS, IDE_BIT_OFFSET, IDE_BIT_WIDTH) as u8 }

	const RTR_BIT_OFFSET: u8 = 1;
	const RTR_BIT_WIDTH: u8 = 1;
	/// RTR (Width: 1, Offset: 1)
	pub fn get_rtr() -> u8 { ::read(REGISTER_ADDRESS, RTR_BIT_OFFSET, RTR_BIT_WIDTH) as u8 }
}
/// receive FIFO mailbox data length control and time stamp register
/// Size: 0x20 bits
pub mod rdt0r {
	const REGISTER_ADDRESS_OFFSET: u32 = 0x1B4;
	const REGISTER_ADDRESS: u32 = super::BASE_ADDRESS + REGISTER_ADDRESS_OFFSET;

	const TIME_BIT_OFFSET: u8 = 16;
	const TIME_BIT_WIDTH: u8 = 16;
	/// TIME (Width: 16, Offset: 16)
	pub fn get_time() -> u16 { ::read(REGISTER_ADDRESS, TIME_BIT_OFFSET, TIME_BIT_WIDTH) as u16 }

	const FMI_BIT_OFFSET: u8 = 8;
	const FMI_BIT_WIDTH: u8 = 8;
	/// FMI (Width: 8, Offset: 8)
	pub fn get_fmi() -> u8 { ::read(REGISTER_ADDRESS, FMI_BIT_OFFSET, FMI_BIT_WIDTH) as u8 }

	const DLC_BIT_OFFSET: u8 = 0;
	const DLC_BIT_WIDTH: u8 = 4;
	/// DLC (Width: 4, Offset: 0)
	pub fn get_dlc() -> u8 { ::read(REGISTER_ADDRESS, DLC_BIT_OFFSET, DLC_BIT_WIDTH) as u8 }
}
/// receive FIFO mailbox data low register
/// Size: 0x20 bits
pub mod rdl0r {
	const REGISTER_ADDRESS_OFFSET: u32 = 0x1B8;
	const REGISTER_ADDRESS: u32 = super::BASE_ADDRESS + REGISTER_ADDRESS_OFFSET;

	const DATA3_BIT_OFFSET: u8 = 24;
	const DATA3_BIT_WIDTH: u8 = 8;
	/// DATA3 (Width: 8, Offset: 24)
	pub fn get_data3() -> u8 { ::read(REGISTER_ADDRESS, DATA3_BIT_OFFSET, DATA3_BIT_WIDTH) as u8 }

	const DATA2_BIT_OFFSET: u8 = 16;
	const DATA2_BIT_WIDTH: u8 = 8;
	/// DATA2 (Width: 8, Offset: 16)
	pub fn get_data2() -> u8 { ::read(REGISTER_ADDRESS, DATA2_BIT_OFFSET, DATA2_BIT_WIDTH) as u8 }

	const DATA1_BIT_OFFSET: u8 = 8;
	const DATA1_BIT_WIDTH: u8 = 8;
	/// DATA1 (Width: 8, Offset: 8)
	pub fn get_data1() -> u8 { ::read(REGISTER_ADDRESS, DATA1_BIT_OFFSET, DATA1_BIT_WIDTH) as u8 }

	const DATA0_BIT_OFFSET: u8 = 0;
	const DATA0_BIT_WIDTH: u8 = 8;
	/// DATA0 (Width: 8, Offset: 0)
	pub fn get_data0() -> u8 { ::read(REGISTER_ADDRESS, DATA0_BIT_OFFSET, DATA0_BIT_WIDTH) as u8 }
}
/// receive FIFO mailbox data high register
/// Size: 0x20 bits
pub mod rdh0r {
	const REGISTER_ADDRESS_OFFSET: u32 = 0x1BC;
	const REGISTER_ADDRESS: u32 = super::BASE_ADDRESS + REGISTER_ADDRESS_OFFSET;

	const DATA7_BIT_OFFSET: u8 = 24;
	const DATA7_BIT_WIDTH: u8 = 8;
	/// DATA7 (Width: 8, Offset: 24)
	pub fn get_data7() -> u8 { ::read(REGISTER_ADDRESS, DATA7_BIT_OFFSET, DATA7_BIT_WIDTH) as u8 }

	const DATA6_BIT_OFFSET: u8 = 16;
	const DATA6_BIT_WIDTH: u8 = 8;
	/// DATA6 (Width: 8, Offset: 16)
	pub fn get_data6() -> u8 { ::read(REGISTER_ADDRESS, DATA6_BIT_OFFSET, DATA6_BIT_WIDTH) as u8 }

	const DATA5_BIT_OFFSET: u8 = 8;
	const DATA5_BIT_WIDTH: u8 = 8;
	/// DATA5 (Width: 8, Offset: 8)
	pub fn get_data5() -> u8 { ::read(REGISTER_ADDRESS, DATA5_BIT_OFFSET, DATA5_BIT_WIDTH) as u8 }

	const DATA4_BIT_OFFSET: u8 = 0;
	const DATA4_BIT_WIDTH: u8 = 8;
	/// DATA4 (Width: 8, Offset: 0)
	pub fn get_data4() -> u8 { ::read(REGISTER_ADDRESS, DATA4_BIT_OFFSET, DATA4_BIT_WIDTH) as u8 }
}
/// receive FIFO mailbox identifier register
/// Size: 0x20 bits
pub mod ri1r {
	const REGISTER_ADDRESS_OFFSET: u32 = 0x1C0;
	const REGISTER_ADDRESS: u32 = super::BASE_ADDRESS + REGISTER_ADDRESS_OFFSET;

	const STID_BIT_OFFSET: u8 = 21;
	const STID_BIT_WIDTH: u8 = 11;
	/// STID (Width: 11, Offset: 21)
	pub fn get_stid() -> u16 { ::read(REGISTER_ADDRESS, STID_BIT_OFFSET, STID_BIT_WIDTH) as u16 }

	const EXID_BIT_OFFSET: u8 = 3;
	const EXID_BIT_WIDTH: u8 = 18;
	/// EXID (Width: 18, Offset: 3)
	pub fn get_exid() -> u32 { ::read(REGISTER_ADDRESS, EXID_BIT_OFFSET, EXID_BIT_WIDTH) as u32 }

	const IDE_BIT_OFFSET: u8 = 2;
	const IDE_BIT_WIDTH: u8 = 1;
	/// IDE (Width: 1, Offset: 2)
	pub fn get_ide() -> u8 { ::read(REGISTER_ADDRESS, IDE_BIT_OFFSET, IDE_BIT_WIDTH) as u8 }

	const RTR_BIT_OFFSET: u8 = 1;
	const RTR_BIT_WIDTH: u8 = 1;
	/// RTR (Width: 1, Offset: 1)
	pub fn get_rtr() -> u8 { ::read(REGISTER_ADDRESS, RTR_BIT_OFFSET, RTR_BIT_WIDTH) as u8 }
}
/// receive FIFO mailbox data length control and time stamp register
/// Size: 0x20 bits
pub mod rdt1r {
	const REGISTER_ADDRESS_OFFSET: u32 = 0x1C4;
	const REGISTER_ADDRESS: u32 = super::BASE_ADDRESS + REGISTER_ADDRESS_OFFSET;

	const TIME_BIT_OFFSET: u8 = 16;
	const TIME_BIT_WIDTH: u8 = 16;
	/// TIME (Width: 16, Offset: 16)
	pub fn get_time() -> u16 { ::read(REGISTER_ADDRESS, TIME_BIT_OFFSET, TIME_BIT_WIDTH) as u16 }

	const FMI_BIT_OFFSET: u8 = 8;
	const FMI_BIT_WIDTH: u8 = 8;
	/// FMI (Width: 8, Offset: 8)
	pub fn get_fmi() -> u8 { ::read(REGISTER_ADDRESS, FMI_BIT_OFFSET, FMI_BIT_WIDTH) as u8 }

	const DLC_BIT_OFFSET: u8 = 0;
	const DLC_BIT_WIDTH: u8 = 4;
	/// DLC (Width: 4, Offset: 0)
	pub fn get_dlc() -> u8 { ::read(REGISTER_ADDRESS, DLC_BIT_OFFSET, DLC_BIT_WIDTH) as u8 }
}
/// receive FIFO mailbox data low register
/// Size: 0x20 bits
pub mod rdl1r {
	const REGISTER_ADDRESS_OFFSET: u32 = 0x1C8;
	const REGISTER_ADDRESS: u32 = super::BASE_ADDRESS + REGISTER_ADDRESS_OFFSET;

	const DATA3_BIT_OFFSET: u8 = 24;
	const DATA3_BIT_WIDTH: u8 = 8;
	/// DATA3 (Width: 8, Offset: 24)
	pub fn get_data3() -> u8 { ::read(REGISTER_ADDRESS, DATA3_BIT_OFFSET, DATA3_BIT_WIDTH) as u8 }

	const DATA2_BIT_OFFSET: u8 = 16;
	const DATA2_BIT_WIDTH: u8 = 8;
	/// DATA2 (Width: 8, Offset: 16)
	pub fn get_data2() -> u8 { ::read(REGISTER_ADDRESS, DATA2_BIT_OFFSET, DATA2_BIT_WIDTH) as u8 }

	const DATA1_BIT_OFFSET: u8 = 8;
	const DATA1_BIT_WIDTH: u8 = 8;
	/// DATA1 (Width: 8, Offset: 8)
	pub fn get_data1() -> u8 { ::read(REGISTER_ADDRESS, DATA1_BIT_OFFSET, DATA1_BIT_WIDTH) as u8 }

	const DATA0_BIT_OFFSET: u8 = 0;
	const DATA0_BIT_WIDTH: u8 = 8;
	/// DATA0 (Width: 8, Offset: 0)
	pub fn get_data0() -> u8 { ::read(REGISTER_ADDRESS, DATA0_BIT_OFFSET, DATA0_BIT_WIDTH) as u8 }
}
/// receive FIFO mailbox data high register
/// Size: 0x20 bits
pub mod rdh1r {
	const REGISTER_ADDRESS_OFFSET: u32 = 0x1CC;
	const REGISTER_ADDRESS: u32 = super::BASE_ADDRESS + REGISTER_ADDRESS_OFFSET;

	const DATA7_BIT_OFFSET: u8 = 24;
	const DATA7_BIT_WIDTH: u8 = 8;
	/// DATA7 (Width: 8, Offset: 24)
	pub fn get_data7() -> u8 { ::read(REGISTER_ADDRESS, DATA7_BIT_OFFSET, DATA7_BIT_WIDTH) as u8 }

	const DATA6_BIT_OFFSET: u8 = 16;
	const DATA6_BIT_WIDTH: u8 = 8;
	/// DATA6 (Width: 8, Offset: 16)
	pub fn get_data6() -> u8 { ::read(REGISTER_ADDRESS, DATA6_BIT_OFFSET, DATA6_BIT_WIDTH) as u8 }

	const DATA5_BIT_OFFSET: u8 = 8;
	const DATA5_BIT_WIDTH: u8 = 8;
	/// DATA5 (Width: 8, Offset: 8)
	pub fn get_data5() -> u8 { ::read(REGISTER_ADDRESS, DATA5_BIT_OFFSET, DATA5_BIT_WIDTH) as u8 }

	const DATA4_BIT_OFFSET: u8 = 0;
	const DATA4_BIT_WIDTH: u8 = 8;
	/// DATA4 (Width: 8, Offset: 0)
	pub fn get_data4() -> u8 { ::read(REGISTER_ADDRESS, DATA4_BIT_OFFSET, DATA4_BIT_WIDTH) as u8 }
}
/// filter master register
/// Size: 0x20 bits
pub mod fmr {
	const REGISTER_ADDRESS_OFFSET: u32 = 0x200;
	const REGISTER_ADDRESS: u32 = super::BASE_ADDRESS + REGISTER_ADDRESS_OFFSET;

	const CAN2SB_BIT_OFFSET: u8 = 8;
	const CAN2SB_BIT_WIDTH: u8 = 6;
	/// CAN2 start bank (Width: 6, Offset: 8)
	pub fn get_can2sb() -> u8 { ::read(REGISTER_ADDRESS, CAN2SB_BIT_OFFSET, CAN2SB_BIT_WIDTH) as u8 }
	/// CAN2 start bank (Width: 6, Offset: 8)
	pub fn set_can2sb(value: u8) { ::write(REGISTER_ADDRESS, CAN2SB_BIT_OFFSET, CAN2SB_BIT_WIDTH, value as u32); }

	const FINIT_BIT_OFFSET: u8 = 0;
	const FINIT_BIT_WIDTH: u8 = 1;
	/// Filter init mode (Width: 1, Offset: 0)
	pub fn get_finit() -> u8 { ::read(REGISTER_ADDRESS, FINIT_BIT_OFFSET, FINIT_BIT_WIDTH) as u8 }
	/// Filter init mode (Width: 1, Offset: 0)
	pub fn set_finit(value: u8) { ::write(REGISTER_ADDRESS, FINIT_BIT_OFFSET, FINIT_BIT_WIDTH, value as u32); }
}
/// filter mode register
/// Size: 0x20 bits
pub mod fm1r {
	const REGISTER_ADDRESS_OFFSET: u32 = 0x204;
	const REGISTER_ADDRESS: u32 = super::BASE_ADDRESS + REGISTER_ADDRESS_OFFSET;

	const FBM0_BIT_OFFSET: u8 = 0;
	const FBM0_BIT_WIDTH: u8 = 1;
	/// Filter mode (Width: 1, Offset: 0)
	pub fn get_fbm0() -> u8 { ::read(REGISTER_ADDRESS, FBM0_BIT_OFFSET, FBM0_BIT_WIDTH) as u8 }
	/// Filter mode (Width: 1, Offset: 0)
	pub fn set_fbm0(value: u8) { ::write(REGISTER_ADDRESS, FBM0_BIT_OFFSET, FBM0_BIT_WIDTH, value as u32); }

	const FBM1_BIT_OFFSET: u8 = 1;
	const FBM1_BIT_WIDTH: u8 = 1;
	/// Filter mode (Width: 1, Offset: 1)
	pub fn get_fbm1() -> u8 { ::read(REGISTER_ADDRESS, FBM1_BIT_OFFSET, FBM1_BIT_WIDTH) as u8 }
	/// Filter mode (Width: 1, Offset: 1)
	pub fn set_fbm1(value: u8) { ::write(REGISTER_ADDRESS, FBM1_BIT_OFFSET, FBM1_BIT_WIDTH, value as u32); }

	const FBM2_BIT_OFFSET: u8 = 2;
	const FBM2_BIT_WIDTH: u8 = 1;
	/// Filter mode (Width: 1, Offset: 2)
	pub fn get_fbm2() -> u8 { ::read(REGISTER_ADDRESS, FBM2_BIT_OFFSET, FBM2_BIT_WIDTH) as u8 }
	/// Filter mode (Width: 1, Offset: 2)
	pub fn set_fbm2(value: u8) { ::write(REGISTER_ADDRESS, FBM2_BIT_OFFSET, FBM2_BIT_WIDTH, value as u32); }

	const FBM3_BIT_OFFSET: u8 = 3;
	const FBM3_BIT_WIDTH: u8 = 1;
	/// Filter mode (Width: 1, Offset: 3)
	pub fn get_fbm3() -> u8 { ::read(REGISTER_ADDRESS, FBM3_BIT_OFFSET, FBM3_BIT_WIDTH) as u8 }
	/// Filter mode (Width: 1, Offset: 3)
	pub fn set_fbm3(value: u8) { ::write(REGISTER_ADDRESS, FBM3_BIT_OFFSET, FBM3_BIT_WIDTH, value as u32); }

	const FBM4_BIT_OFFSET: u8 = 4;
	const FBM4_BIT_WIDTH: u8 = 1;
	/// Filter mode (Width: 1, Offset: 4)
	pub fn get_fbm4() -> u8 { ::read(REGISTER_ADDRESS, FBM4_BIT_OFFSET, FBM4_BIT_WIDTH) as u8 }
	/// Filter mode (Width: 1, Offset: 4)
	pub fn set_fbm4(value: u8) { ::write(REGISTER_ADDRESS, FBM4_BIT_OFFSET, FBM4_BIT_WIDTH, value as u32); }

	const FBM5_BIT_OFFSET: u8 = 5;
	const FBM5_BIT_WIDTH: u8 = 1;
	/// Filter mode (Width: 1, Offset: 5)
	pub fn get_fbm5() -> u8 { ::read(REGISTER_ADDRESS, FBM5_BIT_OFFSET, FBM5_BIT_WIDTH) as u8 }
	/// Filter mode (Width: 1, Offset: 5)
	pub fn set_fbm5(value: u8) { ::write(REGISTER_ADDRESS, FBM5_BIT_OFFSET, FBM5_BIT_WIDTH, value as u32); }

	const FBM6_BIT_OFFSET: u8 = 6;
	const FBM6_BIT_WIDTH: u8 = 1;
	/// Filter mode (Width: 1, Offset: 6)
	pub fn get_fbm6() -> u8 { ::read(REGISTER_ADDRESS, FBM6_BIT_OFFSET, FBM6_BIT_WIDTH) as u8 }
	/// Filter mode (Width: 1, Offset: 6)
	pub fn set_fbm6(value: u8) { ::write(REGISTER_ADDRESS, FBM6_BIT_OFFSET, FBM6_BIT_WIDTH, value as u32); }

	const FBM7_BIT_OFFSET: u8 = 7;
	const FBM7_BIT_WIDTH: u8 = 1;
	/// Filter mode (Width: 1, Offset: 7)
	pub fn get_fbm7() -> u8 { ::read(REGISTER_ADDRESS, FBM7_BIT_OFFSET, FBM7_BIT_WIDTH) as u8 }
	/// Filter mode (Width: 1, Offset: 7)
	pub fn set_fbm7(value: u8) { ::write(REGISTER_ADDRESS, FBM7_BIT_OFFSET, FBM7_BIT_WIDTH, value as u32); }

	const FBM8_BIT_OFFSET: u8 = 8;
	const FBM8_BIT_WIDTH: u8 = 1;
	/// Filter mode (Width: 1, Offset: 8)
	pub fn get_fbm8() -> u8 { ::read(REGISTER_ADDRESS, FBM8_BIT_OFFSET, FBM8_BIT_WIDTH) as u8 }
	/// Filter mode (Width: 1, Offset: 8)
	pub fn set_fbm8(value: u8) { ::write(REGISTER_ADDRESS, FBM8_BIT_OFFSET, FBM8_BIT_WIDTH, value as u32); }

	const FBM9_BIT_OFFSET: u8 = 9;
	const FBM9_BIT_WIDTH: u8 = 1;
	/// Filter mode (Width: 1, Offset: 9)
	pub fn get_fbm9() -> u8 { ::read(REGISTER_ADDRESS, FBM9_BIT_OFFSET, FBM9_BIT_WIDTH) as u8 }
	/// Filter mode (Width: 1, Offset: 9)
	pub fn set_fbm9(value: u8) { ::write(REGISTER_ADDRESS, FBM9_BIT_OFFSET, FBM9_BIT_WIDTH, value as u32); }

	const FBM10_BIT_OFFSET: u8 = 10;
	const FBM10_BIT_WIDTH: u8 = 1;
	/// Filter mode (Width: 1, Offset: 10)
	pub fn get_fbm10() -> u8 { ::read(REGISTER_ADDRESS, FBM10_BIT_OFFSET, FBM10_BIT_WIDTH) as u8 }
	/// Filter mode (Width: 1, Offset: 10)
	pub fn set_fbm10(value: u8) { ::write(REGISTER_ADDRESS, FBM10_BIT_OFFSET, FBM10_BIT_WIDTH, value as u32); }

	const FBM11_BIT_OFFSET: u8 = 11;
	const FBM11_BIT_WIDTH: u8 = 1;
	/// Filter mode (Width: 1, Offset: 11)
	pub fn get_fbm11() -> u8 { ::read(REGISTER_ADDRESS, FBM11_BIT_OFFSET, FBM11_BIT_WIDTH) as u8 }
	/// Filter mode (Width: 1, Offset: 11)
	pub fn set_fbm11(value: u8) { ::write(REGISTER_ADDRESS, FBM11_BIT_OFFSET, FBM11_BIT_WIDTH, value as u32); }

	const FBM12_BIT_OFFSET: u8 = 12;
	const FBM12_BIT_WIDTH: u8 = 1;
	/// Filter mode (Width: 1, Offset: 12)
	pub fn get_fbm12() -> u8 { ::read(REGISTER_ADDRESS, FBM12_BIT_OFFSET, FBM12_BIT_WIDTH) as u8 }
	/// Filter mode (Width: 1, Offset: 12)
	pub fn set_fbm12(value: u8) { ::write(REGISTER_ADDRESS, FBM12_BIT_OFFSET, FBM12_BIT_WIDTH, value as u32); }

	const FBM13_BIT_OFFSET: u8 = 13;
	const FBM13_BIT_WIDTH: u8 = 1;
	/// Filter mode (Width: 1, Offset: 13)
	pub fn get_fbm13() -> u8 { ::read(REGISTER_ADDRESS, FBM13_BIT_OFFSET, FBM13_BIT_WIDTH) as u8 }
	/// Filter mode (Width: 1, Offset: 13)
	pub fn set_fbm13(value: u8) { ::write(REGISTER_ADDRESS, FBM13_BIT_OFFSET, FBM13_BIT_WIDTH, value as u32); }

	const FBM14_BIT_OFFSET: u8 = 14;
	const FBM14_BIT_WIDTH: u8 = 1;
	/// Filter mode (Width: 1, Offset: 14)
	pub fn get_fbm14() -> u8 { ::read(REGISTER_ADDRESS, FBM14_BIT_OFFSET, FBM14_BIT_WIDTH) as u8 }
	/// Filter mode (Width: 1, Offset: 14)
	pub fn set_fbm14(value: u8) { ::write(REGISTER_ADDRESS, FBM14_BIT_OFFSET, FBM14_BIT_WIDTH, value as u32); }

	const FBM15_BIT_OFFSET: u8 = 15;
	const FBM15_BIT_WIDTH: u8 = 1;
	/// Filter mode (Width: 1, Offset: 15)
	pub fn get_fbm15() -> u8 { ::read(REGISTER_ADDRESS, FBM15_BIT_OFFSET, FBM15_BIT_WIDTH) as u8 }
	/// Filter mode (Width: 1, Offset: 15)
	pub fn set_fbm15(value: u8) { ::write(REGISTER_ADDRESS, FBM15_BIT_OFFSET, FBM15_BIT_WIDTH, value as u32); }

	const FBM16_BIT_OFFSET: u8 = 16;
	const FBM16_BIT_WIDTH: u8 = 1;
	/// Filter mode (Width: 1, Offset: 16)
	pub fn get_fbm16() -> u8 { ::read(REGISTER_ADDRESS, FBM16_BIT_OFFSET, FBM16_BIT_WIDTH) as u8 }
	/// Filter mode (Width: 1, Offset: 16)
	pub fn set_fbm16(value: u8) { ::write(REGISTER_ADDRESS, FBM16_BIT_OFFSET, FBM16_BIT_WIDTH, value as u32); }

	const FBM17_BIT_OFFSET: u8 = 17;
	const FBM17_BIT_WIDTH: u8 = 1;
	/// Filter mode (Width: 1, Offset: 17)
	pub fn get_fbm17() -> u8 { ::read(REGISTER_ADDRESS, FBM17_BIT_OFFSET, FBM17_BIT_WIDTH) as u8 }
	/// Filter mode (Width: 1, Offset: 17)
	pub fn set_fbm17(value: u8) { ::write(REGISTER_ADDRESS, FBM17_BIT_OFFSET, FBM17_BIT_WIDTH, value as u32); }

	const FBM18_BIT_OFFSET: u8 = 18;
	const FBM18_BIT_WIDTH: u8 = 1;
	/// Filter mode (Width: 1, Offset: 18)
	pub fn get_fbm18() -> u8 { ::read(REGISTER_ADDRESS, FBM18_BIT_OFFSET, FBM18_BIT_WIDTH) as u8 }
	/// Filter mode (Width: 1, Offset: 18)
	pub fn set_fbm18(value: u8) { ::write(REGISTER_ADDRESS, FBM18_BIT_OFFSET, FBM18_BIT_WIDTH, value as u32); }

	const FBM19_BIT_OFFSET: u8 = 19;
	const FBM19_BIT_WIDTH: u8 = 1;
	/// Filter mode (Width: 1, Offset: 19)
	pub fn get_fbm19() -> u8 { ::read(REGISTER_ADDRESS, FBM19_BIT_OFFSET, FBM19_BIT_WIDTH) as u8 }
	/// Filter mode (Width: 1, Offset: 19)
	pub fn set_fbm19(value: u8) { ::write(REGISTER_ADDRESS, FBM19_BIT_OFFSET, FBM19_BIT_WIDTH, value as u32); }

	const FBM20_BIT_OFFSET: u8 = 20;
	const FBM20_BIT_WIDTH: u8 = 1;
	/// Filter mode (Width: 1, Offset: 20)
	pub fn get_fbm20() -> u8 { ::read(REGISTER_ADDRESS, FBM20_BIT_OFFSET, FBM20_BIT_WIDTH) as u8 }
	/// Filter mode (Width: 1, Offset: 20)
	pub fn set_fbm20(value: u8) { ::write(REGISTER_ADDRESS, FBM20_BIT_OFFSET, FBM20_BIT_WIDTH, value as u32); }

	const FBM21_BIT_OFFSET: u8 = 21;
	const FBM21_BIT_WIDTH: u8 = 1;
	/// Filter mode (Width: 1, Offset: 21)
	pub fn get_fbm21() -> u8 { ::read(REGISTER_ADDRESS, FBM21_BIT_OFFSET, FBM21_BIT_WIDTH) as u8 }
	/// Filter mode (Width: 1, Offset: 21)
	pub fn set_fbm21(value: u8) { ::write(REGISTER_ADDRESS, FBM21_BIT_OFFSET, FBM21_BIT_WIDTH, value as u32); }

	const FBM22_BIT_OFFSET: u8 = 22;
	const FBM22_BIT_WIDTH: u8 = 1;
	/// Filter mode (Width: 1, Offset: 22)
	pub fn get_fbm22() -> u8 { ::read(REGISTER_ADDRESS, FBM22_BIT_OFFSET, FBM22_BIT_WIDTH) as u8 }
	/// Filter mode (Width: 1, Offset: 22)
	pub fn set_fbm22(value: u8) { ::write(REGISTER_ADDRESS, FBM22_BIT_OFFSET, FBM22_BIT_WIDTH, value as u32); }

	const FBM23_BIT_OFFSET: u8 = 23;
	const FBM23_BIT_WIDTH: u8 = 1;
	/// Filter mode (Width: 1, Offset: 23)
	pub fn get_fbm23() -> u8 { ::read(REGISTER_ADDRESS, FBM23_BIT_OFFSET, FBM23_BIT_WIDTH) as u8 }
	/// Filter mode (Width: 1, Offset: 23)
	pub fn set_fbm23(value: u8) { ::write(REGISTER_ADDRESS, FBM23_BIT_OFFSET, FBM23_BIT_WIDTH, value as u32); }

	const FBM24_BIT_OFFSET: u8 = 24;
	const FBM24_BIT_WIDTH: u8 = 1;
	/// Filter mode (Width: 1, Offset: 24)
	pub fn get_fbm24() -> u8 { ::read(REGISTER_ADDRESS, FBM24_BIT_OFFSET, FBM24_BIT_WIDTH) as u8 }
	/// Filter mode (Width: 1, Offset: 24)
	pub fn set_fbm24(value: u8) { ::write(REGISTER_ADDRESS, FBM24_BIT_OFFSET, FBM24_BIT_WIDTH, value as u32); }

	const FBM25_BIT_OFFSET: u8 = 25;
	const FBM25_BIT_WIDTH: u8 = 1;
	/// Filter mode (Width: 1, Offset: 25)
	pub fn get_fbm25() -> u8 { ::read(REGISTER_ADDRESS, FBM25_BIT_OFFSET, FBM25_BIT_WIDTH) as u8 }
	/// Filter mode (Width: 1, Offset: 25)
	pub fn set_fbm25(value: u8) { ::write(REGISTER_ADDRESS, FBM25_BIT_OFFSET, FBM25_BIT_WIDTH, value as u32); }

	const FBM26_BIT_OFFSET: u8 = 26;
	const FBM26_BIT_WIDTH: u8 = 1;
	/// Filter mode (Width: 1, Offset: 26)
	pub fn get_fbm26() -> u8 { ::read(REGISTER_ADDRESS, FBM26_BIT_OFFSET, FBM26_BIT_WIDTH) as u8 }
	/// Filter mode (Width: 1, Offset: 26)
	pub fn set_fbm26(value: u8) { ::write(REGISTER_ADDRESS, FBM26_BIT_OFFSET, FBM26_BIT_WIDTH, value as u32); }

	const FBM27_BIT_OFFSET: u8 = 27;
	const FBM27_BIT_WIDTH: u8 = 1;
	/// Filter mode (Width: 1, Offset: 27)
	pub fn get_fbm27() -> u8 { ::read(REGISTER_ADDRESS, FBM27_BIT_OFFSET, FBM27_BIT_WIDTH) as u8 }
	/// Filter mode (Width: 1, Offset: 27)
	pub fn set_fbm27(value: u8) { ::write(REGISTER_ADDRESS, FBM27_BIT_OFFSET, FBM27_BIT_WIDTH, value as u32); }
}
/// filter scale register
/// Size: 0x20 bits
pub mod fs1r {
	const REGISTER_ADDRESS_OFFSET: u32 = 0x20C;
	const REGISTER_ADDRESS: u32 = super::BASE_ADDRESS + REGISTER_ADDRESS_OFFSET;

	const FSC0_BIT_OFFSET: u8 = 0;
	const FSC0_BIT_WIDTH: u8 = 1;
	/// Filter scale configuration (Width: 1, Offset: 0)
	pub fn get_fsc0() -> u8 { ::read(REGISTER_ADDRESS, FSC0_BIT_OFFSET, FSC0_BIT_WIDTH) as u8 }
	/// Filter scale configuration (Width: 1, Offset: 0)
	pub fn set_fsc0(value: u8) { ::write(REGISTER_ADDRESS, FSC0_BIT_OFFSET, FSC0_BIT_WIDTH, value as u32); }

	const FSC1_BIT_OFFSET: u8 = 1;
	const FSC1_BIT_WIDTH: u8 = 1;
	/// Filter scale configuration (Width: 1, Offset: 1)
	pub fn get_fsc1() -> u8 { ::read(REGISTER_ADDRESS, FSC1_BIT_OFFSET, FSC1_BIT_WIDTH) as u8 }
	/// Filter scale configuration (Width: 1, Offset: 1)
	pub fn set_fsc1(value: u8) { ::write(REGISTER_ADDRESS, FSC1_BIT_OFFSET, FSC1_BIT_WIDTH, value as u32); }

	const FSC2_BIT_OFFSET: u8 = 2;
	const FSC2_BIT_WIDTH: u8 = 1;
	/// Filter scale configuration (Width: 1, Offset: 2)
	pub fn get_fsc2() -> u8 { ::read(REGISTER_ADDRESS, FSC2_BIT_OFFSET, FSC2_BIT_WIDTH) as u8 }
	/// Filter scale configuration (Width: 1, Offset: 2)
	pub fn set_fsc2(value: u8) { ::write(REGISTER_ADDRESS, FSC2_BIT_OFFSET, FSC2_BIT_WIDTH, value as u32); }

	const FSC3_BIT_OFFSET: u8 = 3;
	const FSC3_BIT_WIDTH: u8 = 1;
	/// Filter scale configuration (Width: 1, Offset: 3)
	pub fn get_fsc3() -> u8 { ::read(REGISTER_ADDRESS, FSC3_BIT_OFFSET, FSC3_BIT_WIDTH) as u8 }
	/// Filter scale configuration (Width: 1, Offset: 3)
	pub fn set_fsc3(value: u8) { ::write(REGISTER_ADDRESS, FSC3_BIT_OFFSET, FSC3_BIT_WIDTH, value as u32); }

	const FSC4_BIT_OFFSET: u8 = 4;
	const FSC4_BIT_WIDTH: u8 = 1;
	/// Filter scale configuration (Width: 1, Offset: 4)
	pub fn get_fsc4() -> u8 { ::read(REGISTER_ADDRESS, FSC4_BIT_OFFSET, FSC4_BIT_WIDTH) as u8 }
	/// Filter scale configuration (Width: 1, Offset: 4)
	pub fn set_fsc4(value: u8) { ::write(REGISTER_ADDRESS, FSC4_BIT_OFFSET, FSC4_BIT_WIDTH, value as u32); }

	const FSC5_BIT_OFFSET: u8 = 5;
	const FSC5_BIT_WIDTH: u8 = 1;
	/// Filter scale configuration (Width: 1, Offset: 5)
	pub fn get_fsc5() -> u8 { ::read(REGISTER_ADDRESS, FSC5_BIT_OFFSET, FSC5_BIT_WIDTH) as u8 }
	/// Filter scale configuration (Width: 1, Offset: 5)
	pub fn set_fsc5(value: u8) { ::write(REGISTER_ADDRESS, FSC5_BIT_OFFSET, FSC5_BIT_WIDTH, value as u32); }

	const FSC6_BIT_OFFSET: u8 = 6;
	const FSC6_BIT_WIDTH: u8 = 1;
	/// Filter scale configuration (Width: 1, Offset: 6)
	pub fn get_fsc6() -> u8 { ::read(REGISTER_ADDRESS, FSC6_BIT_OFFSET, FSC6_BIT_WIDTH) as u8 }
	/// Filter scale configuration (Width: 1, Offset: 6)
	pub fn set_fsc6(value: u8) { ::write(REGISTER_ADDRESS, FSC6_BIT_OFFSET, FSC6_BIT_WIDTH, value as u32); }

	const FSC7_BIT_OFFSET: u8 = 7;
	const FSC7_BIT_WIDTH: u8 = 1;
	/// Filter scale configuration (Width: 1, Offset: 7)
	pub fn get_fsc7() -> u8 { ::read(REGISTER_ADDRESS, FSC7_BIT_OFFSET, FSC7_BIT_WIDTH) as u8 }
	/// Filter scale configuration (Width: 1, Offset: 7)
	pub fn set_fsc7(value: u8) { ::write(REGISTER_ADDRESS, FSC7_BIT_OFFSET, FSC7_BIT_WIDTH, value as u32); }

	const FSC8_BIT_OFFSET: u8 = 8;
	const FSC8_BIT_WIDTH: u8 = 1;
	/// Filter scale configuration (Width: 1, Offset: 8)
	pub fn get_fsc8() -> u8 { ::read(REGISTER_ADDRESS, FSC8_BIT_OFFSET, FSC8_BIT_WIDTH) as u8 }
	/// Filter scale configuration (Width: 1, Offset: 8)
	pub fn set_fsc8(value: u8) { ::write(REGISTER_ADDRESS, FSC8_BIT_OFFSET, FSC8_BIT_WIDTH, value as u32); }

	const FSC9_BIT_OFFSET: u8 = 9;
	const FSC9_BIT_WIDTH: u8 = 1;
	/// Filter scale configuration (Width: 1, Offset: 9)
	pub fn get_fsc9() -> u8 { ::read(REGISTER_ADDRESS, FSC9_BIT_OFFSET, FSC9_BIT_WIDTH) as u8 }
	/// Filter scale configuration (Width: 1, Offset: 9)
	pub fn set_fsc9(value: u8) { ::write(REGISTER_ADDRESS, FSC9_BIT_OFFSET, FSC9_BIT_WIDTH, value as u32); }

	const FSC10_BIT_OFFSET: u8 = 10;
	const FSC10_BIT_WIDTH: u8 = 1;
	/// Filter scale configuration (Width: 1, Offset: 10)
	pub fn get_fsc10() -> u8 { ::read(REGISTER_ADDRESS, FSC10_BIT_OFFSET, FSC10_BIT_WIDTH) as u8 }
	/// Filter scale configuration (Width: 1, Offset: 10)
	pub fn set_fsc10(value: u8) { ::write(REGISTER_ADDRESS, FSC10_BIT_OFFSET, FSC10_BIT_WIDTH, value as u32); }

	const FSC11_BIT_OFFSET: u8 = 11;
	const FSC11_BIT_WIDTH: u8 = 1;
	/// Filter scale configuration (Width: 1, Offset: 11)
	pub fn get_fsc11() -> u8 { ::read(REGISTER_ADDRESS, FSC11_BIT_OFFSET, FSC11_BIT_WIDTH) as u8 }
	/// Filter scale configuration (Width: 1, Offset: 11)
	pub fn set_fsc11(value: u8) { ::write(REGISTER_ADDRESS, FSC11_BIT_OFFSET, FSC11_BIT_WIDTH, value as u32); }

	const FSC12_BIT_OFFSET: u8 = 12;
	const FSC12_BIT_WIDTH: u8 = 1;
	/// Filter scale configuration (Width: 1, Offset: 12)
	pub fn get_fsc12() -> u8 { ::read(REGISTER_ADDRESS, FSC12_BIT_OFFSET, FSC12_BIT_WIDTH) as u8 }
	/// Filter scale configuration (Width: 1, Offset: 12)
	pub fn set_fsc12(value: u8) { ::write(REGISTER_ADDRESS, FSC12_BIT_OFFSET, FSC12_BIT_WIDTH, value as u32); }

	const FSC13_BIT_OFFSET: u8 = 13;
	const FSC13_BIT_WIDTH: u8 = 1;
	/// Filter scale configuration (Width: 1, Offset: 13)
	pub fn get_fsc13() -> u8 { ::read(REGISTER_ADDRESS, FSC13_BIT_OFFSET, FSC13_BIT_WIDTH) as u8 }
	/// Filter scale configuration (Width: 1, Offset: 13)
	pub fn set_fsc13(value: u8) { ::write(REGISTER_ADDRESS, FSC13_BIT_OFFSET, FSC13_BIT_WIDTH, value as u32); }

	const FSC14_BIT_OFFSET: u8 = 14;
	const FSC14_BIT_WIDTH: u8 = 1;
	/// Filter scale configuration (Width: 1, Offset: 14)
	pub fn get_fsc14() -> u8 { ::read(REGISTER_ADDRESS, FSC14_BIT_OFFSET, FSC14_BIT_WIDTH) as u8 }
	/// Filter scale configuration (Width: 1, Offset: 14)
	pub fn set_fsc14(value: u8) { ::write(REGISTER_ADDRESS, FSC14_BIT_OFFSET, FSC14_BIT_WIDTH, value as u32); }

	const FSC15_BIT_OFFSET: u8 = 15;
	const FSC15_BIT_WIDTH: u8 = 1;
	/// Filter scale configuration (Width: 1, Offset: 15)
	pub fn get_fsc15() -> u8 { ::read(REGISTER_ADDRESS, FSC15_BIT_OFFSET, FSC15_BIT_WIDTH) as u8 }
	/// Filter scale configuration (Width: 1, Offset: 15)
	pub fn set_fsc15(value: u8) { ::write(REGISTER_ADDRESS, FSC15_BIT_OFFSET, FSC15_BIT_WIDTH, value as u32); }

	const FSC16_BIT_OFFSET: u8 = 16;
	const FSC16_BIT_WIDTH: u8 = 1;
	/// Filter scale configuration (Width: 1, Offset: 16)
	pub fn get_fsc16() -> u8 { ::read(REGISTER_ADDRESS, FSC16_BIT_OFFSET, FSC16_BIT_WIDTH) as u8 }
	/// Filter scale configuration (Width: 1, Offset: 16)
	pub fn set_fsc16(value: u8) { ::write(REGISTER_ADDRESS, FSC16_BIT_OFFSET, FSC16_BIT_WIDTH, value as u32); }

	const FSC17_BIT_OFFSET: u8 = 17;
	const FSC17_BIT_WIDTH: u8 = 1;
	/// Filter scale configuration (Width: 1, Offset: 17)
	pub fn get_fsc17() -> u8 { ::read(REGISTER_ADDRESS, FSC17_BIT_OFFSET, FSC17_BIT_WIDTH) as u8 }
	/// Filter scale configuration (Width: 1, Offset: 17)
	pub fn set_fsc17(value: u8) { ::write(REGISTER_ADDRESS, FSC17_BIT_OFFSET, FSC17_BIT_WIDTH, value as u32); }

	const FSC18_BIT_OFFSET: u8 = 18;
	const FSC18_BIT_WIDTH: u8 = 1;
	/// Filter scale configuration (Width: 1, Offset: 18)
	pub fn get_fsc18() -> u8 { ::read(REGISTER_ADDRESS, FSC18_BIT_OFFSET, FSC18_BIT_WIDTH) as u8 }
	/// Filter scale configuration (Width: 1, Offset: 18)
	pub fn set_fsc18(value: u8) { ::write(REGISTER_ADDRESS, FSC18_BIT_OFFSET, FSC18_BIT_WIDTH, value as u32); }

	const FSC19_BIT_OFFSET: u8 = 19;
	const FSC19_BIT_WIDTH: u8 = 1;
	/// Filter scale configuration (Width: 1, Offset: 19)
	pub fn get_fsc19() -> u8 { ::read(REGISTER_ADDRESS, FSC19_BIT_OFFSET, FSC19_BIT_WIDTH) as u8 }
	/// Filter scale configuration (Width: 1, Offset: 19)
	pub fn set_fsc19(value: u8) { ::write(REGISTER_ADDRESS, FSC19_BIT_OFFSET, FSC19_BIT_WIDTH, value as u32); }

	const FSC20_BIT_OFFSET: u8 = 20;
	const FSC20_BIT_WIDTH: u8 = 1;
	/// Filter scale configuration (Width: 1, Offset: 20)
	pub fn get_fsc20() -> u8 { ::read(REGISTER_ADDRESS, FSC20_BIT_OFFSET, FSC20_BIT_WIDTH) as u8 }
	/// Filter scale configuration (Width: 1, Offset: 20)
	pub fn set_fsc20(value: u8) { ::write(REGISTER_ADDRESS, FSC20_BIT_OFFSET, FSC20_BIT_WIDTH, value as u32); }

	const FSC21_BIT_OFFSET: u8 = 21;
	const FSC21_BIT_WIDTH: u8 = 1;
	/// Filter scale configuration (Width: 1, Offset: 21)
	pub fn get_fsc21() -> u8 { ::read(REGISTER_ADDRESS, FSC21_BIT_OFFSET, FSC21_BIT_WIDTH) as u8 }
	/// Filter scale configuration (Width: 1, Offset: 21)
	pub fn set_fsc21(value: u8) { ::write(REGISTER_ADDRESS, FSC21_BIT_OFFSET, FSC21_BIT_WIDTH, value as u32); }

	const FSC22_BIT_OFFSET: u8 = 22;
	const FSC22_BIT_WIDTH: u8 = 1;
	/// Filter scale configuration (Width: 1, Offset: 22)
	pub fn get_fsc22() -> u8 { ::read(REGISTER_ADDRESS, FSC22_BIT_OFFSET, FSC22_BIT_WIDTH) as u8 }
	/// Filter scale configuration (Width: 1, Offset: 22)
	pub fn set_fsc22(value: u8) { ::write(REGISTER_ADDRESS, FSC22_BIT_OFFSET, FSC22_BIT_WIDTH, value as u32); }

	const FSC23_BIT_OFFSET: u8 = 23;
	const FSC23_BIT_WIDTH: u8 = 1;
	/// Filter scale configuration (Width: 1, Offset: 23)
	pub fn get_fsc23() -> u8 { ::read(REGISTER_ADDRESS, FSC23_BIT_OFFSET, FSC23_BIT_WIDTH) as u8 }
	/// Filter scale configuration (Width: 1, Offset: 23)
	pub fn set_fsc23(value: u8) { ::write(REGISTER_ADDRESS, FSC23_BIT_OFFSET, FSC23_BIT_WIDTH, value as u32); }

	const FSC24_BIT_OFFSET: u8 = 24;
	const FSC24_BIT_WIDTH: u8 = 1;
	/// Filter scale configuration (Width: 1, Offset: 24)
	pub fn get_fsc24() -> u8 { ::read(REGISTER_ADDRESS, FSC24_BIT_OFFSET, FSC24_BIT_WIDTH) as u8 }
	/// Filter scale configuration (Width: 1, Offset: 24)
	pub fn set_fsc24(value: u8) { ::write(REGISTER_ADDRESS, FSC24_BIT_OFFSET, FSC24_BIT_WIDTH, value as u32); }

	const FSC25_BIT_OFFSET: u8 = 25;
	const FSC25_BIT_WIDTH: u8 = 1;
	/// Filter scale configuration (Width: 1, Offset: 25)
	pub fn get_fsc25() -> u8 { ::read(REGISTER_ADDRESS, FSC25_BIT_OFFSET, FSC25_BIT_WIDTH) as u8 }
	/// Filter scale configuration (Width: 1, Offset: 25)
	pub fn set_fsc25(value: u8) { ::write(REGISTER_ADDRESS, FSC25_BIT_OFFSET, FSC25_BIT_WIDTH, value as u32); }

	const FSC26_BIT_OFFSET: u8 = 26;
	const FSC26_BIT_WIDTH: u8 = 1;
	/// Filter scale configuration (Width: 1, Offset: 26)
	pub fn get_fsc26() -> u8 { ::read(REGISTER_ADDRESS, FSC26_BIT_OFFSET, FSC26_BIT_WIDTH) as u8 }
	/// Filter scale configuration (Width: 1, Offset: 26)
	pub fn set_fsc26(value: u8) { ::write(REGISTER_ADDRESS, FSC26_BIT_OFFSET, FSC26_BIT_WIDTH, value as u32); }

	const FSC27_BIT_OFFSET: u8 = 27;
	const FSC27_BIT_WIDTH: u8 = 1;
	/// Filter scale configuration (Width: 1, Offset: 27)
	pub fn get_fsc27() -> u8 { ::read(REGISTER_ADDRESS, FSC27_BIT_OFFSET, FSC27_BIT_WIDTH) as u8 }
	/// Filter scale configuration (Width: 1, Offset: 27)
	pub fn set_fsc27(value: u8) { ::write(REGISTER_ADDRESS, FSC27_BIT_OFFSET, FSC27_BIT_WIDTH, value as u32); }
}
/// filter FIFO assignment register
/// Size: 0x20 bits
pub mod ffa1r {
	const REGISTER_ADDRESS_OFFSET: u32 = 0x214;
	const REGISTER_ADDRESS: u32 = super::BASE_ADDRESS + REGISTER_ADDRESS_OFFSET;

	const FFA0_BIT_OFFSET: u8 = 0;
	const FFA0_BIT_WIDTH: u8 = 1;
	/// Filter FIFO assignment for filter 0 (Width: 1, Offset: 0)
	pub fn get_ffa0() -> u8 { ::read(REGISTER_ADDRESS, FFA0_BIT_OFFSET, FFA0_BIT_WIDTH) as u8 }
	/// Filter FIFO assignment for filter 0 (Width: 1, Offset: 0)
	pub fn set_ffa0(value: u8) { ::write(REGISTER_ADDRESS, FFA0_BIT_OFFSET, FFA0_BIT_WIDTH, value as u32); }

	const FFA1_BIT_OFFSET: u8 = 1;
	const FFA1_BIT_WIDTH: u8 = 1;
	/// Filter FIFO assignment for filter 1 (Width: 1, Offset: 1)
	pub fn get_ffa1() -> u8 { ::read(REGISTER_ADDRESS, FFA1_BIT_OFFSET, FFA1_BIT_WIDTH) as u8 }
	/// Filter FIFO assignment for filter 1 (Width: 1, Offset: 1)
	pub fn set_ffa1(value: u8) { ::write(REGISTER_ADDRESS, FFA1_BIT_OFFSET, FFA1_BIT_WIDTH, value as u32); }

	const FFA2_BIT_OFFSET: u8 = 2;
	const FFA2_BIT_WIDTH: u8 = 1;
	/// Filter FIFO assignment for filter 2 (Width: 1, Offset: 2)
	pub fn get_ffa2() -> u8 { ::read(REGISTER_ADDRESS, FFA2_BIT_OFFSET, FFA2_BIT_WIDTH) as u8 }
	/// Filter FIFO assignment for filter 2 (Width: 1, Offset: 2)
	pub fn set_ffa2(value: u8) { ::write(REGISTER_ADDRESS, FFA2_BIT_OFFSET, FFA2_BIT_WIDTH, value as u32); }

	const FFA3_BIT_OFFSET: u8 = 3;
	const FFA3_BIT_WIDTH: u8 = 1;
	/// Filter FIFO assignment for filter 3 (Width: 1, Offset: 3)
	pub fn get_ffa3() -> u8 { ::read(REGISTER_ADDRESS, FFA3_BIT_OFFSET, FFA3_BIT_WIDTH) as u8 }
	/// Filter FIFO assignment for filter 3 (Width: 1, Offset: 3)
	pub fn set_ffa3(value: u8) { ::write(REGISTER_ADDRESS, FFA3_BIT_OFFSET, FFA3_BIT_WIDTH, value as u32); }

	const FFA4_BIT_OFFSET: u8 = 4;
	const FFA4_BIT_WIDTH: u8 = 1;
	/// Filter FIFO assignment for filter 4 (Width: 1, Offset: 4)
	pub fn get_ffa4() -> u8 { ::read(REGISTER_ADDRESS, FFA4_BIT_OFFSET, FFA4_BIT_WIDTH) as u8 }
	/// Filter FIFO assignment for filter 4 (Width: 1, Offset: 4)
	pub fn set_ffa4(value: u8) { ::write(REGISTER_ADDRESS, FFA4_BIT_OFFSET, FFA4_BIT_WIDTH, value as u32); }

	const FFA5_BIT_OFFSET: u8 = 5;
	const FFA5_BIT_WIDTH: u8 = 1;
	/// Filter FIFO assignment for filter 5 (Width: 1, Offset: 5)
	pub fn get_ffa5() -> u8 { ::read(REGISTER_ADDRESS, FFA5_BIT_OFFSET, FFA5_BIT_WIDTH) as u8 }
	/// Filter FIFO assignment for filter 5 (Width: 1, Offset: 5)
	pub fn set_ffa5(value: u8) { ::write(REGISTER_ADDRESS, FFA5_BIT_OFFSET, FFA5_BIT_WIDTH, value as u32); }

	const FFA6_BIT_OFFSET: u8 = 6;
	const FFA6_BIT_WIDTH: u8 = 1;
	/// Filter FIFO assignment for filter 6 (Width: 1, Offset: 6)
	pub fn get_ffa6() -> u8 { ::read(REGISTER_ADDRESS, FFA6_BIT_OFFSET, FFA6_BIT_WIDTH) as u8 }
	/// Filter FIFO assignment for filter 6 (Width: 1, Offset: 6)
	pub fn set_ffa6(value: u8) { ::write(REGISTER_ADDRESS, FFA6_BIT_OFFSET, FFA6_BIT_WIDTH, value as u32); }

	const FFA7_BIT_OFFSET: u8 = 7;
	const FFA7_BIT_WIDTH: u8 = 1;
	/// Filter FIFO assignment for filter 7 (Width: 1, Offset: 7)
	pub fn get_ffa7() -> u8 { ::read(REGISTER_ADDRESS, FFA7_BIT_OFFSET, FFA7_BIT_WIDTH) as u8 }
	/// Filter FIFO assignment for filter 7 (Width: 1, Offset: 7)
	pub fn set_ffa7(value: u8) { ::write(REGISTER_ADDRESS, FFA7_BIT_OFFSET, FFA7_BIT_WIDTH, value as u32); }

	const FFA8_BIT_OFFSET: u8 = 8;
	const FFA8_BIT_WIDTH: u8 = 1;
	/// Filter FIFO assignment for filter 8 (Width: 1, Offset: 8)
	pub fn get_ffa8() -> u8 { ::read(REGISTER_ADDRESS, FFA8_BIT_OFFSET, FFA8_BIT_WIDTH) as u8 }
	/// Filter FIFO assignment for filter 8 (Width: 1, Offset: 8)
	pub fn set_ffa8(value: u8) { ::write(REGISTER_ADDRESS, FFA8_BIT_OFFSET, FFA8_BIT_WIDTH, value as u32); }

	const FFA9_BIT_OFFSET: u8 = 9;
	const FFA9_BIT_WIDTH: u8 = 1;
	/// Filter FIFO assignment for filter 9 (Width: 1, Offset: 9)
	pub fn get_ffa9() -> u8 { ::read(REGISTER_ADDRESS, FFA9_BIT_OFFSET, FFA9_BIT_WIDTH) as u8 }
	/// Filter FIFO assignment for filter 9 (Width: 1, Offset: 9)
	pub fn set_ffa9(value: u8) { ::write(REGISTER_ADDRESS, FFA9_BIT_OFFSET, FFA9_BIT_WIDTH, value as u32); }

	const FFA10_BIT_OFFSET: u8 = 10;
	const FFA10_BIT_WIDTH: u8 = 1;
	/// Filter FIFO assignment for filter 10 (Width: 1, Offset: 10)
	pub fn get_ffa10() -> u8 { ::read(REGISTER_ADDRESS, FFA10_BIT_OFFSET, FFA10_BIT_WIDTH) as u8 }
	/// Filter FIFO assignment for filter 10 (Width: 1, Offset: 10)
	pub fn set_ffa10(value: u8) { ::write(REGISTER_ADDRESS, FFA10_BIT_OFFSET, FFA10_BIT_WIDTH, value as u32); }

	const FFA11_BIT_OFFSET: u8 = 11;
	const FFA11_BIT_WIDTH: u8 = 1;
	/// Filter FIFO assignment for filter 11 (Width: 1, Offset: 11)
	pub fn get_ffa11() -> u8 { ::read(REGISTER_ADDRESS, FFA11_BIT_OFFSET, FFA11_BIT_WIDTH) as u8 }
	/// Filter FIFO assignment for filter 11 (Width: 1, Offset: 11)
	pub fn set_ffa11(value: u8) { ::write(REGISTER_ADDRESS, FFA11_BIT_OFFSET, FFA11_BIT_WIDTH, value as u32); }

	const FFA12_BIT_OFFSET: u8 = 12;
	const FFA12_BIT_WIDTH: u8 = 1;
	/// Filter FIFO assignment for filter 12 (Width: 1, Offset: 12)
	pub fn get_ffa12() -> u8 { ::read(REGISTER_ADDRESS, FFA12_BIT_OFFSET, FFA12_BIT_WIDTH) as u8 }
	/// Filter FIFO assignment for filter 12 (Width: 1, Offset: 12)
	pub fn set_ffa12(value: u8) { ::write(REGISTER_ADDRESS, FFA12_BIT_OFFSET, FFA12_BIT_WIDTH, value as u32); }

	const FFA13_BIT_OFFSET: u8 = 13;
	const FFA13_BIT_WIDTH: u8 = 1;
	/// Filter FIFO assignment for filter 13 (Width: 1, Offset: 13)
	pub fn get_ffa13() -> u8 { ::read(REGISTER_ADDRESS, FFA13_BIT_OFFSET, FFA13_BIT_WIDTH) as u8 }
	/// Filter FIFO assignment for filter 13 (Width: 1, Offset: 13)
	pub fn set_ffa13(value: u8) { ::write(REGISTER_ADDRESS, FFA13_BIT_OFFSET, FFA13_BIT_WIDTH, value as u32); }

	const FFA14_BIT_OFFSET: u8 = 14;
	const FFA14_BIT_WIDTH: u8 = 1;
	/// Filter FIFO assignment for filter 14 (Width: 1, Offset: 14)
	pub fn get_ffa14() -> u8 { ::read(REGISTER_ADDRESS, FFA14_BIT_OFFSET, FFA14_BIT_WIDTH) as u8 }
	/// Filter FIFO assignment for filter 14 (Width: 1, Offset: 14)
	pub fn set_ffa14(value: u8) { ::write(REGISTER_ADDRESS, FFA14_BIT_OFFSET, FFA14_BIT_WIDTH, value as u32); }

	const FFA15_BIT_OFFSET: u8 = 15;
	const FFA15_BIT_WIDTH: u8 = 1;
	/// Filter FIFO assignment for filter 15 (Width: 1, Offset: 15)
	pub fn get_ffa15() -> u8 { ::read(REGISTER_ADDRESS, FFA15_BIT_OFFSET, FFA15_BIT_WIDTH) as u8 }
	/// Filter FIFO assignment for filter 15 (Width: 1, Offset: 15)
	pub fn set_ffa15(value: u8) { ::write(REGISTER_ADDRESS, FFA15_BIT_OFFSET, FFA15_BIT_WIDTH, value as u32); }

	const FFA16_BIT_OFFSET: u8 = 16;
	const FFA16_BIT_WIDTH: u8 = 1;
	/// Filter FIFO assignment for filter 16 (Width: 1, Offset: 16)
	pub fn get_ffa16() -> u8 { ::read(REGISTER_ADDRESS, FFA16_BIT_OFFSET, FFA16_BIT_WIDTH) as u8 }
	/// Filter FIFO assignment for filter 16 (Width: 1, Offset: 16)
	pub fn set_ffa16(value: u8) { ::write(REGISTER_ADDRESS, FFA16_BIT_OFFSET, FFA16_BIT_WIDTH, value as u32); }

	const FFA17_BIT_OFFSET: u8 = 17;
	const FFA17_BIT_WIDTH: u8 = 1;
	/// Filter FIFO assignment for filter 17 (Width: 1, Offset: 17)
	pub fn get_ffa17() -> u8 { ::read(REGISTER_ADDRESS, FFA17_BIT_OFFSET, FFA17_BIT_WIDTH) as u8 }
	/// Filter FIFO assignment for filter 17 (Width: 1, Offset: 17)
	pub fn set_ffa17(value: u8) { ::write(REGISTER_ADDRESS, FFA17_BIT_OFFSET, FFA17_BIT_WIDTH, value as u32); }

	const FFA18_BIT_OFFSET: u8 = 18;
	const FFA18_BIT_WIDTH: u8 = 1;
	/// Filter FIFO assignment for filter 18 (Width: 1, Offset: 18)
	pub fn get_ffa18() -> u8 { ::read(REGISTER_ADDRESS, FFA18_BIT_OFFSET, FFA18_BIT_WIDTH) as u8 }
	/// Filter FIFO assignment for filter 18 (Width: 1, Offset: 18)
	pub fn set_ffa18(value: u8) { ::write(REGISTER_ADDRESS, FFA18_BIT_OFFSET, FFA18_BIT_WIDTH, value as u32); }

	const FFA19_BIT_OFFSET: u8 = 19;
	const FFA19_BIT_WIDTH: u8 = 1;
	/// Filter FIFO assignment for filter 19 (Width: 1, Offset: 19)
	pub fn get_ffa19() -> u8 { ::read(REGISTER_ADDRESS, FFA19_BIT_OFFSET, FFA19_BIT_WIDTH) as u8 }
	/// Filter FIFO assignment for filter 19 (Width: 1, Offset: 19)
	pub fn set_ffa19(value: u8) { ::write(REGISTER_ADDRESS, FFA19_BIT_OFFSET, FFA19_BIT_WIDTH, value as u32); }

	const FFA20_BIT_OFFSET: u8 = 20;
	const FFA20_BIT_WIDTH: u8 = 1;
	/// Filter FIFO assignment for filter 20 (Width: 1, Offset: 20)
	pub fn get_ffa20() -> u8 { ::read(REGISTER_ADDRESS, FFA20_BIT_OFFSET, FFA20_BIT_WIDTH) as u8 }
	/// Filter FIFO assignment for filter 20 (Width: 1, Offset: 20)
	pub fn set_ffa20(value: u8) { ::write(REGISTER_ADDRESS, FFA20_BIT_OFFSET, FFA20_BIT_WIDTH, value as u32); }

	const FFA21_BIT_OFFSET: u8 = 21;
	const FFA21_BIT_WIDTH: u8 = 1;
	/// Filter FIFO assignment for filter 21 (Width: 1, Offset: 21)
	pub fn get_ffa21() -> u8 { ::read(REGISTER_ADDRESS, FFA21_BIT_OFFSET, FFA21_BIT_WIDTH) as u8 }
	/// Filter FIFO assignment for filter 21 (Width: 1, Offset: 21)
	pub fn set_ffa21(value: u8) { ::write(REGISTER_ADDRESS, FFA21_BIT_OFFSET, FFA21_BIT_WIDTH, value as u32); }

	const FFA22_BIT_OFFSET: u8 = 22;
	const FFA22_BIT_WIDTH: u8 = 1;
	/// Filter FIFO assignment for filter 22 (Width: 1, Offset: 22)
	pub fn get_ffa22() -> u8 { ::read(REGISTER_ADDRESS, FFA22_BIT_OFFSET, FFA22_BIT_WIDTH) as u8 }
	/// Filter FIFO assignment for filter 22 (Width: 1, Offset: 22)
	pub fn set_ffa22(value: u8) { ::write(REGISTER_ADDRESS, FFA22_BIT_OFFSET, FFA22_BIT_WIDTH, value as u32); }

	const FFA23_BIT_OFFSET: u8 = 23;
	const FFA23_BIT_WIDTH: u8 = 1;
	/// Filter FIFO assignment for filter 23 (Width: 1, Offset: 23)
	pub fn get_ffa23() -> u8 { ::read(REGISTER_ADDRESS, FFA23_BIT_OFFSET, FFA23_BIT_WIDTH) as u8 }
	/// Filter FIFO assignment for filter 23 (Width: 1, Offset: 23)
	pub fn set_ffa23(value: u8) { ::write(REGISTER_ADDRESS, FFA23_BIT_OFFSET, FFA23_BIT_WIDTH, value as u32); }

	const FFA24_BIT_OFFSET: u8 = 24;
	const FFA24_BIT_WIDTH: u8 = 1;
	/// Filter FIFO assignment for filter 24 (Width: 1, Offset: 24)
	pub fn get_ffa24() -> u8 { ::read(REGISTER_ADDRESS, FFA24_BIT_OFFSET, FFA24_BIT_WIDTH) as u8 }
	/// Filter FIFO assignment for filter 24 (Width: 1, Offset: 24)
	pub fn set_ffa24(value: u8) { ::write(REGISTER_ADDRESS, FFA24_BIT_OFFSET, FFA24_BIT_WIDTH, value as u32); }

	const FFA25_BIT_OFFSET: u8 = 25;
	const FFA25_BIT_WIDTH: u8 = 1;
	/// Filter FIFO assignment for filter 25 (Width: 1, Offset: 25)
	pub fn get_ffa25() -> u8 { ::read(REGISTER_ADDRESS, FFA25_BIT_OFFSET, FFA25_BIT_WIDTH) as u8 }
	/// Filter FIFO assignment for filter 25 (Width: 1, Offset: 25)
	pub fn set_ffa25(value: u8) { ::write(REGISTER_ADDRESS, FFA25_BIT_OFFSET, FFA25_BIT_WIDTH, value as u32); }

	const FFA26_BIT_OFFSET: u8 = 26;
	const FFA26_BIT_WIDTH: u8 = 1;
	/// Filter FIFO assignment for filter 26 (Width: 1, Offset: 26)
	pub fn get_ffa26() -> u8 { ::read(REGISTER_ADDRESS, FFA26_BIT_OFFSET, FFA26_BIT_WIDTH) as u8 }
	/// Filter FIFO assignment for filter 26 (Width: 1, Offset: 26)
	pub fn set_ffa26(value: u8) { ::write(REGISTER_ADDRESS, FFA26_BIT_OFFSET, FFA26_BIT_WIDTH, value as u32); }

	const FFA27_BIT_OFFSET: u8 = 27;
	const FFA27_BIT_WIDTH: u8 = 1;
	/// Filter FIFO assignment for filter 27 (Width: 1, Offset: 27)
	pub fn get_ffa27() -> u8 { ::read(REGISTER_ADDRESS, FFA27_BIT_OFFSET, FFA27_BIT_WIDTH) as u8 }
	/// Filter FIFO assignment for filter 27 (Width: 1, Offset: 27)
	pub fn set_ffa27(value: u8) { ::write(REGISTER_ADDRESS, FFA27_BIT_OFFSET, FFA27_BIT_WIDTH, value as u32); }
}
/// CAN filter activation register
/// Size: 0x20 bits
pub mod fa1r {
	const REGISTER_ADDRESS_OFFSET: u32 = 0x21C;
	const REGISTER_ADDRESS: u32 = super::BASE_ADDRESS + REGISTER_ADDRESS_OFFSET;

	const FACT0_BIT_OFFSET: u8 = 0;
	const FACT0_BIT_WIDTH: u8 = 1;
	/// Filter active (Width: 1, Offset: 0)
	pub fn get_fact0() -> u8 { ::read(REGISTER_ADDRESS, FACT0_BIT_OFFSET, FACT0_BIT_WIDTH) as u8 }
	/// Filter active (Width: 1, Offset: 0)
	pub fn set_fact0(value: u8) { ::write(REGISTER_ADDRESS, FACT0_BIT_OFFSET, FACT0_BIT_WIDTH, value as u32); }

	const FACT1_BIT_OFFSET: u8 = 1;
	const FACT1_BIT_WIDTH: u8 = 1;
	/// Filter active (Width: 1, Offset: 1)
	pub fn get_fact1() -> u8 { ::read(REGISTER_ADDRESS, FACT1_BIT_OFFSET, FACT1_BIT_WIDTH) as u8 }
	/// Filter active (Width: 1, Offset: 1)
	pub fn set_fact1(value: u8) { ::write(REGISTER_ADDRESS, FACT1_BIT_OFFSET, FACT1_BIT_WIDTH, value as u32); }

	const FACT2_BIT_OFFSET: u8 = 2;
	const FACT2_BIT_WIDTH: u8 = 1;
	/// Filter active (Width: 1, Offset: 2)
	pub fn get_fact2() -> u8 { ::read(REGISTER_ADDRESS, FACT2_BIT_OFFSET, FACT2_BIT_WIDTH) as u8 }
	/// Filter active (Width: 1, Offset: 2)
	pub fn set_fact2(value: u8) { ::write(REGISTER_ADDRESS, FACT2_BIT_OFFSET, FACT2_BIT_WIDTH, value as u32); }

	const FACT3_BIT_OFFSET: u8 = 3;
	const FACT3_BIT_WIDTH: u8 = 1;
	/// Filter active (Width: 1, Offset: 3)
	pub fn get_fact3() -> u8 { ::read(REGISTER_ADDRESS, FACT3_BIT_OFFSET, FACT3_BIT_WIDTH) as u8 }
	/// Filter active (Width: 1, Offset: 3)
	pub fn set_fact3(value: u8) { ::write(REGISTER_ADDRESS, FACT3_BIT_OFFSET, FACT3_BIT_WIDTH, value as u32); }

	const FACT4_BIT_OFFSET: u8 = 4;
	const FACT4_BIT_WIDTH: u8 = 1;
	/// Filter active (Width: 1, Offset: 4)
	pub fn get_fact4() -> u8 { ::read(REGISTER_ADDRESS, FACT4_BIT_OFFSET, FACT4_BIT_WIDTH) as u8 }
	/// Filter active (Width: 1, Offset: 4)
	pub fn set_fact4(value: u8) { ::write(REGISTER_ADDRESS, FACT4_BIT_OFFSET, FACT4_BIT_WIDTH, value as u32); }

	const FACT5_BIT_OFFSET: u8 = 5;
	const FACT5_BIT_WIDTH: u8 = 1;
	/// Filter active (Width: 1, Offset: 5)
	pub fn get_fact5() -> u8 { ::read(REGISTER_ADDRESS, FACT5_BIT_OFFSET, FACT5_BIT_WIDTH) as u8 }
	/// Filter active (Width: 1, Offset: 5)
	pub fn set_fact5(value: u8) { ::write(REGISTER_ADDRESS, FACT5_BIT_OFFSET, FACT5_BIT_WIDTH, value as u32); }

	const FACT6_BIT_OFFSET: u8 = 6;
	const FACT6_BIT_WIDTH: u8 = 1;
	/// Filter active (Width: 1, Offset: 6)
	pub fn get_fact6() -> u8 { ::read(REGISTER_ADDRESS, FACT6_BIT_OFFSET, FACT6_BIT_WIDTH) as u8 }
	/// Filter active (Width: 1, Offset: 6)
	pub fn set_fact6(value: u8) { ::write(REGISTER_ADDRESS, FACT6_BIT_OFFSET, FACT6_BIT_WIDTH, value as u32); }

	const FACT7_BIT_OFFSET: u8 = 7;
	const FACT7_BIT_WIDTH: u8 = 1;
	/// Filter active (Width: 1, Offset: 7)
	pub fn get_fact7() -> u8 { ::read(REGISTER_ADDRESS, FACT7_BIT_OFFSET, FACT7_BIT_WIDTH) as u8 }
	/// Filter active (Width: 1, Offset: 7)
	pub fn set_fact7(value: u8) { ::write(REGISTER_ADDRESS, FACT7_BIT_OFFSET, FACT7_BIT_WIDTH, value as u32); }

	const FACT8_BIT_OFFSET: u8 = 8;
	const FACT8_BIT_WIDTH: u8 = 1;
	/// Filter active (Width: 1, Offset: 8)
	pub fn get_fact8() -> u8 { ::read(REGISTER_ADDRESS, FACT8_BIT_OFFSET, FACT8_BIT_WIDTH) as u8 }
	/// Filter active (Width: 1, Offset: 8)
	pub fn set_fact8(value: u8) { ::write(REGISTER_ADDRESS, FACT8_BIT_OFFSET, FACT8_BIT_WIDTH, value as u32); }

	const FACT9_BIT_OFFSET: u8 = 9;
	const FACT9_BIT_WIDTH: u8 = 1;
	/// Filter active (Width: 1, Offset: 9)
	pub fn get_fact9() -> u8 { ::read(REGISTER_ADDRESS, FACT9_BIT_OFFSET, FACT9_BIT_WIDTH) as u8 }
	/// Filter active (Width: 1, Offset: 9)
	pub fn set_fact9(value: u8) { ::write(REGISTER_ADDRESS, FACT9_BIT_OFFSET, FACT9_BIT_WIDTH, value as u32); }

	const FACT10_BIT_OFFSET: u8 = 10;
	const FACT10_BIT_WIDTH: u8 = 1;
	/// Filter active (Width: 1, Offset: 10)
	pub fn get_fact10() -> u8 { ::read(REGISTER_ADDRESS, FACT10_BIT_OFFSET, FACT10_BIT_WIDTH) as u8 }
	/// Filter active (Width: 1, Offset: 10)
	pub fn set_fact10(value: u8) { ::write(REGISTER_ADDRESS, FACT10_BIT_OFFSET, FACT10_BIT_WIDTH, value as u32); }

	const FACT11_BIT_OFFSET: u8 = 11;
	const FACT11_BIT_WIDTH: u8 = 1;
	/// Filter active (Width: 1, Offset: 11)
	pub fn get_fact11() -> u8 { ::read(REGISTER_ADDRESS, FACT11_BIT_OFFSET, FACT11_BIT_WIDTH) as u8 }
	/// Filter active (Width: 1, Offset: 11)
	pub fn set_fact11(value: u8) { ::write(REGISTER_ADDRESS, FACT11_BIT_OFFSET, FACT11_BIT_WIDTH, value as u32); }

	const FACT12_BIT_OFFSET: u8 = 12;
	const FACT12_BIT_WIDTH: u8 = 1;
	/// Filter active (Width: 1, Offset: 12)
	pub fn get_fact12() -> u8 { ::read(REGISTER_ADDRESS, FACT12_BIT_OFFSET, FACT12_BIT_WIDTH) as u8 }
	/// Filter active (Width: 1, Offset: 12)
	pub fn set_fact12(value: u8) { ::write(REGISTER_ADDRESS, FACT12_BIT_OFFSET, FACT12_BIT_WIDTH, value as u32); }

	const FACT13_BIT_OFFSET: u8 = 13;
	const FACT13_BIT_WIDTH: u8 = 1;
	/// Filter active (Width: 1, Offset: 13)
	pub fn get_fact13() -> u8 { ::read(REGISTER_ADDRESS, FACT13_BIT_OFFSET, FACT13_BIT_WIDTH) as u8 }
	/// Filter active (Width: 1, Offset: 13)
	pub fn set_fact13(value: u8) { ::write(REGISTER_ADDRESS, FACT13_BIT_OFFSET, FACT13_BIT_WIDTH, value as u32); }

	const FACT14_BIT_OFFSET: u8 = 14;
	const FACT14_BIT_WIDTH: u8 = 1;
	/// Filter active (Width: 1, Offset: 14)
	pub fn get_fact14() -> u8 { ::read(REGISTER_ADDRESS, FACT14_BIT_OFFSET, FACT14_BIT_WIDTH) as u8 }
	/// Filter active (Width: 1, Offset: 14)
	pub fn set_fact14(value: u8) { ::write(REGISTER_ADDRESS, FACT14_BIT_OFFSET, FACT14_BIT_WIDTH, value as u32); }

	const FACT15_BIT_OFFSET: u8 = 15;
	const FACT15_BIT_WIDTH: u8 = 1;
	/// Filter active (Width: 1, Offset: 15)
	pub fn get_fact15() -> u8 { ::read(REGISTER_ADDRESS, FACT15_BIT_OFFSET, FACT15_BIT_WIDTH) as u8 }
	/// Filter active (Width: 1, Offset: 15)
	pub fn set_fact15(value: u8) { ::write(REGISTER_ADDRESS, FACT15_BIT_OFFSET, FACT15_BIT_WIDTH, value as u32); }

	const FACT16_BIT_OFFSET: u8 = 16;
	const FACT16_BIT_WIDTH: u8 = 1;
	/// Filter active (Width: 1, Offset: 16)
	pub fn get_fact16() -> u8 { ::read(REGISTER_ADDRESS, FACT16_BIT_OFFSET, FACT16_BIT_WIDTH) as u8 }
	/// Filter active (Width: 1, Offset: 16)
	pub fn set_fact16(value: u8) { ::write(REGISTER_ADDRESS, FACT16_BIT_OFFSET, FACT16_BIT_WIDTH, value as u32); }

	const FACT17_BIT_OFFSET: u8 = 17;
	const FACT17_BIT_WIDTH: u8 = 1;
	/// Filter active (Width: 1, Offset: 17)
	pub fn get_fact17() -> u8 { ::read(REGISTER_ADDRESS, FACT17_BIT_OFFSET, FACT17_BIT_WIDTH) as u8 }
	/// Filter active (Width: 1, Offset: 17)
	pub fn set_fact17(value: u8) { ::write(REGISTER_ADDRESS, FACT17_BIT_OFFSET, FACT17_BIT_WIDTH, value as u32); }

	const FACT18_BIT_OFFSET: u8 = 18;
	const FACT18_BIT_WIDTH: u8 = 1;
	/// Filter active (Width: 1, Offset: 18)
	pub fn get_fact18() -> u8 { ::read(REGISTER_ADDRESS, FACT18_BIT_OFFSET, FACT18_BIT_WIDTH) as u8 }
	/// Filter active (Width: 1, Offset: 18)
	pub fn set_fact18(value: u8) { ::write(REGISTER_ADDRESS, FACT18_BIT_OFFSET, FACT18_BIT_WIDTH, value as u32); }

	const FACT19_BIT_OFFSET: u8 = 19;
	const FACT19_BIT_WIDTH: u8 = 1;
	/// Filter active (Width: 1, Offset: 19)
	pub fn get_fact19() -> u8 { ::read(REGISTER_ADDRESS, FACT19_BIT_OFFSET, FACT19_BIT_WIDTH) as u8 }
	/// Filter active (Width: 1, Offset: 19)
	pub fn set_fact19(value: u8) { ::write(REGISTER_ADDRESS, FACT19_BIT_OFFSET, FACT19_BIT_WIDTH, value as u32); }

	const FACT20_BIT_OFFSET: u8 = 20;
	const FACT20_BIT_WIDTH: u8 = 1;
	/// Filter active (Width: 1, Offset: 20)
	pub fn get_fact20() -> u8 { ::read(REGISTER_ADDRESS, FACT20_BIT_OFFSET, FACT20_BIT_WIDTH) as u8 }
	/// Filter active (Width: 1, Offset: 20)
	pub fn set_fact20(value: u8) { ::write(REGISTER_ADDRESS, FACT20_BIT_OFFSET, FACT20_BIT_WIDTH, value as u32); }

	const FACT21_BIT_OFFSET: u8 = 21;
	const FACT21_BIT_WIDTH: u8 = 1;
	/// Filter active (Width: 1, Offset: 21)
	pub fn get_fact21() -> u8 { ::read(REGISTER_ADDRESS, FACT21_BIT_OFFSET, FACT21_BIT_WIDTH) as u8 }
	/// Filter active (Width: 1, Offset: 21)
	pub fn set_fact21(value: u8) { ::write(REGISTER_ADDRESS, FACT21_BIT_OFFSET, FACT21_BIT_WIDTH, value as u32); }

	const FACT22_BIT_OFFSET: u8 = 22;
	const FACT22_BIT_WIDTH: u8 = 1;
	/// Filter active (Width: 1, Offset: 22)
	pub fn get_fact22() -> u8 { ::read(REGISTER_ADDRESS, FACT22_BIT_OFFSET, FACT22_BIT_WIDTH) as u8 }
	/// Filter active (Width: 1, Offset: 22)
	pub fn set_fact22(value: u8) { ::write(REGISTER_ADDRESS, FACT22_BIT_OFFSET, FACT22_BIT_WIDTH, value as u32); }

	const FACT23_BIT_OFFSET: u8 = 23;
	const FACT23_BIT_WIDTH: u8 = 1;
	/// Filter active (Width: 1, Offset: 23)
	pub fn get_fact23() -> u8 { ::read(REGISTER_ADDRESS, FACT23_BIT_OFFSET, FACT23_BIT_WIDTH) as u8 }
	/// Filter active (Width: 1, Offset: 23)
	pub fn set_fact23(value: u8) { ::write(REGISTER_ADDRESS, FACT23_BIT_OFFSET, FACT23_BIT_WIDTH, value as u32); }

	const FACT24_BIT_OFFSET: u8 = 24;
	const FACT24_BIT_WIDTH: u8 = 1;
	/// Filter active (Width: 1, Offset: 24)
	pub fn get_fact24() -> u8 { ::read(REGISTER_ADDRESS, FACT24_BIT_OFFSET, FACT24_BIT_WIDTH) as u8 }
	/// Filter active (Width: 1, Offset: 24)
	pub fn set_fact24(value: u8) { ::write(REGISTER_ADDRESS, FACT24_BIT_OFFSET, FACT24_BIT_WIDTH, value as u32); }

	const FACT25_BIT_OFFSET: u8 = 25;
	const FACT25_BIT_WIDTH: u8 = 1;
	/// Filter active (Width: 1, Offset: 25)
	pub fn get_fact25() -> u8 { ::read(REGISTER_ADDRESS, FACT25_BIT_OFFSET, FACT25_BIT_WIDTH) as u8 }
	/// Filter active (Width: 1, Offset: 25)
	pub fn set_fact25(value: u8) { ::write(REGISTER_ADDRESS, FACT25_BIT_OFFSET, FACT25_BIT_WIDTH, value as u32); }

	const FACT26_BIT_OFFSET: u8 = 26;
	const FACT26_BIT_WIDTH: u8 = 1;
	/// Filter active (Width: 1, Offset: 26)
	pub fn get_fact26() -> u8 { ::read(REGISTER_ADDRESS, FACT26_BIT_OFFSET, FACT26_BIT_WIDTH) as u8 }
	/// Filter active (Width: 1, Offset: 26)
	pub fn set_fact26(value: u8) { ::write(REGISTER_ADDRESS, FACT26_BIT_OFFSET, FACT26_BIT_WIDTH, value as u32); }

	const FACT27_BIT_OFFSET: u8 = 27;
	const FACT27_BIT_WIDTH: u8 = 1;
	/// Filter active (Width: 1, Offset: 27)
	pub fn get_fact27() -> u8 { ::read(REGISTER_ADDRESS, FACT27_BIT_OFFSET, FACT27_BIT_WIDTH) as u8 }
	/// Filter active (Width: 1, Offset: 27)
	pub fn set_fact27(value: u8) { ::write(REGISTER_ADDRESS, FACT27_BIT_OFFSET, FACT27_BIT_WIDTH, value as u32); }
}
/// Filter bank 0 register 1
/// Size: 0x20 bits
pub mod f0r1 {
	const REGISTER_ADDRESS_OFFSET: u32 = 0x240;
	const REGISTER_ADDRESS: u32 = super::BASE_ADDRESS + REGISTER_ADDRESS_OFFSET;

	const FB0_BIT_OFFSET: u8 = 0;
	const FB0_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 0)
	pub fn get_fb0() -> u8 { ::read(REGISTER_ADDRESS, FB0_BIT_OFFSET, FB0_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 0)
	pub fn set_fb0(value: u8) { ::write(REGISTER_ADDRESS, FB0_BIT_OFFSET, FB0_BIT_WIDTH, value as u32); }

	const FB1_BIT_OFFSET: u8 = 1;
	const FB1_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 1)
	pub fn get_fb1() -> u8 { ::read(REGISTER_ADDRESS, FB1_BIT_OFFSET, FB1_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 1)
	pub fn set_fb1(value: u8) { ::write(REGISTER_ADDRESS, FB1_BIT_OFFSET, FB1_BIT_WIDTH, value as u32); }

	const FB2_BIT_OFFSET: u8 = 2;
	const FB2_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 2)
	pub fn get_fb2() -> u8 { ::read(REGISTER_ADDRESS, FB2_BIT_OFFSET, FB2_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 2)
	pub fn set_fb2(value: u8) { ::write(REGISTER_ADDRESS, FB2_BIT_OFFSET, FB2_BIT_WIDTH, value as u32); }

	const FB3_BIT_OFFSET: u8 = 3;
	const FB3_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 3)
	pub fn get_fb3() -> u8 { ::read(REGISTER_ADDRESS, FB3_BIT_OFFSET, FB3_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 3)
	pub fn set_fb3(value: u8) { ::write(REGISTER_ADDRESS, FB3_BIT_OFFSET, FB3_BIT_WIDTH, value as u32); }

	const FB4_BIT_OFFSET: u8 = 4;
	const FB4_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 4)
	pub fn get_fb4() -> u8 { ::read(REGISTER_ADDRESS, FB4_BIT_OFFSET, FB4_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 4)
	pub fn set_fb4(value: u8) { ::write(REGISTER_ADDRESS, FB4_BIT_OFFSET, FB4_BIT_WIDTH, value as u32); }

	const FB5_BIT_OFFSET: u8 = 5;
	const FB5_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 5)
	pub fn get_fb5() -> u8 { ::read(REGISTER_ADDRESS, FB5_BIT_OFFSET, FB5_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 5)
	pub fn set_fb5(value: u8) { ::write(REGISTER_ADDRESS, FB5_BIT_OFFSET, FB5_BIT_WIDTH, value as u32); }

	const FB6_BIT_OFFSET: u8 = 6;
	const FB6_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 6)
	pub fn get_fb6() -> u8 { ::read(REGISTER_ADDRESS, FB6_BIT_OFFSET, FB6_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 6)
	pub fn set_fb6(value: u8) { ::write(REGISTER_ADDRESS, FB6_BIT_OFFSET, FB6_BIT_WIDTH, value as u32); }

	const FB7_BIT_OFFSET: u8 = 7;
	const FB7_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 7)
	pub fn get_fb7() -> u8 { ::read(REGISTER_ADDRESS, FB7_BIT_OFFSET, FB7_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 7)
	pub fn set_fb7(value: u8) { ::write(REGISTER_ADDRESS, FB7_BIT_OFFSET, FB7_BIT_WIDTH, value as u32); }

	const FB8_BIT_OFFSET: u8 = 8;
	const FB8_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 8)
	pub fn get_fb8() -> u8 { ::read(REGISTER_ADDRESS, FB8_BIT_OFFSET, FB8_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 8)
	pub fn set_fb8(value: u8) { ::write(REGISTER_ADDRESS, FB8_BIT_OFFSET, FB8_BIT_WIDTH, value as u32); }

	const FB9_BIT_OFFSET: u8 = 9;
	const FB9_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 9)
	pub fn get_fb9() -> u8 { ::read(REGISTER_ADDRESS, FB9_BIT_OFFSET, FB9_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 9)
	pub fn set_fb9(value: u8) { ::write(REGISTER_ADDRESS, FB9_BIT_OFFSET, FB9_BIT_WIDTH, value as u32); }

	const FB10_BIT_OFFSET: u8 = 10;
	const FB10_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 10)
	pub fn get_fb10() -> u8 { ::read(REGISTER_ADDRESS, FB10_BIT_OFFSET, FB10_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 10)
	pub fn set_fb10(value: u8) { ::write(REGISTER_ADDRESS, FB10_BIT_OFFSET, FB10_BIT_WIDTH, value as u32); }

	const FB11_BIT_OFFSET: u8 = 11;
	const FB11_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 11)
	pub fn get_fb11() -> u8 { ::read(REGISTER_ADDRESS, FB11_BIT_OFFSET, FB11_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 11)
	pub fn set_fb11(value: u8) { ::write(REGISTER_ADDRESS, FB11_BIT_OFFSET, FB11_BIT_WIDTH, value as u32); }

	const FB12_BIT_OFFSET: u8 = 12;
	const FB12_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 12)
	pub fn get_fb12() -> u8 { ::read(REGISTER_ADDRESS, FB12_BIT_OFFSET, FB12_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 12)
	pub fn set_fb12(value: u8) { ::write(REGISTER_ADDRESS, FB12_BIT_OFFSET, FB12_BIT_WIDTH, value as u32); }

	const FB13_BIT_OFFSET: u8 = 13;
	const FB13_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 13)
	pub fn get_fb13() -> u8 { ::read(REGISTER_ADDRESS, FB13_BIT_OFFSET, FB13_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 13)
	pub fn set_fb13(value: u8) { ::write(REGISTER_ADDRESS, FB13_BIT_OFFSET, FB13_BIT_WIDTH, value as u32); }

	const FB14_BIT_OFFSET: u8 = 14;
	const FB14_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 14)
	pub fn get_fb14() -> u8 { ::read(REGISTER_ADDRESS, FB14_BIT_OFFSET, FB14_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 14)
	pub fn set_fb14(value: u8) { ::write(REGISTER_ADDRESS, FB14_BIT_OFFSET, FB14_BIT_WIDTH, value as u32); }

	const FB15_BIT_OFFSET: u8 = 15;
	const FB15_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 15)
	pub fn get_fb15() -> u8 { ::read(REGISTER_ADDRESS, FB15_BIT_OFFSET, FB15_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 15)
	pub fn set_fb15(value: u8) { ::write(REGISTER_ADDRESS, FB15_BIT_OFFSET, FB15_BIT_WIDTH, value as u32); }

	const FB16_BIT_OFFSET: u8 = 16;
	const FB16_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 16)
	pub fn get_fb16() -> u8 { ::read(REGISTER_ADDRESS, FB16_BIT_OFFSET, FB16_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 16)
	pub fn set_fb16(value: u8) { ::write(REGISTER_ADDRESS, FB16_BIT_OFFSET, FB16_BIT_WIDTH, value as u32); }

	const FB17_BIT_OFFSET: u8 = 17;
	const FB17_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 17)
	pub fn get_fb17() -> u8 { ::read(REGISTER_ADDRESS, FB17_BIT_OFFSET, FB17_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 17)
	pub fn set_fb17(value: u8) { ::write(REGISTER_ADDRESS, FB17_BIT_OFFSET, FB17_BIT_WIDTH, value as u32); }

	const FB18_BIT_OFFSET: u8 = 18;
	const FB18_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 18)
	pub fn get_fb18() -> u8 { ::read(REGISTER_ADDRESS, FB18_BIT_OFFSET, FB18_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 18)
	pub fn set_fb18(value: u8) { ::write(REGISTER_ADDRESS, FB18_BIT_OFFSET, FB18_BIT_WIDTH, value as u32); }

	const FB19_BIT_OFFSET: u8 = 19;
	const FB19_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 19)
	pub fn get_fb19() -> u8 { ::read(REGISTER_ADDRESS, FB19_BIT_OFFSET, FB19_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 19)
	pub fn set_fb19(value: u8) { ::write(REGISTER_ADDRESS, FB19_BIT_OFFSET, FB19_BIT_WIDTH, value as u32); }

	const FB20_BIT_OFFSET: u8 = 20;
	const FB20_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 20)
	pub fn get_fb20() -> u8 { ::read(REGISTER_ADDRESS, FB20_BIT_OFFSET, FB20_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 20)
	pub fn set_fb20(value: u8) { ::write(REGISTER_ADDRESS, FB20_BIT_OFFSET, FB20_BIT_WIDTH, value as u32); }

	const FB21_BIT_OFFSET: u8 = 21;
	const FB21_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 21)
	pub fn get_fb21() -> u8 { ::read(REGISTER_ADDRESS, FB21_BIT_OFFSET, FB21_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 21)
	pub fn set_fb21(value: u8) { ::write(REGISTER_ADDRESS, FB21_BIT_OFFSET, FB21_BIT_WIDTH, value as u32); }

	const FB22_BIT_OFFSET: u8 = 22;
	const FB22_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 22)
	pub fn get_fb22() -> u8 { ::read(REGISTER_ADDRESS, FB22_BIT_OFFSET, FB22_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 22)
	pub fn set_fb22(value: u8) { ::write(REGISTER_ADDRESS, FB22_BIT_OFFSET, FB22_BIT_WIDTH, value as u32); }

	const FB23_BIT_OFFSET: u8 = 23;
	const FB23_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 23)
	pub fn get_fb23() -> u8 { ::read(REGISTER_ADDRESS, FB23_BIT_OFFSET, FB23_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 23)
	pub fn set_fb23(value: u8) { ::write(REGISTER_ADDRESS, FB23_BIT_OFFSET, FB23_BIT_WIDTH, value as u32); }

	const FB24_BIT_OFFSET: u8 = 24;
	const FB24_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 24)
	pub fn get_fb24() -> u8 { ::read(REGISTER_ADDRESS, FB24_BIT_OFFSET, FB24_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 24)
	pub fn set_fb24(value: u8) { ::write(REGISTER_ADDRESS, FB24_BIT_OFFSET, FB24_BIT_WIDTH, value as u32); }

	const FB25_BIT_OFFSET: u8 = 25;
	const FB25_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 25)
	pub fn get_fb25() -> u8 { ::read(REGISTER_ADDRESS, FB25_BIT_OFFSET, FB25_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 25)
	pub fn set_fb25(value: u8) { ::write(REGISTER_ADDRESS, FB25_BIT_OFFSET, FB25_BIT_WIDTH, value as u32); }

	const FB26_BIT_OFFSET: u8 = 26;
	const FB26_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 26)
	pub fn get_fb26() -> u8 { ::read(REGISTER_ADDRESS, FB26_BIT_OFFSET, FB26_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 26)
	pub fn set_fb26(value: u8) { ::write(REGISTER_ADDRESS, FB26_BIT_OFFSET, FB26_BIT_WIDTH, value as u32); }

	const FB27_BIT_OFFSET: u8 = 27;
	const FB27_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 27)
	pub fn get_fb27() -> u8 { ::read(REGISTER_ADDRESS, FB27_BIT_OFFSET, FB27_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 27)
	pub fn set_fb27(value: u8) { ::write(REGISTER_ADDRESS, FB27_BIT_OFFSET, FB27_BIT_WIDTH, value as u32); }

	const FB28_BIT_OFFSET: u8 = 28;
	const FB28_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 28)
	pub fn get_fb28() -> u8 { ::read(REGISTER_ADDRESS, FB28_BIT_OFFSET, FB28_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 28)
	pub fn set_fb28(value: u8) { ::write(REGISTER_ADDRESS, FB28_BIT_OFFSET, FB28_BIT_WIDTH, value as u32); }

	const FB29_BIT_OFFSET: u8 = 29;
	const FB29_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 29)
	pub fn get_fb29() -> u8 { ::read(REGISTER_ADDRESS, FB29_BIT_OFFSET, FB29_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 29)
	pub fn set_fb29(value: u8) { ::write(REGISTER_ADDRESS, FB29_BIT_OFFSET, FB29_BIT_WIDTH, value as u32); }

	const FB30_BIT_OFFSET: u8 = 30;
	const FB30_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 30)
	pub fn get_fb30() -> u8 { ::read(REGISTER_ADDRESS, FB30_BIT_OFFSET, FB30_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 30)
	pub fn set_fb30(value: u8) { ::write(REGISTER_ADDRESS, FB30_BIT_OFFSET, FB30_BIT_WIDTH, value as u32); }

	const FB31_BIT_OFFSET: u8 = 31;
	const FB31_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 31)
	pub fn get_fb31() -> u8 { ::read(REGISTER_ADDRESS, FB31_BIT_OFFSET, FB31_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 31)
	pub fn set_fb31(value: u8) { ::write(REGISTER_ADDRESS, FB31_BIT_OFFSET, FB31_BIT_WIDTH, value as u32); }
}
/// Filter bank 0 register 2
/// Size: 0x20 bits
pub mod f0r2 {
	const REGISTER_ADDRESS_OFFSET: u32 = 0x244;
	const REGISTER_ADDRESS: u32 = super::BASE_ADDRESS + REGISTER_ADDRESS_OFFSET;

	const FB0_BIT_OFFSET: u8 = 0;
	const FB0_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 0)
	pub fn get_fb0() -> u8 { ::read(REGISTER_ADDRESS, FB0_BIT_OFFSET, FB0_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 0)
	pub fn set_fb0(value: u8) { ::write(REGISTER_ADDRESS, FB0_BIT_OFFSET, FB0_BIT_WIDTH, value as u32); }

	const FB1_BIT_OFFSET: u8 = 1;
	const FB1_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 1)
	pub fn get_fb1() -> u8 { ::read(REGISTER_ADDRESS, FB1_BIT_OFFSET, FB1_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 1)
	pub fn set_fb1(value: u8) { ::write(REGISTER_ADDRESS, FB1_BIT_OFFSET, FB1_BIT_WIDTH, value as u32); }

	const FB2_BIT_OFFSET: u8 = 2;
	const FB2_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 2)
	pub fn get_fb2() -> u8 { ::read(REGISTER_ADDRESS, FB2_BIT_OFFSET, FB2_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 2)
	pub fn set_fb2(value: u8) { ::write(REGISTER_ADDRESS, FB2_BIT_OFFSET, FB2_BIT_WIDTH, value as u32); }

	const FB3_BIT_OFFSET: u8 = 3;
	const FB3_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 3)
	pub fn get_fb3() -> u8 { ::read(REGISTER_ADDRESS, FB3_BIT_OFFSET, FB3_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 3)
	pub fn set_fb3(value: u8) { ::write(REGISTER_ADDRESS, FB3_BIT_OFFSET, FB3_BIT_WIDTH, value as u32); }

	const FB4_BIT_OFFSET: u8 = 4;
	const FB4_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 4)
	pub fn get_fb4() -> u8 { ::read(REGISTER_ADDRESS, FB4_BIT_OFFSET, FB4_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 4)
	pub fn set_fb4(value: u8) { ::write(REGISTER_ADDRESS, FB4_BIT_OFFSET, FB4_BIT_WIDTH, value as u32); }

	const FB5_BIT_OFFSET: u8 = 5;
	const FB5_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 5)
	pub fn get_fb5() -> u8 { ::read(REGISTER_ADDRESS, FB5_BIT_OFFSET, FB5_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 5)
	pub fn set_fb5(value: u8) { ::write(REGISTER_ADDRESS, FB5_BIT_OFFSET, FB5_BIT_WIDTH, value as u32); }

	const FB6_BIT_OFFSET: u8 = 6;
	const FB6_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 6)
	pub fn get_fb6() -> u8 { ::read(REGISTER_ADDRESS, FB6_BIT_OFFSET, FB6_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 6)
	pub fn set_fb6(value: u8) { ::write(REGISTER_ADDRESS, FB6_BIT_OFFSET, FB6_BIT_WIDTH, value as u32); }

	const FB7_BIT_OFFSET: u8 = 7;
	const FB7_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 7)
	pub fn get_fb7() -> u8 { ::read(REGISTER_ADDRESS, FB7_BIT_OFFSET, FB7_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 7)
	pub fn set_fb7(value: u8) { ::write(REGISTER_ADDRESS, FB7_BIT_OFFSET, FB7_BIT_WIDTH, value as u32); }

	const FB8_BIT_OFFSET: u8 = 8;
	const FB8_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 8)
	pub fn get_fb8() -> u8 { ::read(REGISTER_ADDRESS, FB8_BIT_OFFSET, FB8_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 8)
	pub fn set_fb8(value: u8) { ::write(REGISTER_ADDRESS, FB8_BIT_OFFSET, FB8_BIT_WIDTH, value as u32); }

	const FB9_BIT_OFFSET: u8 = 9;
	const FB9_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 9)
	pub fn get_fb9() -> u8 { ::read(REGISTER_ADDRESS, FB9_BIT_OFFSET, FB9_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 9)
	pub fn set_fb9(value: u8) { ::write(REGISTER_ADDRESS, FB9_BIT_OFFSET, FB9_BIT_WIDTH, value as u32); }

	const FB10_BIT_OFFSET: u8 = 10;
	const FB10_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 10)
	pub fn get_fb10() -> u8 { ::read(REGISTER_ADDRESS, FB10_BIT_OFFSET, FB10_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 10)
	pub fn set_fb10(value: u8) { ::write(REGISTER_ADDRESS, FB10_BIT_OFFSET, FB10_BIT_WIDTH, value as u32); }

	const FB11_BIT_OFFSET: u8 = 11;
	const FB11_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 11)
	pub fn get_fb11() -> u8 { ::read(REGISTER_ADDRESS, FB11_BIT_OFFSET, FB11_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 11)
	pub fn set_fb11(value: u8) { ::write(REGISTER_ADDRESS, FB11_BIT_OFFSET, FB11_BIT_WIDTH, value as u32); }

	const FB12_BIT_OFFSET: u8 = 12;
	const FB12_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 12)
	pub fn get_fb12() -> u8 { ::read(REGISTER_ADDRESS, FB12_BIT_OFFSET, FB12_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 12)
	pub fn set_fb12(value: u8) { ::write(REGISTER_ADDRESS, FB12_BIT_OFFSET, FB12_BIT_WIDTH, value as u32); }

	const FB13_BIT_OFFSET: u8 = 13;
	const FB13_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 13)
	pub fn get_fb13() -> u8 { ::read(REGISTER_ADDRESS, FB13_BIT_OFFSET, FB13_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 13)
	pub fn set_fb13(value: u8) { ::write(REGISTER_ADDRESS, FB13_BIT_OFFSET, FB13_BIT_WIDTH, value as u32); }

	const FB14_BIT_OFFSET: u8 = 14;
	const FB14_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 14)
	pub fn get_fb14() -> u8 { ::read(REGISTER_ADDRESS, FB14_BIT_OFFSET, FB14_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 14)
	pub fn set_fb14(value: u8) { ::write(REGISTER_ADDRESS, FB14_BIT_OFFSET, FB14_BIT_WIDTH, value as u32); }

	const FB15_BIT_OFFSET: u8 = 15;
	const FB15_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 15)
	pub fn get_fb15() -> u8 { ::read(REGISTER_ADDRESS, FB15_BIT_OFFSET, FB15_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 15)
	pub fn set_fb15(value: u8) { ::write(REGISTER_ADDRESS, FB15_BIT_OFFSET, FB15_BIT_WIDTH, value as u32); }

	const FB16_BIT_OFFSET: u8 = 16;
	const FB16_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 16)
	pub fn get_fb16() -> u8 { ::read(REGISTER_ADDRESS, FB16_BIT_OFFSET, FB16_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 16)
	pub fn set_fb16(value: u8) { ::write(REGISTER_ADDRESS, FB16_BIT_OFFSET, FB16_BIT_WIDTH, value as u32); }

	const FB17_BIT_OFFSET: u8 = 17;
	const FB17_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 17)
	pub fn get_fb17() -> u8 { ::read(REGISTER_ADDRESS, FB17_BIT_OFFSET, FB17_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 17)
	pub fn set_fb17(value: u8) { ::write(REGISTER_ADDRESS, FB17_BIT_OFFSET, FB17_BIT_WIDTH, value as u32); }

	const FB18_BIT_OFFSET: u8 = 18;
	const FB18_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 18)
	pub fn get_fb18() -> u8 { ::read(REGISTER_ADDRESS, FB18_BIT_OFFSET, FB18_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 18)
	pub fn set_fb18(value: u8) { ::write(REGISTER_ADDRESS, FB18_BIT_OFFSET, FB18_BIT_WIDTH, value as u32); }

	const FB19_BIT_OFFSET: u8 = 19;
	const FB19_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 19)
	pub fn get_fb19() -> u8 { ::read(REGISTER_ADDRESS, FB19_BIT_OFFSET, FB19_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 19)
	pub fn set_fb19(value: u8) { ::write(REGISTER_ADDRESS, FB19_BIT_OFFSET, FB19_BIT_WIDTH, value as u32); }

	const FB20_BIT_OFFSET: u8 = 20;
	const FB20_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 20)
	pub fn get_fb20() -> u8 { ::read(REGISTER_ADDRESS, FB20_BIT_OFFSET, FB20_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 20)
	pub fn set_fb20(value: u8) { ::write(REGISTER_ADDRESS, FB20_BIT_OFFSET, FB20_BIT_WIDTH, value as u32); }

	const FB21_BIT_OFFSET: u8 = 21;
	const FB21_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 21)
	pub fn get_fb21() -> u8 { ::read(REGISTER_ADDRESS, FB21_BIT_OFFSET, FB21_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 21)
	pub fn set_fb21(value: u8) { ::write(REGISTER_ADDRESS, FB21_BIT_OFFSET, FB21_BIT_WIDTH, value as u32); }

	const FB22_BIT_OFFSET: u8 = 22;
	const FB22_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 22)
	pub fn get_fb22() -> u8 { ::read(REGISTER_ADDRESS, FB22_BIT_OFFSET, FB22_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 22)
	pub fn set_fb22(value: u8) { ::write(REGISTER_ADDRESS, FB22_BIT_OFFSET, FB22_BIT_WIDTH, value as u32); }

	const FB23_BIT_OFFSET: u8 = 23;
	const FB23_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 23)
	pub fn get_fb23() -> u8 { ::read(REGISTER_ADDRESS, FB23_BIT_OFFSET, FB23_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 23)
	pub fn set_fb23(value: u8) { ::write(REGISTER_ADDRESS, FB23_BIT_OFFSET, FB23_BIT_WIDTH, value as u32); }

	const FB24_BIT_OFFSET: u8 = 24;
	const FB24_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 24)
	pub fn get_fb24() -> u8 { ::read(REGISTER_ADDRESS, FB24_BIT_OFFSET, FB24_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 24)
	pub fn set_fb24(value: u8) { ::write(REGISTER_ADDRESS, FB24_BIT_OFFSET, FB24_BIT_WIDTH, value as u32); }

	const FB25_BIT_OFFSET: u8 = 25;
	const FB25_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 25)
	pub fn get_fb25() -> u8 { ::read(REGISTER_ADDRESS, FB25_BIT_OFFSET, FB25_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 25)
	pub fn set_fb25(value: u8) { ::write(REGISTER_ADDRESS, FB25_BIT_OFFSET, FB25_BIT_WIDTH, value as u32); }

	const FB26_BIT_OFFSET: u8 = 26;
	const FB26_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 26)
	pub fn get_fb26() -> u8 { ::read(REGISTER_ADDRESS, FB26_BIT_OFFSET, FB26_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 26)
	pub fn set_fb26(value: u8) { ::write(REGISTER_ADDRESS, FB26_BIT_OFFSET, FB26_BIT_WIDTH, value as u32); }

	const FB27_BIT_OFFSET: u8 = 27;
	const FB27_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 27)
	pub fn get_fb27() -> u8 { ::read(REGISTER_ADDRESS, FB27_BIT_OFFSET, FB27_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 27)
	pub fn set_fb27(value: u8) { ::write(REGISTER_ADDRESS, FB27_BIT_OFFSET, FB27_BIT_WIDTH, value as u32); }

	const FB28_BIT_OFFSET: u8 = 28;
	const FB28_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 28)
	pub fn get_fb28() -> u8 { ::read(REGISTER_ADDRESS, FB28_BIT_OFFSET, FB28_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 28)
	pub fn set_fb28(value: u8) { ::write(REGISTER_ADDRESS, FB28_BIT_OFFSET, FB28_BIT_WIDTH, value as u32); }

	const FB29_BIT_OFFSET: u8 = 29;
	const FB29_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 29)
	pub fn get_fb29() -> u8 { ::read(REGISTER_ADDRESS, FB29_BIT_OFFSET, FB29_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 29)
	pub fn set_fb29(value: u8) { ::write(REGISTER_ADDRESS, FB29_BIT_OFFSET, FB29_BIT_WIDTH, value as u32); }

	const FB30_BIT_OFFSET: u8 = 30;
	const FB30_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 30)
	pub fn get_fb30() -> u8 { ::read(REGISTER_ADDRESS, FB30_BIT_OFFSET, FB30_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 30)
	pub fn set_fb30(value: u8) { ::write(REGISTER_ADDRESS, FB30_BIT_OFFSET, FB30_BIT_WIDTH, value as u32); }

	const FB31_BIT_OFFSET: u8 = 31;
	const FB31_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 31)
	pub fn get_fb31() -> u8 { ::read(REGISTER_ADDRESS, FB31_BIT_OFFSET, FB31_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 31)
	pub fn set_fb31(value: u8) { ::write(REGISTER_ADDRESS, FB31_BIT_OFFSET, FB31_BIT_WIDTH, value as u32); }
}
/// Filter bank 1 register 1
/// Size: 0x20 bits
pub mod f1r1 {
	const REGISTER_ADDRESS_OFFSET: u32 = 0x248;
	const REGISTER_ADDRESS: u32 = super::BASE_ADDRESS + REGISTER_ADDRESS_OFFSET;

	const FB0_BIT_OFFSET: u8 = 0;
	const FB0_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 0)
	pub fn get_fb0() -> u8 { ::read(REGISTER_ADDRESS, FB0_BIT_OFFSET, FB0_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 0)
	pub fn set_fb0(value: u8) { ::write(REGISTER_ADDRESS, FB0_BIT_OFFSET, FB0_BIT_WIDTH, value as u32); }

	const FB1_BIT_OFFSET: u8 = 1;
	const FB1_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 1)
	pub fn get_fb1() -> u8 { ::read(REGISTER_ADDRESS, FB1_BIT_OFFSET, FB1_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 1)
	pub fn set_fb1(value: u8) { ::write(REGISTER_ADDRESS, FB1_BIT_OFFSET, FB1_BIT_WIDTH, value as u32); }

	const FB2_BIT_OFFSET: u8 = 2;
	const FB2_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 2)
	pub fn get_fb2() -> u8 { ::read(REGISTER_ADDRESS, FB2_BIT_OFFSET, FB2_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 2)
	pub fn set_fb2(value: u8) { ::write(REGISTER_ADDRESS, FB2_BIT_OFFSET, FB2_BIT_WIDTH, value as u32); }

	const FB3_BIT_OFFSET: u8 = 3;
	const FB3_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 3)
	pub fn get_fb3() -> u8 { ::read(REGISTER_ADDRESS, FB3_BIT_OFFSET, FB3_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 3)
	pub fn set_fb3(value: u8) { ::write(REGISTER_ADDRESS, FB3_BIT_OFFSET, FB3_BIT_WIDTH, value as u32); }

	const FB4_BIT_OFFSET: u8 = 4;
	const FB4_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 4)
	pub fn get_fb4() -> u8 { ::read(REGISTER_ADDRESS, FB4_BIT_OFFSET, FB4_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 4)
	pub fn set_fb4(value: u8) { ::write(REGISTER_ADDRESS, FB4_BIT_OFFSET, FB4_BIT_WIDTH, value as u32); }

	const FB5_BIT_OFFSET: u8 = 5;
	const FB5_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 5)
	pub fn get_fb5() -> u8 { ::read(REGISTER_ADDRESS, FB5_BIT_OFFSET, FB5_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 5)
	pub fn set_fb5(value: u8) { ::write(REGISTER_ADDRESS, FB5_BIT_OFFSET, FB5_BIT_WIDTH, value as u32); }

	const FB6_BIT_OFFSET: u8 = 6;
	const FB6_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 6)
	pub fn get_fb6() -> u8 { ::read(REGISTER_ADDRESS, FB6_BIT_OFFSET, FB6_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 6)
	pub fn set_fb6(value: u8) { ::write(REGISTER_ADDRESS, FB6_BIT_OFFSET, FB6_BIT_WIDTH, value as u32); }

	const FB7_BIT_OFFSET: u8 = 7;
	const FB7_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 7)
	pub fn get_fb7() -> u8 { ::read(REGISTER_ADDRESS, FB7_BIT_OFFSET, FB7_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 7)
	pub fn set_fb7(value: u8) { ::write(REGISTER_ADDRESS, FB7_BIT_OFFSET, FB7_BIT_WIDTH, value as u32); }

	const FB8_BIT_OFFSET: u8 = 8;
	const FB8_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 8)
	pub fn get_fb8() -> u8 { ::read(REGISTER_ADDRESS, FB8_BIT_OFFSET, FB8_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 8)
	pub fn set_fb8(value: u8) { ::write(REGISTER_ADDRESS, FB8_BIT_OFFSET, FB8_BIT_WIDTH, value as u32); }

	const FB9_BIT_OFFSET: u8 = 9;
	const FB9_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 9)
	pub fn get_fb9() -> u8 { ::read(REGISTER_ADDRESS, FB9_BIT_OFFSET, FB9_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 9)
	pub fn set_fb9(value: u8) { ::write(REGISTER_ADDRESS, FB9_BIT_OFFSET, FB9_BIT_WIDTH, value as u32); }

	const FB10_BIT_OFFSET: u8 = 10;
	const FB10_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 10)
	pub fn get_fb10() -> u8 { ::read(REGISTER_ADDRESS, FB10_BIT_OFFSET, FB10_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 10)
	pub fn set_fb10(value: u8) { ::write(REGISTER_ADDRESS, FB10_BIT_OFFSET, FB10_BIT_WIDTH, value as u32); }

	const FB11_BIT_OFFSET: u8 = 11;
	const FB11_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 11)
	pub fn get_fb11() -> u8 { ::read(REGISTER_ADDRESS, FB11_BIT_OFFSET, FB11_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 11)
	pub fn set_fb11(value: u8) { ::write(REGISTER_ADDRESS, FB11_BIT_OFFSET, FB11_BIT_WIDTH, value as u32); }

	const FB12_BIT_OFFSET: u8 = 12;
	const FB12_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 12)
	pub fn get_fb12() -> u8 { ::read(REGISTER_ADDRESS, FB12_BIT_OFFSET, FB12_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 12)
	pub fn set_fb12(value: u8) { ::write(REGISTER_ADDRESS, FB12_BIT_OFFSET, FB12_BIT_WIDTH, value as u32); }

	const FB13_BIT_OFFSET: u8 = 13;
	const FB13_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 13)
	pub fn get_fb13() -> u8 { ::read(REGISTER_ADDRESS, FB13_BIT_OFFSET, FB13_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 13)
	pub fn set_fb13(value: u8) { ::write(REGISTER_ADDRESS, FB13_BIT_OFFSET, FB13_BIT_WIDTH, value as u32); }

	const FB14_BIT_OFFSET: u8 = 14;
	const FB14_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 14)
	pub fn get_fb14() -> u8 { ::read(REGISTER_ADDRESS, FB14_BIT_OFFSET, FB14_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 14)
	pub fn set_fb14(value: u8) { ::write(REGISTER_ADDRESS, FB14_BIT_OFFSET, FB14_BIT_WIDTH, value as u32); }

	const FB15_BIT_OFFSET: u8 = 15;
	const FB15_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 15)
	pub fn get_fb15() -> u8 { ::read(REGISTER_ADDRESS, FB15_BIT_OFFSET, FB15_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 15)
	pub fn set_fb15(value: u8) { ::write(REGISTER_ADDRESS, FB15_BIT_OFFSET, FB15_BIT_WIDTH, value as u32); }

	const FB16_BIT_OFFSET: u8 = 16;
	const FB16_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 16)
	pub fn get_fb16() -> u8 { ::read(REGISTER_ADDRESS, FB16_BIT_OFFSET, FB16_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 16)
	pub fn set_fb16(value: u8) { ::write(REGISTER_ADDRESS, FB16_BIT_OFFSET, FB16_BIT_WIDTH, value as u32); }

	const FB17_BIT_OFFSET: u8 = 17;
	const FB17_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 17)
	pub fn get_fb17() -> u8 { ::read(REGISTER_ADDRESS, FB17_BIT_OFFSET, FB17_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 17)
	pub fn set_fb17(value: u8) { ::write(REGISTER_ADDRESS, FB17_BIT_OFFSET, FB17_BIT_WIDTH, value as u32); }

	const FB18_BIT_OFFSET: u8 = 18;
	const FB18_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 18)
	pub fn get_fb18() -> u8 { ::read(REGISTER_ADDRESS, FB18_BIT_OFFSET, FB18_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 18)
	pub fn set_fb18(value: u8) { ::write(REGISTER_ADDRESS, FB18_BIT_OFFSET, FB18_BIT_WIDTH, value as u32); }

	const FB19_BIT_OFFSET: u8 = 19;
	const FB19_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 19)
	pub fn get_fb19() -> u8 { ::read(REGISTER_ADDRESS, FB19_BIT_OFFSET, FB19_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 19)
	pub fn set_fb19(value: u8) { ::write(REGISTER_ADDRESS, FB19_BIT_OFFSET, FB19_BIT_WIDTH, value as u32); }

	const FB20_BIT_OFFSET: u8 = 20;
	const FB20_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 20)
	pub fn get_fb20() -> u8 { ::read(REGISTER_ADDRESS, FB20_BIT_OFFSET, FB20_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 20)
	pub fn set_fb20(value: u8) { ::write(REGISTER_ADDRESS, FB20_BIT_OFFSET, FB20_BIT_WIDTH, value as u32); }

	const FB21_BIT_OFFSET: u8 = 21;
	const FB21_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 21)
	pub fn get_fb21() -> u8 { ::read(REGISTER_ADDRESS, FB21_BIT_OFFSET, FB21_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 21)
	pub fn set_fb21(value: u8) { ::write(REGISTER_ADDRESS, FB21_BIT_OFFSET, FB21_BIT_WIDTH, value as u32); }

	const FB22_BIT_OFFSET: u8 = 22;
	const FB22_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 22)
	pub fn get_fb22() -> u8 { ::read(REGISTER_ADDRESS, FB22_BIT_OFFSET, FB22_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 22)
	pub fn set_fb22(value: u8) { ::write(REGISTER_ADDRESS, FB22_BIT_OFFSET, FB22_BIT_WIDTH, value as u32); }

	const FB23_BIT_OFFSET: u8 = 23;
	const FB23_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 23)
	pub fn get_fb23() -> u8 { ::read(REGISTER_ADDRESS, FB23_BIT_OFFSET, FB23_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 23)
	pub fn set_fb23(value: u8) { ::write(REGISTER_ADDRESS, FB23_BIT_OFFSET, FB23_BIT_WIDTH, value as u32); }

	const FB24_BIT_OFFSET: u8 = 24;
	const FB24_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 24)
	pub fn get_fb24() -> u8 { ::read(REGISTER_ADDRESS, FB24_BIT_OFFSET, FB24_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 24)
	pub fn set_fb24(value: u8) { ::write(REGISTER_ADDRESS, FB24_BIT_OFFSET, FB24_BIT_WIDTH, value as u32); }

	const FB25_BIT_OFFSET: u8 = 25;
	const FB25_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 25)
	pub fn get_fb25() -> u8 { ::read(REGISTER_ADDRESS, FB25_BIT_OFFSET, FB25_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 25)
	pub fn set_fb25(value: u8) { ::write(REGISTER_ADDRESS, FB25_BIT_OFFSET, FB25_BIT_WIDTH, value as u32); }

	const FB26_BIT_OFFSET: u8 = 26;
	const FB26_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 26)
	pub fn get_fb26() -> u8 { ::read(REGISTER_ADDRESS, FB26_BIT_OFFSET, FB26_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 26)
	pub fn set_fb26(value: u8) { ::write(REGISTER_ADDRESS, FB26_BIT_OFFSET, FB26_BIT_WIDTH, value as u32); }

	const FB27_BIT_OFFSET: u8 = 27;
	const FB27_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 27)
	pub fn get_fb27() -> u8 { ::read(REGISTER_ADDRESS, FB27_BIT_OFFSET, FB27_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 27)
	pub fn set_fb27(value: u8) { ::write(REGISTER_ADDRESS, FB27_BIT_OFFSET, FB27_BIT_WIDTH, value as u32); }

	const FB28_BIT_OFFSET: u8 = 28;
	const FB28_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 28)
	pub fn get_fb28() -> u8 { ::read(REGISTER_ADDRESS, FB28_BIT_OFFSET, FB28_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 28)
	pub fn set_fb28(value: u8) { ::write(REGISTER_ADDRESS, FB28_BIT_OFFSET, FB28_BIT_WIDTH, value as u32); }

	const FB29_BIT_OFFSET: u8 = 29;
	const FB29_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 29)
	pub fn get_fb29() -> u8 { ::read(REGISTER_ADDRESS, FB29_BIT_OFFSET, FB29_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 29)
	pub fn set_fb29(value: u8) { ::write(REGISTER_ADDRESS, FB29_BIT_OFFSET, FB29_BIT_WIDTH, value as u32); }

	const FB30_BIT_OFFSET: u8 = 30;
	const FB30_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 30)
	pub fn get_fb30() -> u8 { ::read(REGISTER_ADDRESS, FB30_BIT_OFFSET, FB30_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 30)
	pub fn set_fb30(value: u8) { ::write(REGISTER_ADDRESS, FB30_BIT_OFFSET, FB30_BIT_WIDTH, value as u32); }

	const FB31_BIT_OFFSET: u8 = 31;
	const FB31_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 31)
	pub fn get_fb31() -> u8 { ::read(REGISTER_ADDRESS, FB31_BIT_OFFSET, FB31_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 31)
	pub fn set_fb31(value: u8) { ::write(REGISTER_ADDRESS, FB31_BIT_OFFSET, FB31_BIT_WIDTH, value as u32); }
}
/// Filter bank 1 register 2
/// Size: 0x20 bits
pub mod f1r2 {
	const REGISTER_ADDRESS_OFFSET: u32 = 0x24C;
	const REGISTER_ADDRESS: u32 = super::BASE_ADDRESS + REGISTER_ADDRESS_OFFSET;

	const FB0_BIT_OFFSET: u8 = 0;
	const FB0_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 0)
	pub fn get_fb0() -> u8 { ::read(REGISTER_ADDRESS, FB0_BIT_OFFSET, FB0_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 0)
	pub fn set_fb0(value: u8) { ::write(REGISTER_ADDRESS, FB0_BIT_OFFSET, FB0_BIT_WIDTH, value as u32); }

	const FB1_BIT_OFFSET: u8 = 1;
	const FB1_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 1)
	pub fn get_fb1() -> u8 { ::read(REGISTER_ADDRESS, FB1_BIT_OFFSET, FB1_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 1)
	pub fn set_fb1(value: u8) { ::write(REGISTER_ADDRESS, FB1_BIT_OFFSET, FB1_BIT_WIDTH, value as u32); }

	const FB2_BIT_OFFSET: u8 = 2;
	const FB2_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 2)
	pub fn get_fb2() -> u8 { ::read(REGISTER_ADDRESS, FB2_BIT_OFFSET, FB2_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 2)
	pub fn set_fb2(value: u8) { ::write(REGISTER_ADDRESS, FB2_BIT_OFFSET, FB2_BIT_WIDTH, value as u32); }

	const FB3_BIT_OFFSET: u8 = 3;
	const FB3_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 3)
	pub fn get_fb3() -> u8 { ::read(REGISTER_ADDRESS, FB3_BIT_OFFSET, FB3_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 3)
	pub fn set_fb3(value: u8) { ::write(REGISTER_ADDRESS, FB3_BIT_OFFSET, FB3_BIT_WIDTH, value as u32); }

	const FB4_BIT_OFFSET: u8 = 4;
	const FB4_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 4)
	pub fn get_fb4() -> u8 { ::read(REGISTER_ADDRESS, FB4_BIT_OFFSET, FB4_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 4)
	pub fn set_fb4(value: u8) { ::write(REGISTER_ADDRESS, FB4_BIT_OFFSET, FB4_BIT_WIDTH, value as u32); }

	const FB5_BIT_OFFSET: u8 = 5;
	const FB5_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 5)
	pub fn get_fb5() -> u8 { ::read(REGISTER_ADDRESS, FB5_BIT_OFFSET, FB5_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 5)
	pub fn set_fb5(value: u8) { ::write(REGISTER_ADDRESS, FB5_BIT_OFFSET, FB5_BIT_WIDTH, value as u32); }

	const FB6_BIT_OFFSET: u8 = 6;
	const FB6_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 6)
	pub fn get_fb6() -> u8 { ::read(REGISTER_ADDRESS, FB6_BIT_OFFSET, FB6_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 6)
	pub fn set_fb6(value: u8) { ::write(REGISTER_ADDRESS, FB6_BIT_OFFSET, FB6_BIT_WIDTH, value as u32); }

	const FB7_BIT_OFFSET: u8 = 7;
	const FB7_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 7)
	pub fn get_fb7() -> u8 { ::read(REGISTER_ADDRESS, FB7_BIT_OFFSET, FB7_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 7)
	pub fn set_fb7(value: u8) { ::write(REGISTER_ADDRESS, FB7_BIT_OFFSET, FB7_BIT_WIDTH, value as u32); }

	const FB8_BIT_OFFSET: u8 = 8;
	const FB8_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 8)
	pub fn get_fb8() -> u8 { ::read(REGISTER_ADDRESS, FB8_BIT_OFFSET, FB8_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 8)
	pub fn set_fb8(value: u8) { ::write(REGISTER_ADDRESS, FB8_BIT_OFFSET, FB8_BIT_WIDTH, value as u32); }

	const FB9_BIT_OFFSET: u8 = 9;
	const FB9_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 9)
	pub fn get_fb9() -> u8 { ::read(REGISTER_ADDRESS, FB9_BIT_OFFSET, FB9_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 9)
	pub fn set_fb9(value: u8) { ::write(REGISTER_ADDRESS, FB9_BIT_OFFSET, FB9_BIT_WIDTH, value as u32); }

	const FB10_BIT_OFFSET: u8 = 10;
	const FB10_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 10)
	pub fn get_fb10() -> u8 { ::read(REGISTER_ADDRESS, FB10_BIT_OFFSET, FB10_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 10)
	pub fn set_fb10(value: u8) { ::write(REGISTER_ADDRESS, FB10_BIT_OFFSET, FB10_BIT_WIDTH, value as u32); }

	const FB11_BIT_OFFSET: u8 = 11;
	const FB11_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 11)
	pub fn get_fb11() -> u8 { ::read(REGISTER_ADDRESS, FB11_BIT_OFFSET, FB11_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 11)
	pub fn set_fb11(value: u8) { ::write(REGISTER_ADDRESS, FB11_BIT_OFFSET, FB11_BIT_WIDTH, value as u32); }

	const FB12_BIT_OFFSET: u8 = 12;
	const FB12_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 12)
	pub fn get_fb12() -> u8 { ::read(REGISTER_ADDRESS, FB12_BIT_OFFSET, FB12_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 12)
	pub fn set_fb12(value: u8) { ::write(REGISTER_ADDRESS, FB12_BIT_OFFSET, FB12_BIT_WIDTH, value as u32); }

	const FB13_BIT_OFFSET: u8 = 13;
	const FB13_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 13)
	pub fn get_fb13() -> u8 { ::read(REGISTER_ADDRESS, FB13_BIT_OFFSET, FB13_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 13)
	pub fn set_fb13(value: u8) { ::write(REGISTER_ADDRESS, FB13_BIT_OFFSET, FB13_BIT_WIDTH, value as u32); }

	const FB14_BIT_OFFSET: u8 = 14;
	const FB14_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 14)
	pub fn get_fb14() -> u8 { ::read(REGISTER_ADDRESS, FB14_BIT_OFFSET, FB14_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 14)
	pub fn set_fb14(value: u8) { ::write(REGISTER_ADDRESS, FB14_BIT_OFFSET, FB14_BIT_WIDTH, value as u32); }

	const FB15_BIT_OFFSET: u8 = 15;
	const FB15_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 15)
	pub fn get_fb15() -> u8 { ::read(REGISTER_ADDRESS, FB15_BIT_OFFSET, FB15_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 15)
	pub fn set_fb15(value: u8) { ::write(REGISTER_ADDRESS, FB15_BIT_OFFSET, FB15_BIT_WIDTH, value as u32); }

	const FB16_BIT_OFFSET: u8 = 16;
	const FB16_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 16)
	pub fn get_fb16() -> u8 { ::read(REGISTER_ADDRESS, FB16_BIT_OFFSET, FB16_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 16)
	pub fn set_fb16(value: u8) { ::write(REGISTER_ADDRESS, FB16_BIT_OFFSET, FB16_BIT_WIDTH, value as u32); }

	const FB17_BIT_OFFSET: u8 = 17;
	const FB17_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 17)
	pub fn get_fb17() -> u8 { ::read(REGISTER_ADDRESS, FB17_BIT_OFFSET, FB17_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 17)
	pub fn set_fb17(value: u8) { ::write(REGISTER_ADDRESS, FB17_BIT_OFFSET, FB17_BIT_WIDTH, value as u32); }

	const FB18_BIT_OFFSET: u8 = 18;
	const FB18_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 18)
	pub fn get_fb18() -> u8 { ::read(REGISTER_ADDRESS, FB18_BIT_OFFSET, FB18_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 18)
	pub fn set_fb18(value: u8) { ::write(REGISTER_ADDRESS, FB18_BIT_OFFSET, FB18_BIT_WIDTH, value as u32); }

	const FB19_BIT_OFFSET: u8 = 19;
	const FB19_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 19)
	pub fn get_fb19() -> u8 { ::read(REGISTER_ADDRESS, FB19_BIT_OFFSET, FB19_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 19)
	pub fn set_fb19(value: u8) { ::write(REGISTER_ADDRESS, FB19_BIT_OFFSET, FB19_BIT_WIDTH, value as u32); }

	const FB20_BIT_OFFSET: u8 = 20;
	const FB20_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 20)
	pub fn get_fb20() -> u8 { ::read(REGISTER_ADDRESS, FB20_BIT_OFFSET, FB20_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 20)
	pub fn set_fb20(value: u8) { ::write(REGISTER_ADDRESS, FB20_BIT_OFFSET, FB20_BIT_WIDTH, value as u32); }

	const FB21_BIT_OFFSET: u8 = 21;
	const FB21_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 21)
	pub fn get_fb21() -> u8 { ::read(REGISTER_ADDRESS, FB21_BIT_OFFSET, FB21_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 21)
	pub fn set_fb21(value: u8) { ::write(REGISTER_ADDRESS, FB21_BIT_OFFSET, FB21_BIT_WIDTH, value as u32); }

	const FB22_BIT_OFFSET: u8 = 22;
	const FB22_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 22)
	pub fn get_fb22() -> u8 { ::read(REGISTER_ADDRESS, FB22_BIT_OFFSET, FB22_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 22)
	pub fn set_fb22(value: u8) { ::write(REGISTER_ADDRESS, FB22_BIT_OFFSET, FB22_BIT_WIDTH, value as u32); }

	const FB23_BIT_OFFSET: u8 = 23;
	const FB23_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 23)
	pub fn get_fb23() -> u8 { ::read(REGISTER_ADDRESS, FB23_BIT_OFFSET, FB23_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 23)
	pub fn set_fb23(value: u8) { ::write(REGISTER_ADDRESS, FB23_BIT_OFFSET, FB23_BIT_WIDTH, value as u32); }

	const FB24_BIT_OFFSET: u8 = 24;
	const FB24_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 24)
	pub fn get_fb24() -> u8 { ::read(REGISTER_ADDRESS, FB24_BIT_OFFSET, FB24_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 24)
	pub fn set_fb24(value: u8) { ::write(REGISTER_ADDRESS, FB24_BIT_OFFSET, FB24_BIT_WIDTH, value as u32); }

	const FB25_BIT_OFFSET: u8 = 25;
	const FB25_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 25)
	pub fn get_fb25() -> u8 { ::read(REGISTER_ADDRESS, FB25_BIT_OFFSET, FB25_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 25)
	pub fn set_fb25(value: u8) { ::write(REGISTER_ADDRESS, FB25_BIT_OFFSET, FB25_BIT_WIDTH, value as u32); }

	const FB26_BIT_OFFSET: u8 = 26;
	const FB26_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 26)
	pub fn get_fb26() -> u8 { ::read(REGISTER_ADDRESS, FB26_BIT_OFFSET, FB26_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 26)
	pub fn set_fb26(value: u8) { ::write(REGISTER_ADDRESS, FB26_BIT_OFFSET, FB26_BIT_WIDTH, value as u32); }

	const FB27_BIT_OFFSET: u8 = 27;
	const FB27_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 27)
	pub fn get_fb27() -> u8 { ::read(REGISTER_ADDRESS, FB27_BIT_OFFSET, FB27_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 27)
	pub fn set_fb27(value: u8) { ::write(REGISTER_ADDRESS, FB27_BIT_OFFSET, FB27_BIT_WIDTH, value as u32); }

	const FB28_BIT_OFFSET: u8 = 28;
	const FB28_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 28)
	pub fn get_fb28() -> u8 { ::read(REGISTER_ADDRESS, FB28_BIT_OFFSET, FB28_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 28)
	pub fn set_fb28(value: u8) { ::write(REGISTER_ADDRESS, FB28_BIT_OFFSET, FB28_BIT_WIDTH, value as u32); }

	const FB29_BIT_OFFSET: u8 = 29;
	const FB29_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 29)
	pub fn get_fb29() -> u8 { ::read(REGISTER_ADDRESS, FB29_BIT_OFFSET, FB29_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 29)
	pub fn set_fb29(value: u8) { ::write(REGISTER_ADDRESS, FB29_BIT_OFFSET, FB29_BIT_WIDTH, value as u32); }

	const FB30_BIT_OFFSET: u8 = 30;
	const FB30_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 30)
	pub fn get_fb30() -> u8 { ::read(REGISTER_ADDRESS, FB30_BIT_OFFSET, FB30_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 30)
	pub fn set_fb30(value: u8) { ::write(REGISTER_ADDRESS, FB30_BIT_OFFSET, FB30_BIT_WIDTH, value as u32); }

	const FB31_BIT_OFFSET: u8 = 31;
	const FB31_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 31)
	pub fn get_fb31() -> u8 { ::read(REGISTER_ADDRESS, FB31_BIT_OFFSET, FB31_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 31)
	pub fn set_fb31(value: u8) { ::write(REGISTER_ADDRESS, FB31_BIT_OFFSET, FB31_BIT_WIDTH, value as u32); }
}
/// Filter bank 2 register 1
/// Size: 0x20 bits
pub mod f2r1 {
	const REGISTER_ADDRESS_OFFSET: u32 = 0x250;
	const REGISTER_ADDRESS: u32 = super::BASE_ADDRESS + REGISTER_ADDRESS_OFFSET;

	const FB0_BIT_OFFSET: u8 = 0;
	const FB0_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 0)
	pub fn get_fb0() -> u8 { ::read(REGISTER_ADDRESS, FB0_BIT_OFFSET, FB0_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 0)
	pub fn set_fb0(value: u8) { ::write(REGISTER_ADDRESS, FB0_BIT_OFFSET, FB0_BIT_WIDTH, value as u32); }

	const FB1_BIT_OFFSET: u8 = 1;
	const FB1_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 1)
	pub fn get_fb1() -> u8 { ::read(REGISTER_ADDRESS, FB1_BIT_OFFSET, FB1_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 1)
	pub fn set_fb1(value: u8) { ::write(REGISTER_ADDRESS, FB1_BIT_OFFSET, FB1_BIT_WIDTH, value as u32); }

	const FB2_BIT_OFFSET: u8 = 2;
	const FB2_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 2)
	pub fn get_fb2() -> u8 { ::read(REGISTER_ADDRESS, FB2_BIT_OFFSET, FB2_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 2)
	pub fn set_fb2(value: u8) { ::write(REGISTER_ADDRESS, FB2_BIT_OFFSET, FB2_BIT_WIDTH, value as u32); }

	const FB3_BIT_OFFSET: u8 = 3;
	const FB3_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 3)
	pub fn get_fb3() -> u8 { ::read(REGISTER_ADDRESS, FB3_BIT_OFFSET, FB3_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 3)
	pub fn set_fb3(value: u8) { ::write(REGISTER_ADDRESS, FB3_BIT_OFFSET, FB3_BIT_WIDTH, value as u32); }

	const FB4_BIT_OFFSET: u8 = 4;
	const FB4_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 4)
	pub fn get_fb4() -> u8 { ::read(REGISTER_ADDRESS, FB4_BIT_OFFSET, FB4_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 4)
	pub fn set_fb4(value: u8) { ::write(REGISTER_ADDRESS, FB4_BIT_OFFSET, FB4_BIT_WIDTH, value as u32); }

	const FB5_BIT_OFFSET: u8 = 5;
	const FB5_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 5)
	pub fn get_fb5() -> u8 { ::read(REGISTER_ADDRESS, FB5_BIT_OFFSET, FB5_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 5)
	pub fn set_fb5(value: u8) { ::write(REGISTER_ADDRESS, FB5_BIT_OFFSET, FB5_BIT_WIDTH, value as u32); }

	const FB6_BIT_OFFSET: u8 = 6;
	const FB6_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 6)
	pub fn get_fb6() -> u8 { ::read(REGISTER_ADDRESS, FB6_BIT_OFFSET, FB6_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 6)
	pub fn set_fb6(value: u8) { ::write(REGISTER_ADDRESS, FB6_BIT_OFFSET, FB6_BIT_WIDTH, value as u32); }

	const FB7_BIT_OFFSET: u8 = 7;
	const FB7_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 7)
	pub fn get_fb7() -> u8 { ::read(REGISTER_ADDRESS, FB7_BIT_OFFSET, FB7_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 7)
	pub fn set_fb7(value: u8) { ::write(REGISTER_ADDRESS, FB7_BIT_OFFSET, FB7_BIT_WIDTH, value as u32); }

	const FB8_BIT_OFFSET: u8 = 8;
	const FB8_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 8)
	pub fn get_fb8() -> u8 { ::read(REGISTER_ADDRESS, FB8_BIT_OFFSET, FB8_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 8)
	pub fn set_fb8(value: u8) { ::write(REGISTER_ADDRESS, FB8_BIT_OFFSET, FB8_BIT_WIDTH, value as u32); }

	const FB9_BIT_OFFSET: u8 = 9;
	const FB9_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 9)
	pub fn get_fb9() -> u8 { ::read(REGISTER_ADDRESS, FB9_BIT_OFFSET, FB9_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 9)
	pub fn set_fb9(value: u8) { ::write(REGISTER_ADDRESS, FB9_BIT_OFFSET, FB9_BIT_WIDTH, value as u32); }

	const FB10_BIT_OFFSET: u8 = 10;
	const FB10_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 10)
	pub fn get_fb10() -> u8 { ::read(REGISTER_ADDRESS, FB10_BIT_OFFSET, FB10_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 10)
	pub fn set_fb10(value: u8) { ::write(REGISTER_ADDRESS, FB10_BIT_OFFSET, FB10_BIT_WIDTH, value as u32); }

	const FB11_BIT_OFFSET: u8 = 11;
	const FB11_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 11)
	pub fn get_fb11() -> u8 { ::read(REGISTER_ADDRESS, FB11_BIT_OFFSET, FB11_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 11)
	pub fn set_fb11(value: u8) { ::write(REGISTER_ADDRESS, FB11_BIT_OFFSET, FB11_BIT_WIDTH, value as u32); }

	const FB12_BIT_OFFSET: u8 = 12;
	const FB12_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 12)
	pub fn get_fb12() -> u8 { ::read(REGISTER_ADDRESS, FB12_BIT_OFFSET, FB12_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 12)
	pub fn set_fb12(value: u8) { ::write(REGISTER_ADDRESS, FB12_BIT_OFFSET, FB12_BIT_WIDTH, value as u32); }

	const FB13_BIT_OFFSET: u8 = 13;
	const FB13_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 13)
	pub fn get_fb13() -> u8 { ::read(REGISTER_ADDRESS, FB13_BIT_OFFSET, FB13_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 13)
	pub fn set_fb13(value: u8) { ::write(REGISTER_ADDRESS, FB13_BIT_OFFSET, FB13_BIT_WIDTH, value as u32); }

	const FB14_BIT_OFFSET: u8 = 14;
	const FB14_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 14)
	pub fn get_fb14() -> u8 { ::read(REGISTER_ADDRESS, FB14_BIT_OFFSET, FB14_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 14)
	pub fn set_fb14(value: u8) { ::write(REGISTER_ADDRESS, FB14_BIT_OFFSET, FB14_BIT_WIDTH, value as u32); }

	const FB15_BIT_OFFSET: u8 = 15;
	const FB15_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 15)
	pub fn get_fb15() -> u8 { ::read(REGISTER_ADDRESS, FB15_BIT_OFFSET, FB15_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 15)
	pub fn set_fb15(value: u8) { ::write(REGISTER_ADDRESS, FB15_BIT_OFFSET, FB15_BIT_WIDTH, value as u32); }

	const FB16_BIT_OFFSET: u8 = 16;
	const FB16_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 16)
	pub fn get_fb16() -> u8 { ::read(REGISTER_ADDRESS, FB16_BIT_OFFSET, FB16_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 16)
	pub fn set_fb16(value: u8) { ::write(REGISTER_ADDRESS, FB16_BIT_OFFSET, FB16_BIT_WIDTH, value as u32); }

	const FB17_BIT_OFFSET: u8 = 17;
	const FB17_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 17)
	pub fn get_fb17() -> u8 { ::read(REGISTER_ADDRESS, FB17_BIT_OFFSET, FB17_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 17)
	pub fn set_fb17(value: u8) { ::write(REGISTER_ADDRESS, FB17_BIT_OFFSET, FB17_BIT_WIDTH, value as u32); }

	const FB18_BIT_OFFSET: u8 = 18;
	const FB18_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 18)
	pub fn get_fb18() -> u8 { ::read(REGISTER_ADDRESS, FB18_BIT_OFFSET, FB18_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 18)
	pub fn set_fb18(value: u8) { ::write(REGISTER_ADDRESS, FB18_BIT_OFFSET, FB18_BIT_WIDTH, value as u32); }

	const FB19_BIT_OFFSET: u8 = 19;
	const FB19_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 19)
	pub fn get_fb19() -> u8 { ::read(REGISTER_ADDRESS, FB19_BIT_OFFSET, FB19_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 19)
	pub fn set_fb19(value: u8) { ::write(REGISTER_ADDRESS, FB19_BIT_OFFSET, FB19_BIT_WIDTH, value as u32); }

	const FB20_BIT_OFFSET: u8 = 20;
	const FB20_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 20)
	pub fn get_fb20() -> u8 { ::read(REGISTER_ADDRESS, FB20_BIT_OFFSET, FB20_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 20)
	pub fn set_fb20(value: u8) { ::write(REGISTER_ADDRESS, FB20_BIT_OFFSET, FB20_BIT_WIDTH, value as u32); }

	const FB21_BIT_OFFSET: u8 = 21;
	const FB21_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 21)
	pub fn get_fb21() -> u8 { ::read(REGISTER_ADDRESS, FB21_BIT_OFFSET, FB21_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 21)
	pub fn set_fb21(value: u8) { ::write(REGISTER_ADDRESS, FB21_BIT_OFFSET, FB21_BIT_WIDTH, value as u32); }

	const FB22_BIT_OFFSET: u8 = 22;
	const FB22_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 22)
	pub fn get_fb22() -> u8 { ::read(REGISTER_ADDRESS, FB22_BIT_OFFSET, FB22_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 22)
	pub fn set_fb22(value: u8) { ::write(REGISTER_ADDRESS, FB22_BIT_OFFSET, FB22_BIT_WIDTH, value as u32); }

	const FB23_BIT_OFFSET: u8 = 23;
	const FB23_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 23)
	pub fn get_fb23() -> u8 { ::read(REGISTER_ADDRESS, FB23_BIT_OFFSET, FB23_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 23)
	pub fn set_fb23(value: u8) { ::write(REGISTER_ADDRESS, FB23_BIT_OFFSET, FB23_BIT_WIDTH, value as u32); }

	const FB24_BIT_OFFSET: u8 = 24;
	const FB24_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 24)
	pub fn get_fb24() -> u8 { ::read(REGISTER_ADDRESS, FB24_BIT_OFFSET, FB24_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 24)
	pub fn set_fb24(value: u8) { ::write(REGISTER_ADDRESS, FB24_BIT_OFFSET, FB24_BIT_WIDTH, value as u32); }

	const FB25_BIT_OFFSET: u8 = 25;
	const FB25_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 25)
	pub fn get_fb25() -> u8 { ::read(REGISTER_ADDRESS, FB25_BIT_OFFSET, FB25_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 25)
	pub fn set_fb25(value: u8) { ::write(REGISTER_ADDRESS, FB25_BIT_OFFSET, FB25_BIT_WIDTH, value as u32); }

	const FB26_BIT_OFFSET: u8 = 26;
	const FB26_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 26)
	pub fn get_fb26() -> u8 { ::read(REGISTER_ADDRESS, FB26_BIT_OFFSET, FB26_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 26)
	pub fn set_fb26(value: u8) { ::write(REGISTER_ADDRESS, FB26_BIT_OFFSET, FB26_BIT_WIDTH, value as u32); }

	const FB27_BIT_OFFSET: u8 = 27;
	const FB27_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 27)
	pub fn get_fb27() -> u8 { ::read(REGISTER_ADDRESS, FB27_BIT_OFFSET, FB27_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 27)
	pub fn set_fb27(value: u8) { ::write(REGISTER_ADDRESS, FB27_BIT_OFFSET, FB27_BIT_WIDTH, value as u32); }

	const FB28_BIT_OFFSET: u8 = 28;
	const FB28_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 28)
	pub fn get_fb28() -> u8 { ::read(REGISTER_ADDRESS, FB28_BIT_OFFSET, FB28_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 28)
	pub fn set_fb28(value: u8) { ::write(REGISTER_ADDRESS, FB28_BIT_OFFSET, FB28_BIT_WIDTH, value as u32); }

	const FB29_BIT_OFFSET: u8 = 29;
	const FB29_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 29)
	pub fn get_fb29() -> u8 { ::read(REGISTER_ADDRESS, FB29_BIT_OFFSET, FB29_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 29)
	pub fn set_fb29(value: u8) { ::write(REGISTER_ADDRESS, FB29_BIT_OFFSET, FB29_BIT_WIDTH, value as u32); }

	const FB30_BIT_OFFSET: u8 = 30;
	const FB30_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 30)
	pub fn get_fb30() -> u8 { ::read(REGISTER_ADDRESS, FB30_BIT_OFFSET, FB30_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 30)
	pub fn set_fb30(value: u8) { ::write(REGISTER_ADDRESS, FB30_BIT_OFFSET, FB30_BIT_WIDTH, value as u32); }

	const FB31_BIT_OFFSET: u8 = 31;
	const FB31_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 31)
	pub fn get_fb31() -> u8 { ::read(REGISTER_ADDRESS, FB31_BIT_OFFSET, FB31_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 31)
	pub fn set_fb31(value: u8) { ::write(REGISTER_ADDRESS, FB31_BIT_OFFSET, FB31_BIT_WIDTH, value as u32); }
}
/// Filter bank 2 register 2
/// Size: 0x20 bits
pub mod f2r2 {
	const REGISTER_ADDRESS_OFFSET: u32 = 0x254;
	const REGISTER_ADDRESS: u32 = super::BASE_ADDRESS + REGISTER_ADDRESS_OFFSET;

	const FB0_BIT_OFFSET: u8 = 0;
	const FB0_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 0)
	pub fn get_fb0() -> u8 { ::read(REGISTER_ADDRESS, FB0_BIT_OFFSET, FB0_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 0)
	pub fn set_fb0(value: u8) { ::write(REGISTER_ADDRESS, FB0_BIT_OFFSET, FB0_BIT_WIDTH, value as u32); }

	const FB1_BIT_OFFSET: u8 = 1;
	const FB1_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 1)
	pub fn get_fb1() -> u8 { ::read(REGISTER_ADDRESS, FB1_BIT_OFFSET, FB1_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 1)
	pub fn set_fb1(value: u8) { ::write(REGISTER_ADDRESS, FB1_BIT_OFFSET, FB1_BIT_WIDTH, value as u32); }

	const FB2_BIT_OFFSET: u8 = 2;
	const FB2_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 2)
	pub fn get_fb2() -> u8 { ::read(REGISTER_ADDRESS, FB2_BIT_OFFSET, FB2_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 2)
	pub fn set_fb2(value: u8) { ::write(REGISTER_ADDRESS, FB2_BIT_OFFSET, FB2_BIT_WIDTH, value as u32); }

	const FB3_BIT_OFFSET: u8 = 3;
	const FB3_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 3)
	pub fn get_fb3() -> u8 { ::read(REGISTER_ADDRESS, FB3_BIT_OFFSET, FB3_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 3)
	pub fn set_fb3(value: u8) { ::write(REGISTER_ADDRESS, FB3_BIT_OFFSET, FB3_BIT_WIDTH, value as u32); }

	const FB4_BIT_OFFSET: u8 = 4;
	const FB4_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 4)
	pub fn get_fb4() -> u8 { ::read(REGISTER_ADDRESS, FB4_BIT_OFFSET, FB4_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 4)
	pub fn set_fb4(value: u8) { ::write(REGISTER_ADDRESS, FB4_BIT_OFFSET, FB4_BIT_WIDTH, value as u32); }

	const FB5_BIT_OFFSET: u8 = 5;
	const FB5_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 5)
	pub fn get_fb5() -> u8 { ::read(REGISTER_ADDRESS, FB5_BIT_OFFSET, FB5_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 5)
	pub fn set_fb5(value: u8) { ::write(REGISTER_ADDRESS, FB5_BIT_OFFSET, FB5_BIT_WIDTH, value as u32); }

	const FB6_BIT_OFFSET: u8 = 6;
	const FB6_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 6)
	pub fn get_fb6() -> u8 { ::read(REGISTER_ADDRESS, FB6_BIT_OFFSET, FB6_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 6)
	pub fn set_fb6(value: u8) { ::write(REGISTER_ADDRESS, FB6_BIT_OFFSET, FB6_BIT_WIDTH, value as u32); }

	const FB7_BIT_OFFSET: u8 = 7;
	const FB7_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 7)
	pub fn get_fb7() -> u8 { ::read(REGISTER_ADDRESS, FB7_BIT_OFFSET, FB7_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 7)
	pub fn set_fb7(value: u8) { ::write(REGISTER_ADDRESS, FB7_BIT_OFFSET, FB7_BIT_WIDTH, value as u32); }

	const FB8_BIT_OFFSET: u8 = 8;
	const FB8_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 8)
	pub fn get_fb8() -> u8 { ::read(REGISTER_ADDRESS, FB8_BIT_OFFSET, FB8_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 8)
	pub fn set_fb8(value: u8) { ::write(REGISTER_ADDRESS, FB8_BIT_OFFSET, FB8_BIT_WIDTH, value as u32); }

	const FB9_BIT_OFFSET: u8 = 9;
	const FB9_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 9)
	pub fn get_fb9() -> u8 { ::read(REGISTER_ADDRESS, FB9_BIT_OFFSET, FB9_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 9)
	pub fn set_fb9(value: u8) { ::write(REGISTER_ADDRESS, FB9_BIT_OFFSET, FB9_BIT_WIDTH, value as u32); }

	const FB10_BIT_OFFSET: u8 = 10;
	const FB10_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 10)
	pub fn get_fb10() -> u8 { ::read(REGISTER_ADDRESS, FB10_BIT_OFFSET, FB10_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 10)
	pub fn set_fb10(value: u8) { ::write(REGISTER_ADDRESS, FB10_BIT_OFFSET, FB10_BIT_WIDTH, value as u32); }

	const FB11_BIT_OFFSET: u8 = 11;
	const FB11_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 11)
	pub fn get_fb11() -> u8 { ::read(REGISTER_ADDRESS, FB11_BIT_OFFSET, FB11_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 11)
	pub fn set_fb11(value: u8) { ::write(REGISTER_ADDRESS, FB11_BIT_OFFSET, FB11_BIT_WIDTH, value as u32); }

	const FB12_BIT_OFFSET: u8 = 12;
	const FB12_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 12)
	pub fn get_fb12() -> u8 { ::read(REGISTER_ADDRESS, FB12_BIT_OFFSET, FB12_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 12)
	pub fn set_fb12(value: u8) { ::write(REGISTER_ADDRESS, FB12_BIT_OFFSET, FB12_BIT_WIDTH, value as u32); }

	const FB13_BIT_OFFSET: u8 = 13;
	const FB13_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 13)
	pub fn get_fb13() -> u8 { ::read(REGISTER_ADDRESS, FB13_BIT_OFFSET, FB13_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 13)
	pub fn set_fb13(value: u8) { ::write(REGISTER_ADDRESS, FB13_BIT_OFFSET, FB13_BIT_WIDTH, value as u32); }

	const FB14_BIT_OFFSET: u8 = 14;
	const FB14_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 14)
	pub fn get_fb14() -> u8 { ::read(REGISTER_ADDRESS, FB14_BIT_OFFSET, FB14_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 14)
	pub fn set_fb14(value: u8) { ::write(REGISTER_ADDRESS, FB14_BIT_OFFSET, FB14_BIT_WIDTH, value as u32); }

	const FB15_BIT_OFFSET: u8 = 15;
	const FB15_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 15)
	pub fn get_fb15() -> u8 { ::read(REGISTER_ADDRESS, FB15_BIT_OFFSET, FB15_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 15)
	pub fn set_fb15(value: u8) { ::write(REGISTER_ADDRESS, FB15_BIT_OFFSET, FB15_BIT_WIDTH, value as u32); }

	const FB16_BIT_OFFSET: u8 = 16;
	const FB16_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 16)
	pub fn get_fb16() -> u8 { ::read(REGISTER_ADDRESS, FB16_BIT_OFFSET, FB16_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 16)
	pub fn set_fb16(value: u8) { ::write(REGISTER_ADDRESS, FB16_BIT_OFFSET, FB16_BIT_WIDTH, value as u32); }

	const FB17_BIT_OFFSET: u8 = 17;
	const FB17_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 17)
	pub fn get_fb17() -> u8 { ::read(REGISTER_ADDRESS, FB17_BIT_OFFSET, FB17_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 17)
	pub fn set_fb17(value: u8) { ::write(REGISTER_ADDRESS, FB17_BIT_OFFSET, FB17_BIT_WIDTH, value as u32); }

	const FB18_BIT_OFFSET: u8 = 18;
	const FB18_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 18)
	pub fn get_fb18() -> u8 { ::read(REGISTER_ADDRESS, FB18_BIT_OFFSET, FB18_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 18)
	pub fn set_fb18(value: u8) { ::write(REGISTER_ADDRESS, FB18_BIT_OFFSET, FB18_BIT_WIDTH, value as u32); }

	const FB19_BIT_OFFSET: u8 = 19;
	const FB19_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 19)
	pub fn get_fb19() -> u8 { ::read(REGISTER_ADDRESS, FB19_BIT_OFFSET, FB19_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 19)
	pub fn set_fb19(value: u8) { ::write(REGISTER_ADDRESS, FB19_BIT_OFFSET, FB19_BIT_WIDTH, value as u32); }

	const FB20_BIT_OFFSET: u8 = 20;
	const FB20_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 20)
	pub fn get_fb20() -> u8 { ::read(REGISTER_ADDRESS, FB20_BIT_OFFSET, FB20_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 20)
	pub fn set_fb20(value: u8) { ::write(REGISTER_ADDRESS, FB20_BIT_OFFSET, FB20_BIT_WIDTH, value as u32); }

	const FB21_BIT_OFFSET: u8 = 21;
	const FB21_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 21)
	pub fn get_fb21() -> u8 { ::read(REGISTER_ADDRESS, FB21_BIT_OFFSET, FB21_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 21)
	pub fn set_fb21(value: u8) { ::write(REGISTER_ADDRESS, FB21_BIT_OFFSET, FB21_BIT_WIDTH, value as u32); }

	const FB22_BIT_OFFSET: u8 = 22;
	const FB22_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 22)
	pub fn get_fb22() -> u8 { ::read(REGISTER_ADDRESS, FB22_BIT_OFFSET, FB22_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 22)
	pub fn set_fb22(value: u8) { ::write(REGISTER_ADDRESS, FB22_BIT_OFFSET, FB22_BIT_WIDTH, value as u32); }

	const FB23_BIT_OFFSET: u8 = 23;
	const FB23_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 23)
	pub fn get_fb23() -> u8 { ::read(REGISTER_ADDRESS, FB23_BIT_OFFSET, FB23_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 23)
	pub fn set_fb23(value: u8) { ::write(REGISTER_ADDRESS, FB23_BIT_OFFSET, FB23_BIT_WIDTH, value as u32); }

	const FB24_BIT_OFFSET: u8 = 24;
	const FB24_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 24)
	pub fn get_fb24() -> u8 { ::read(REGISTER_ADDRESS, FB24_BIT_OFFSET, FB24_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 24)
	pub fn set_fb24(value: u8) { ::write(REGISTER_ADDRESS, FB24_BIT_OFFSET, FB24_BIT_WIDTH, value as u32); }

	const FB25_BIT_OFFSET: u8 = 25;
	const FB25_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 25)
	pub fn get_fb25() -> u8 { ::read(REGISTER_ADDRESS, FB25_BIT_OFFSET, FB25_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 25)
	pub fn set_fb25(value: u8) { ::write(REGISTER_ADDRESS, FB25_BIT_OFFSET, FB25_BIT_WIDTH, value as u32); }

	const FB26_BIT_OFFSET: u8 = 26;
	const FB26_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 26)
	pub fn get_fb26() -> u8 { ::read(REGISTER_ADDRESS, FB26_BIT_OFFSET, FB26_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 26)
	pub fn set_fb26(value: u8) { ::write(REGISTER_ADDRESS, FB26_BIT_OFFSET, FB26_BIT_WIDTH, value as u32); }

	const FB27_BIT_OFFSET: u8 = 27;
	const FB27_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 27)
	pub fn get_fb27() -> u8 { ::read(REGISTER_ADDRESS, FB27_BIT_OFFSET, FB27_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 27)
	pub fn set_fb27(value: u8) { ::write(REGISTER_ADDRESS, FB27_BIT_OFFSET, FB27_BIT_WIDTH, value as u32); }

	const FB28_BIT_OFFSET: u8 = 28;
	const FB28_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 28)
	pub fn get_fb28() -> u8 { ::read(REGISTER_ADDRESS, FB28_BIT_OFFSET, FB28_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 28)
	pub fn set_fb28(value: u8) { ::write(REGISTER_ADDRESS, FB28_BIT_OFFSET, FB28_BIT_WIDTH, value as u32); }

	const FB29_BIT_OFFSET: u8 = 29;
	const FB29_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 29)
	pub fn get_fb29() -> u8 { ::read(REGISTER_ADDRESS, FB29_BIT_OFFSET, FB29_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 29)
	pub fn set_fb29(value: u8) { ::write(REGISTER_ADDRESS, FB29_BIT_OFFSET, FB29_BIT_WIDTH, value as u32); }

	const FB30_BIT_OFFSET: u8 = 30;
	const FB30_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 30)
	pub fn get_fb30() -> u8 { ::read(REGISTER_ADDRESS, FB30_BIT_OFFSET, FB30_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 30)
	pub fn set_fb30(value: u8) { ::write(REGISTER_ADDRESS, FB30_BIT_OFFSET, FB30_BIT_WIDTH, value as u32); }

	const FB31_BIT_OFFSET: u8 = 31;
	const FB31_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 31)
	pub fn get_fb31() -> u8 { ::read(REGISTER_ADDRESS, FB31_BIT_OFFSET, FB31_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 31)
	pub fn set_fb31(value: u8) { ::write(REGISTER_ADDRESS, FB31_BIT_OFFSET, FB31_BIT_WIDTH, value as u32); }
}
/// Filter bank 3 register 1
/// Size: 0x20 bits
pub mod f3r1 {
	const REGISTER_ADDRESS_OFFSET: u32 = 0x258;
	const REGISTER_ADDRESS: u32 = super::BASE_ADDRESS + REGISTER_ADDRESS_OFFSET;

	const FB0_BIT_OFFSET: u8 = 0;
	const FB0_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 0)
	pub fn get_fb0() -> u8 { ::read(REGISTER_ADDRESS, FB0_BIT_OFFSET, FB0_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 0)
	pub fn set_fb0(value: u8) { ::write(REGISTER_ADDRESS, FB0_BIT_OFFSET, FB0_BIT_WIDTH, value as u32); }

	const FB1_BIT_OFFSET: u8 = 1;
	const FB1_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 1)
	pub fn get_fb1() -> u8 { ::read(REGISTER_ADDRESS, FB1_BIT_OFFSET, FB1_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 1)
	pub fn set_fb1(value: u8) { ::write(REGISTER_ADDRESS, FB1_BIT_OFFSET, FB1_BIT_WIDTH, value as u32); }

	const FB2_BIT_OFFSET: u8 = 2;
	const FB2_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 2)
	pub fn get_fb2() -> u8 { ::read(REGISTER_ADDRESS, FB2_BIT_OFFSET, FB2_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 2)
	pub fn set_fb2(value: u8) { ::write(REGISTER_ADDRESS, FB2_BIT_OFFSET, FB2_BIT_WIDTH, value as u32); }

	const FB3_BIT_OFFSET: u8 = 3;
	const FB3_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 3)
	pub fn get_fb3() -> u8 { ::read(REGISTER_ADDRESS, FB3_BIT_OFFSET, FB3_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 3)
	pub fn set_fb3(value: u8) { ::write(REGISTER_ADDRESS, FB3_BIT_OFFSET, FB3_BIT_WIDTH, value as u32); }

	const FB4_BIT_OFFSET: u8 = 4;
	const FB4_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 4)
	pub fn get_fb4() -> u8 { ::read(REGISTER_ADDRESS, FB4_BIT_OFFSET, FB4_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 4)
	pub fn set_fb4(value: u8) { ::write(REGISTER_ADDRESS, FB4_BIT_OFFSET, FB4_BIT_WIDTH, value as u32); }

	const FB5_BIT_OFFSET: u8 = 5;
	const FB5_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 5)
	pub fn get_fb5() -> u8 { ::read(REGISTER_ADDRESS, FB5_BIT_OFFSET, FB5_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 5)
	pub fn set_fb5(value: u8) { ::write(REGISTER_ADDRESS, FB5_BIT_OFFSET, FB5_BIT_WIDTH, value as u32); }

	const FB6_BIT_OFFSET: u8 = 6;
	const FB6_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 6)
	pub fn get_fb6() -> u8 { ::read(REGISTER_ADDRESS, FB6_BIT_OFFSET, FB6_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 6)
	pub fn set_fb6(value: u8) { ::write(REGISTER_ADDRESS, FB6_BIT_OFFSET, FB6_BIT_WIDTH, value as u32); }

	const FB7_BIT_OFFSET: u8 = 7;
	const FB7_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 7)
	pub fn get_fb7() -> u8 { ::read(REGISTER_ADDRESS, FB7_BIT_OFFSET, FB7_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 7)
	pub fn set_fb7(value: u8) { ::write(REGISTER_ADDRESS, FB7_BIT_OFFSET, FB7_BIT_WIDTH, value as u32); }

	const FB8_BIT_OFFSET: u8 = 8;
	const FB8_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 8)
	pub fn get_fb8() -> u8 { ::read(REGISTER_ADDRESS, FB8_BIT_OFFSET, FB8_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 8)
	pub fn set_fb8(value: u8) { ::write(REGISTER_ADDRESS, FB8_BIT_OFFSET, FB8_BIT_WIDTH, value as u32); }

	const FB9_BIT_OFFSET: u8 = 9;
	const FB9_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 9)
	pub fn get_fb9() -> u8 { ::read(REGISTER_ADDRESS, FB9_BIT_OFFSET, FB9_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 9)
	pub fn set_fb9(value: u8) { ::write(REGISTER_ADDRESS, FB9_BIT_OFFSET, FB9_BIT_WIDTH, value as u32); }

	const FB10_BIT_OFFSET: u8 = 10;
	const FB10_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 10)
	pub fn get_fb10() -> u8 { ::read(REGISTER_ADDRESS, FB10_BIT_OFFSET, FB10_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 10)
	pub fn set_fb10(value: u8) { ::write(REGISTER_ADDRESS, FB10_BIT_OFFSET, FB10_BIT_WIDTH, value as u32); }

	const FB11_BIT_OFFSET: u8 = 11;
	const FB11_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 11)
	pub fn get_fb11() -> u8 { ::read(REGISTER_ADDRESS, FB11_BIT_OFFSET, FB11_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 11)
	pub fn set_fb11(value: u8) { ::write(REGISTER_ADDRESS, FB11_BIT_OFFSET, FB11_BIT_WIDTH, value as u32); }

	const FB12_BIT_OFFSET: u8 = 12;
	const FB12_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 12)
	pub fn get_fb12() -> u8 { ::read(REGISTER_ADDRESS, FB12_BIT_OFFSET, FB12_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 12)
	pub fn set_fb12(value: u8) { ::write(REGISTER_ADDRESS, FB12_BIT_OFFSET, FB12_BIT_WIDTH, value as u32); }

	const FB13_BIT_OFFSET: u8 = 13;
	const FB13_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 13)
	pub fn get_fb13() -> u8 { ::read(REGISTER_ADDRESS, FB13_BIT_OFFSET, FB13_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 13)
	pub fn set_fb13(value: u8) { ::write(REGISTER_ADDRESS, FB13_BIT_OFFSET, FB13_BIT_WIDTH, value as u32); }

	const FB14_BIT_OFFSET: u8 = 14;
	const FB14_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 14)
	pub fn get_fb14() -> u8 { ::read(REGISTER_ADDRESS, FB14_BIT_OFFSET, FB14_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 14)
	pub fn set_fb14(value: u8) { ::write(REGISTER_ADDRESS, FB14_BIT_OFFSET, FB14_BIT_WIDTH, value as u32); }

	const FB15_BIT_OFFSET: u8 = 15;
	const FB15_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 15)
	pub fn get_fb15() -> u8 { ::read(REGISTER_ADDRESS, FB15_BIT_OFFSET, FB15_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 15)
	pub fn set_fb15(value: u8) { ::write(REGISTER_ADDRESS, FB15_BIT_OFFSET, FB15_BIT_WIDTH, value as u32); }

	const FB16_BIT_OFFSET: u8 = 16;
	const FB16_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 16)
	pub fn get_fb16() -> u8 { ::read(REGISTER_ADDRESS, FB16_BIT_OFFSET, FB16_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 16)
	pub fn set_fb16(value: u8) { ::write(REGISTER_ADDRESS, FB16_BIT_OFFSET, FB16_BIT_WIDTH, value as u32); }

	const FB17_BIT_OFFSET: u8 = 17;
	const FB17_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 17)
	pub fn get_fb17() -> u8 { ::read(REGISTER_ADDRESS, FB17_BIT_OFFSET, FB17_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 17)
	pub fn set_fb17(value: u8) { ::write(REGISTER_ADDRESS, FB17_BIT_OFFSET, FB17_BIT_WIDTH, value as u32); }

	const FB18_BIT_OFFSET: u8 = 18;
	const FB18_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 18)
	pub fn get_fb18() -> u8 { ::read(REGISTER_ADDRESS, FB18_BIT_OFFSET, FB18_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 18)
	pub fn set_fb18(value: u8) { ::write(REGISTER_ADDRESS, FB18_BIT_OFFSET, FB18_BIT_WIDTH, value as u32); }

	const FB19_BIT_OFFSET: u8 = 19;
	const FB19_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 19)
	pub fn get_fb19() -> u8 { ::read(REGISTER_ADDRESS, FB19_BIT_OFFSET, FB19_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 19)
	pub fn set_fb19(value: u8) { ::write(REGISTER_ADDRESS, FB19_BIT_OFFSET, FB19_BIT_WIDTH, value as u32); }

	const FB20_BIT_OFFSET: u8 = 20;
	const FB20_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 20)
	pub fn get_fb20() -> u8 { ::read(REGISTER_ADDRESS, FB20_BIT_OFFSET, FB20_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 20)
	pub fn set_fb20(value: u8) { ::write(REGISTER_ADDRESS, FB20_BIT_OFFSET, FB20_BIT_WIDTH, value as u32); }

	const FB21_BIT_OFFSET: u8 = 21;
	const FB21_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 21)
	pub fn get_fb21() -> u8 { ::read(REGISTER_ADDRESS, FB21_BIT_OFFSET, FB21_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 21)
	pub fn set_fb21(value: u8) { ::write(REGISTER_ADDRESS, FB21_BIT_OFFSET, FB21_BIT_WIDTH, value as u32); }

	const FB22_BIT_OFFSET: u8 = 22;
	const FB22_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 22)
	pub fn get_fb22() -> u8 { ::read(REGISTER_ADDRESS, FB22_BIT_OFFSET, FB22_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 22)
	pub fn set_fb22(value: u8) { ::write(REGISTER_ADDRESS, FB22_BIT_OFFSET, FB22_BIT_WIDTH, value as u32); }

	const FB23_BIT_OFFSET: u8 = 23;
	const FB23_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 23)
	pub fn get_fb23() -> u8 { ::read(REGISTER_ADDRESS, FB23_BIT_OFFSET, FB23_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 23)
	pub fn set_fb23(value: u8) { ::write(REGISTER_ADDRESS, FB23_BIT_OFFSET, FB23_BIT_WIDTH, value as u32); }

	const FB24_BIT_OFFSET: u8 = 24;
	const FB24_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 24)
	pub fn get_fb24() -> u8 { ::read(REGISTER_ADDRESS, FB24_BIT_OFFSET, FB24_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 24)
	pub fn set_fb24(value: u8) { ::write(REGISTER_ADDRESS, FB24_BIT_OFFSET, FB24_BIT_WIDTH, value as u32); }

	const FB25_BIT_OFFSET: u8 = 25;
	const FB25_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 25)
	pub fn get_fb25() -> u8 { ::read(REGISTER_ADDRESS, FB25_BIT_OFFSET, FB25_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 25)
	pub fn set_fb25(value: u8) { ::write(REGISTER_ADDRESS, FB25_BIT_OFFSET, FB25_BIT_WIDTH, value as u32); }

	const FB26_BIT_OFFSET: u8 = 26;
	const FB26_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 26)
	pub fn get_fb26() -> u8 { ::read(REGISTER_ADDRESS, FB26_BIT_OFFSET, FB26_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 26)
	pub fn set_fb26(value: u8) { ::write(REGISTER_ADDRESS, FB26_BIT_OFFSET, FB26_BIT_WIDTH, value as u32); }

	const FB27_BIT_OFFSET: u8 = 27;
	const FB27_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 27)
	pub fn get_fb27() -> u8 { ::read(REGISTER_ADDRESS, FB27_BIT_OFFSET, FB27_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 27)
	pub fn set_fb27(value: u8) { ::write(REGISTER_ADDRESS, FB27_BIT_OFFSET, FB27_BIT_WIDTH, value as u32); }

	const FB28_BIT_OFFSET: u8 = 28;
	const FB28_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 28)
	pub fn get_fb28() -> u8 { ::read(REGISTER_ADDRESS, FB28_BIT_OFFSET, FB28_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 28)
	pub fn set_fb28(value: u8) { ::write(REGISTER_ADDRESS, FB28_BIT_OFFSET, FB28_BIT_WIDTH, value as u32); }

	const FB29_BIT_OFFSET: u8 = 29;
	const FB29_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 29)
	pub fn get_fb29() -> u8 { ::read(REGISTER_ADDRESS, FB29_BIT_OFFSET, FB29_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 29)
	pub fn set_fb29(value: u8) { ::write(REGISTER_ADDRESS, FB29_BIT_OFFSET, FB29_BIT_WIDTH, value as u32); }

	const FB30_BIT_OFFSET: u8 = 30;
	const FB30_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 30)
	pub fn get_fb30() -> u8 { ::read(REGISTER_ADDRESS, FB30_BIT_OFFSET, FB30_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 30)
	pub fn set_fb30(value: u8) { ::write(REGISTER_ADDRESS, FB30_BIT_OFFSET, FB30_BIT_WIDTH, value as u32); }

	const FB31_BIT_OFFSET: u8 = 31;
	const FB31_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 31)
	pub fn get_fb31() -> u8 { ::read(REGISTER_ADDRESS, FB31_BIT_OFFSET, FB31_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 31)
	pub fn set_fb31(value: u8) { ::write(REGISTER_ADDRESS, FB31_BIT_OFFSET, FB31_BIT_WIDTH, value as u32); }
}
/// Filter bank 3 register 2
/// Size: 0x20 bits
pub mod f3r2 {
	const REGISTER_ADDRESS_OFFSET: u32 = 0x25C;
	const REGISTER_ADDRESS: u32 = super::BASE_ADDRESS + REGISTER_ADDRESS_OFFSET;

	const FB0_BIT_OFFSET: u8 = 0;
	const FB0_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 0)
	pub fn get_fb0() -> u8 { ::read(REGISTER_ADDRESS, FB0_BIT_OFFSET, FB0_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 0)
	pub fn set_fb0(value: u8) { ::write(REGISTER_ADDRESS, FB0_BIT_OFFSET, FB0_BIT_WIDTH, value as u32); }

	const FB1_BIT_OFFSET: u8 = 1;
	const FB1_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 1)
	pub fn get_fb1() -> u8 { ::read(REGISTER_ADDRESS, FB1_BIT_OFFSET, FB1_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 1)
	pub fn set_fb1(value: u8) { ::write(REGISTER_ADDRESS, FB1_BIT_OFFSET, FB1_BIT_WIDTH, value as u32); }

	const FB2_BIT_OFFSET: u8 = 2;
	const FB2_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 2)
	pub fn get_fb2() -> u8 { ::read(REGISTER_ADDRESS, FB2_BIT_OFFSET, FB2_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 2)
	pub fn set_fb2(value: u8) { ::write(REGISTER_ADDRESS, FB2_BIT_OFFSET, FB2_BIT_WIDTH, value as u32); }

	const FB3_BIT_OFFSET: u8 = 3;
	const FB3_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 3)
	pub fn get_fb3() -> u8 { ::read(REGISTER_ADDRESS, FB3_BIT_OFFSET, FB3_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 3)
	pub fn set_fb3(value: u8) { ::write(REGISTER_ADDRESS, FB3_BIT_OFFSET, FB3_BIT_WIDTH, value as u32); }

	const FB4_BIT_OFFSET: u8 = 4;
	const FB4_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 4)
	pub fn get_fb4() -> u8 { ::read(REGISTER_ADDRESS, FB4_BIT_OFFSET, FB4_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 4)
	pub fn set_fb4(value: u8) { ::write(REGISTER_ADDRESS, FB4_BIT_OFFSET, FB4_BIT_WIDTH, value as u32); }

	const FB5_BIT_OFFSET: u8 = 5;
	const FB5_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 5)
	pub fn get_fb5() -> u8 { ::read(REGISTER_ADDRESS, FB5_BIT_OFFSET, FB5_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 5)
	pub fn set_fb5(value: u8) { ::write(REGISTER_ADDRESS, FB5_BIT_OFFSET, FB5_BIT_WIDTH, value as u32); }

	const FB6_BIT_OFFSET: u8 = 6;
	const FB6_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 6)
	pub fn get_fb6() -> u8 { ::read(REGISTER_ADDRESS, FB6_BIT_OFFSET, FB6_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 6)
	pub fn set_fb6(value: u8) { ::write(REGISTER_ADDRESS, FB6_BIT_OFFSET, FB6_BIT_WIDTH, value as u32); }

	const FB7_BIT_OFFSET: u8 = 7;
	const FB7_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 7)
	pub fn get_fb7() -> u8 { ::read(REGISTER_ADDRESS, FB7_BIT_OFFSET, FB7_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 7)
	pub fn set_fb7(value: u8) { ::write(REGISTER_ADDRESS, FB7_BIT_OFFSET, FB7_BIT_WIDTH, value as u32); }

	const FB8_BIT_OFFSET: u8 = 8;
	const FB8_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 8)
	pub fn get_fb8() -> u8 { ::read(REGISTER_ADDRESS, FB8_BIT_OFFSET, FB8_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 8)
	pub fn set_fb8(value: u8) { ::write(REGISTER_ADDRESS, FB8_BIT_OFFSET, FB8_BIT_WIDTH, value as u32); }

	const FB9_BIT_OFFSET: u8 = 9;
	const FB9_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 9)
	pub fn get_fb9() -> u8 { ::read(REGISTER_ADDRESS, FB9_BIT_OFFSET, FB9_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 9)
	pub fn set_fb9(value: u8) { ::write(REGISTER_ADDRESS, FB9_BIT_OFFSET, FB9_BIT_WIDTH, value as u32); }

	const FB10_BIT_OFFSET: u8 = 10;
	const FB10_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 10)
	pub fn get_fb10() -> u8 { ::read(REGISTER_ADDRESS, FB10_BIT_OFFSET, FB10_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 10)
	pub fn set_fb10(value: u8) { ::write(REGISTER_ADDRESS, FB10_BIT_OFFSET, FB10_BIT_WIDTH, value as u32); }

	const FB11_BIT_OFFSET: u8 = 11;
	const FB11_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 11)
	pub fn get_fb11() -> u8 { ::read(REGISTER_ADDRESS, FB11_BIT_OFFSET, FB11_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 11)
	pub fn set_fb11(value: u8) { ::write(REGISTER_ADDRESS, FB11_BIT_OFFSET, FB11_BIT_WIDTH, value as u32); }

	const FB12_BIT_OFFSET: u8 = 12;
	const FB12_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 12)
	pub fn get_fb12() -> u8 { ::read(REGISTER_ADDRESS, FB12_BIT_OFFSET, FB12_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 12)
	pub fn set_fb12(value: u8) { ::write(REGISTER_ADDRESS, FB12_BIT_OFFSET, FB12_BIT_WIDTH, value as u32); }

	const FB13_BIT_OFFSET: u8 = 13;
	const FB13_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 13)
	pub fn get_fb13() -> u8 { ::read(REGISTER_ADDRESS, FB13_BIT_OFFSET, FB13_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 13)
	pub fn set_fb13(value: u8) { ::write(REGISTER_ADDRESS, FB13_BIT_OFFSET, FB13_BIT_WIDTH, value as u32); }

	const FB14_BIT_OFFSET: u8 = 14;
	const FB14_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 14)
	pub fn get_fb14() -> u8 { ::read(REGISTER_ADDRESS, FB14_BIT_OFFSET, FB14_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 14)
	pub fn set_fb14(value: u8) { ::write(REGISTER_ADDRESS, FB14_BIT_OFFSET, FB14_BIT_WIDTH, value as u32); }

	const FB15_BIT_OFFSET: u8 = 15;
	const FB15_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 15)
	pub fn get_fb15() -> u8 { ::read(REGISTER_ADDRESS, FB15_BIT_OFFSET, FB15_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 15)
	pub fn set_fb15(value: u8) { ::write(REGISTER_ADDRESS, FB15_BIT_OFFSET, FB15_BIT_WIDTH, value as u32); }

	const FB16_BIT_OFFSET: u8 = 16;
	const FB16_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 16)
	pub fn get_fb16() -> u8 { ::read(REGISTER_ADDRESS, FB16_BIT_OFFSET, FB16_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 16)
	pub fn set_fb16(value: u8) { ::write(REGISTER_ADDRESS, FB16_BIT_OFFSET, FB16_BIT_WIDTH, value as u32); }

	const FB17_BIT_OFFSET: u8 = 17;
	const FB17_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 17)
	pub fn get_fb17() -> u8 { ::read(REGISTER_ADDRESS, FB17_BIT_OFFSET, FB17_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 17)
	pub fn set_fb17(value: u8) { ::write(REGISTER_ADDRESS, FB17_BIT_OFFSET, FB17_BIT_WIDTH, value as u32); }

	const FB18_BIT_OFFSET: u8 = 18;
	const FB18_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 18)
	pub fn get_fb18() -> u8 { ::read(REGISTER_ADDRESS, FB18_BIT_OFFSET, FB18_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 18)
	pub fn set_fb18(value: u8) { ::write(REGISTER_ADDRESS, FB18_BIT_OFFSET, FB18_BIT_WIDTH, value as u32); }

	const FB19_BIT_OFFSET: u8 = 19;
	const FB19_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 19)
	pub fn get_fb19() -> u8 { ::read(REGISTER_ADDRESS, FB19_BIT_OFFSET, FB19_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 19)
	pub fn set_fb19(value: u8) { ::write(REGISTER_ADDRESS, FB19_BIT_OFFSET, FB19_BIT_WIDTH, value as u32); }

	const FB20_BIT_OFFSET: u8 = 20;
	const FB20_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 20)
	pub fn get_fb20() -> u8 { ::read(REGISTER_ADDRESS, FB20_BIT_OFFSET, FB20_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 20)
	pub fn set_fb20(value: u8) { ::write(REGISTER_ADDRESS, FB20_BIT_OFFSET, FB20_BIT_WIDTH, value as u32); }

	const FB21_BIT_OFFSET: u8 = 21;
	const FB21_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 21)
	pub fn get_fb21() -> u8 { ::read(REGISTER_ADDRESS, FB21_BIT_OFFSET, FB21_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 21)
	pub fn set_fb21(value: u8) { ::write(REGISTER_ADDRESS, FB21_BIT_OFFSET, FB21_BIT_WIDTH, value as u32); }

	const FB22_BIT_OFFSET: u8 = 22;
	const FB22_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 22)
	pub fn get_fb22() -> u8 { ::read(REGISTER_ADDRESS, FB22_BIT_OFFSET, FB22_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 22)
	pub fn set_fb22(value: u8) { ::write(REGISTER_ADDRESS, FB22_BIT_OFFSET, FB22_BIT_WIDTH, value as u32); }

	const FB23_BIT_OFFSET: u8 = 23;
	const FB23_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 23)
	pub fn get_fb23() -> u8 { ::read(REGISTER_ADDRESS, FB23_BIT_OFFSET, FB23_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 23)
	pub fn set_fb23(value: u8) { ::write(REGISTER_ADDRESS, FB23_BIT_OFFSET, FB23_BIT_WIDTH, value as u32); }

	const FB24_BIT_OFFSET: u8 = 24;
	const FB24_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 24)
	pub fn get_fb24() -> u8 { ::read(REGISTER_ADDRESS, FB24_BIT_OFFSET, FB24_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 24)
	pub fn set_fb24(value: u8) { ::write(REGISTER_ADDRESS, FB24_BIT_OFFSET, FB24_BIT_WIDTH, value as u32); }

	const FB25_BIT_OFFSET: u8 = 25;
	const FB25_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 25)
	pub fn get_fb25() -> u8 { ::read(REGISTER_ADDRESS, FB25_BIT_OFFSET, FB25_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 25)
	pub fn set_fb25(value: u8) { ::write(REGISTER_ADDRESS, FB25_BIT_OFFSET, FB25_BIT_WIDTH, value as u32); }

	const FB26_BIT_OFFSET: u8 = 26;
	const FB26_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 26)
	pub fn get_fb26() -> u8 { ::read(REGISTER_ADDRESS, FB26_BIT_OFFSET, FB26_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 26)
	pub fn set_fb26(value: u8) { ::write(REGISTER_ADDRESS, FB26_BIT_OFFSET, FB26_BIT_WIDTH, value as u32); }

	const FB27_BIT_OFFSET: u8 = 27;
	const FB27_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 27)
	pub fn get_fb27() -> u8 { ::read(REGISTER_ADDRESS, FB27_BIT_OFFSET, FB27_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 27)
	pub fn set_fb27(value: u8) { ::write(REGISTER_ADDRESS, FB27_BIT_OFFSET, FB27_BIT_WIDTH, value as u32); }

	const FB28_BIT_OFFSET: u8 = 28;
	const FB28_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 28)
	pub fn get_fb28() -> u8 { ::read(REGISTER_ADDRESS, FB28_BIT_OFFSET, FB28_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 28)
	pub fn set_fb28(value: u8) { ::write(REGISTER_ADDRESS, FB28_BIT_OFFSET, FB28_BIT_WIDTH, value as u32); }

	const FB29_BIT_OFFSET: u8 = 29;
	const FB29_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 29)
	pub fn get_fb29() -> u8 { ::read(REGISTER_ADDRESS, FB29_BIT_OFFSET, FB29_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 29)
	pub fn set_fb29(value: u8) { ::write(REGISTER_ADDRESS, FB29_BIT_OFFSET, FB29_BIT_WIDTH, value as u32); }

	const FB30_BIT_OFFSET: u8 = 30;
	const FB30_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 30)
	pub fn get_fb30() -> u8 { ::read(REGISTER_ADDRESS, FB30_BIT_OFFSET, FB30_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 30)
	pub fn set_fb30(value: u8) { ::write(REGISTER_ADDRESS, FB30_BIT_OFFSET, FB30_BIT_WIDTH, value as u32); }

	const FB31_BIT_OFFSET: u8 = 31;
	const FB31_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 31)
	pub fn get_fb31() -> u8 { ::read(REGISTER_ADDRESS, FB31_BIT_OFFSET, FB31_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 31)
	pub fn set_fb31(value: u8) { ::write(REGISTER_ADDRESS, FB31_BIT_OFFSET, FB31_BIT_WIDTH, value as u32); }
}
/// Filter bank 4 register 1
/// Size: 0x20 bits
pub mod f4r1 {
	const REGISTER_ADDRESS_OFFSET: u32 = 0x260;
	const REGISTER_ADDRESS: u32 = super::BASE_ADDRESS + REGISTER_ADDRESS_OFFSET;

	const FB0_BIT_OFFSET: u8 = 0;
	const FB0_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 0)
	pub fn get_fb0() -> u8 { ::read(REGISTER_ADDRESS, FB0_BIT_OFFSET, FB0_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 0)
	pub fn set_fb0(value: u8) { ::write(REGISTER_ADDRESS, FB0_BIT_OFFSET, FB0_BIT_WIDTH, value as u32); }

	const FB1_BIT_OFFSET: u8 = 1;
	const FB1_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 1)
	pub fn get_fb1() -> u8 { ::read(REGISTER_ADDRESS, FB1_BIT_OFFSET, FB1_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 1)
	pub fn set_fb1(value: u8) { ::write(REGISTER_ADDRESS, FB1_BIT_OFFSET, FB1_BIT_WIDTH, value as u32); }

	const FB2_BIT_OFFSET: u8 = 2;
	const FB2_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 2)
	pub fn get_fb2() -> u8 { ::read(REGISTER_ADDRESS, FB2_BIT_OFFSET, FB2_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 2)
	pub fn set_fb2(value: u8) { ::write(REGISTER_ADDRESS, FB2_BIT_OFFSET, FB2_BIT_WIDTH, value as u32); }

	const FB3_BIT_OFFSET: u8 = 3;
	const FB3_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 3)
	pub fn get_fb3() -> u8 { ::read(REGISTER_ADDRESS, FB3_BIT_OFFSET, FB3_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 3)
	pub fn set_fb3(value: u8) { ::write(REGISTER_ADDRESS, FB3_BIT_OFFSET, FB3_BIT_WIDTH, value as u32); }

	const FB4_BIT_OFFSET: u8 = 4;
	const FB4_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 4)
	pub fn get_fb4() -> u8 { ::read(REGISTER_ADDRESS, FB4_BIT_OFFSET, FB4_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 4)
	pub fn set_fb4(value: u8) { ::write(REGISTER_ADDRESS, FB4_BIT_OFFSET, FB4_BIT_WIDTH, value as u32); }

	const FB5_BIT_OFFSET: u8 = 5;
	const FB5_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 5)
	pub fn get_fb5() -> u8 { ::read(REGISTER_ADDRESS, FB5_BIT_OFFSET, FB5_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 5)
	pub fn set_fb5(value: u8) { ::write(REGISTER_ADDRESS, FB5_BIT_OFFSET, FB5_BIT_WIDTH, value as u32); }

	const FB6_BIT_OFFSET: u8 = 6;
	const FB6_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 6)
	pub fn get_fb6() -> u8 { ::read(REGISTER_ADDRESS, FB6_BIT_OFFSET, FB6_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 6)
	pub fn set_fb6(value: u8) { ::write(REGISTER_ADDRESS, FB6_BIT_OFFSET, FB6_BIT_WIDTH, value as u32); }

	const FB7_BIT_OFFSET: u8 = 7;
	const FB7_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 7)
	pub fn get_fb7() -> u8 { ::read(REGISTER_ADDRESS, FB7_BIT_OFFSET, FB7_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 7)
	pub fn set_fb7(value: u8) { ::write(REGISTER_ADDRESS, FB7_BIT_OFFSET, FB7_BIT_WIDTH, value as u32); }

	const FB8_BIT_OFFSET: u8 = 8;
	const FB8_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 8)
	pub fn get_fb8() -> u8 { ::read(REGISTER_ADDRESS, FB8_BIT_OFFSET, FB8_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 8)
	pub fn set_fb8(value: u8) { ::write(REGISTER_ADDRESS, FB8_BIT_OFFSET, FB8_BIT_WIDTH, value as u32); }

	const FB9_BIT_OFFSET: u8 = 9;
	const FB9_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 9)
	pub fn get_fb9() -> u8 { ::read(REGISTER_ADDRESS, FB9_BIT_OFFSET, FB9_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 9)
	pub fn set_fb9(value: u8) { ::write(REGISTER_ADDRESS, FB9_BIT_OFFSET, FB9_BIT_WIDTH, value as u32); }

	const FB10_BIT_OFFSET: u8 = 10;
	const FB10_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 10)
	pub fn get_fb10() -> u8 { ::read(REGISTER_ADDRESS, FB10_BIT_OFFSET, FB10_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 10)
	pub fn set_fb10(value: u8) { ::write(REGISTER_ADDRESS, FB10_BIT_OFFSET, FB10_BIT_WIDTH, value as u32); }

	const FB11_BIT_OFFSET: u8 = 11;
	const FB11_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 11)
	pub fn get_fb11() -> u8 { ::read(REGISTER_ADDRESS, FB11_BIT_OFFSET, FB11_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 11)
	pub fn set_fb11(value: u8) { ::write(REGISTER_ADDRESS, FB11_BIT_OFFSET, FB11_BIT_WIDTH, value as u32); }

	const FB12_BIT_OFFSET: u8 = 12;
	const FB12_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 12)
	pub fn get_fb12() -> u8 { ::read(REGISTER_ADDRESS, FB12_BIT_OFFSET, FB12_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 12)
	pub fn set_fb12(value: u8) { ::write(REGISTER_ADDRESS, FB12_BIT_OFFSET, FB12_BIT_WIDTH, value as u32); }

	const FB13_BIT_OFFSET: u8 = 13;
	const FB13_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 13)
	pub fn get_fb13() -> u8 { ::read(REGISTER_ADDRESS, FB13_BIT_OFFSET, FB13_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 13)
	pub fn set_fb13(value: u8) { ::write(REGISTER_ADDRESS, FB13_BIT_OFFSET, FB13_BIT_WIDTH, value as u32); }

	const FB14_BIT_OFFSET: u8 = 14;
	const FB14_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 14)
	pub fn get_fb14() -> u8 { ::read(REGISTER_ADDRESS, FB14_BIT_OFFSET, FB14_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 14)
	pub fn set_fb14(value: u8) { ::write(REGISTER_ADDRESS, FB14_BIT_OFFSET, FB14_BIT_WIDTH, value as u32); }

	const FB15_BIT_OFFSET: u8 = 15;
	const FB15_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 15)
	pub fn get_fb15() -> u8 { ::read(REGISTER_ADDRESS, FB15_BIT_OFFSET, FB15_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 15)
	pub fn set_fb15(value: u8) { ::write(REGISTER_ADDRESS, FB15_BIT_OFFSET, FB15_BIT_WIDTH, value as u32); }

	const FB16_BIT_OFFSET: u8 = 16;
	const FB16_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 16)
	pub fn get_fb16() -> u8 { ::read(REGISTER_ADDRESS, FB16_BIT_OFFSET, FB16_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 16)
	pub fn set_fb16(value: u8) { ::write(REGISTER_ADDRESS, FB16_BIT_OFFSET, FB16_BIT_WIDTH, value as u32); }

	const FB17_BIT_OFFSET: u8 = 17;
	const FB17_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 17)
	pub fn get_fb17() -> u8 { ::read(REGISTER_ADDRESS, FB17_BIT_OFFSET, FB17_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 17)
	pub fn set_fb17(value: u8) { ::write(REGISTER_ADDRESS, FB17_BIT_OFFSET, FB17_BIT_WIDTH, value as u32); }

	const FB18_BIT_OFFSET: u8 = 18;
	const FB18_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 18)
	pub fn get_fb18() -> u8 { ::read(REGISTER_ADDRESS, FB18_BIT_OFFSET, FB18_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 18)
	pub fn set_fb18(value: u8) { ::write(REGISTER_ADDRESS, FB18_BIT_OFFSET, FB18_BIT_WIDTH, value as u32); }

	const FB19_BIT_OFFSET: u8 = 19;
	const FB19_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 19)
	pub fn get_fb19() -> u8 { ::read(REGISTER_ADDRESS, FB19_BIT_OFFSET, FB19_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 19)
	pub fn set_fb19(value: u8) { ::write(REGISTER_ADDRESS, FB19_BIT_OFFSET, FB19_BIT_WIDTH, value as u32); }

	const FB20_BIT_OFFSET: u8 = 20;
	const FB20_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 20)
	pub fn get_fb20() -> u8 { ::read(REGISTER_ADDRESS, FB20_BIT_OFFSET, FB20_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 20)
	pub fn set_fb20(value: u8) { ::write(REGISTER_ADDRESS, FB20_BIT_OFFSET, FB20_BIT_WIDTH, value as u32); }

	const FB21_BIT_OFFSET: u8 = 21;
	const FB21_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 21)
	pub fn get_fb21() -> u8 { ::read(REGISTER_ADDRESS, FB21_BIT_OFFSET, FB21_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 21)
	pub fn set_fb21(value: u8) { ::write(REGISTER_ADDRESS, FB21_BIT_OFFSET, FB21_BIT_WIDTH, value as u32); }

	const FB22_BIT_OFFSET: u8 = 22;
	const FB22_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 22)
	pub fn get_fb22() -> u8 { ::read(REGISTER_ADDRESS, FB22_BIT_OFFSET, FB22_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 22)
	pub fn set_fb22(value: u8) { ::write(REGISTER_ADDRESS, FB22_BIT_OFFSET, FB22_BIT_WIDTH, value as u32); }

	const FB23_BIT_OFFSET: u8 = 23;
	const FB23_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 23)
	pub fn get_fb23() -> u8 { ::read(REGISTER_ADDRESS, FB23_BIT_OFFSET, FB23_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 23)
	pub fn set_fb23(value: u8) { ::write(REGISTER_ADDRESS, FB23_BIT_OFFSET, FB23_BIT_WIDTH, value as u32); }

	const FB24_BIT_OFFSET: u8 = 24;
	const FB24_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 24)
	pub fn get_fb24() -> u8 { ::read(REGISTER_ADDRESS, FB24_BIT_OFFSET, FB24_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 24)
	pub fn set_fb24(value: u8) { ::write(REGISTER_ADDRESS, FB24_BIT_OFFSET, FB24_BIT_WIDTH, value as u32); }

	const FB25_BIT_OFFSET: u8 = 25;
	const FB25_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 25)
	pub fn get_fb25() -> u8 { ::read(REGISTER_ADDRESS, FB25_BIT_OFFSET, FB25_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 25)
	pub fn set_fb25(value: u8) { ::write(REGISTER_ADDRESS, FB25_BIT_OFFSET, FB25_BIT_WIDTH, value as u32); }

	const FB26_BIT_OFFSET: u8 = 26;
	const FB26_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 26)
	pub fn get_fb26() -> u8 { ::read(REGISTER_ADDRESS, FB26_BIT_OFFSET, FB26_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 26)
	pub fn set_fb26(value: u8) { ::write(REGISTER_ADDRESS, FB26_BIT_OFFSET, FB26_BIT_WIDTH, value as u32); }

	const FB27_BIT_OFFSET: u8 = 27;
	const FB27_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 27)
	pub fn get_fb27() -> u8 { ::read(REGISTER_ADDRESS, FB27_BIT_OFFSET, FB27_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 27)
	pub fn set_fb27(value: u8) { ::write(REGISTER_ADDRESS, FB27_BIT_OFFSET, FB27_BIT_WIDTH, value as u32); }

	const FB28_BIT_OFFSET: u8 = 28;
	const FB28_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 28)
	pub fn get_fb28() -> u8 { ::read(REGISTER_ADDRESS, FB28_BIT_OFFSET, FB28_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 28)
	pub fn set_fb28(value: u8) { ::write(REGISTER_ADDRESS, FB28_BIT_OFFSET, FB28_BIT_WIDTH, value as u32); }

	const FB29_BIT_OFFSET: u8 = 29;
	const FB29_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 29)
	pub fn get_fb29() -> u8 { ::read(REGISTER_ADDRESS, FB29_BIT_OFFSET, FB29_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 29)
	pub fn set_fb29(value: u8) { ::write(REGISTER_ADDRESS, FB29_BIT_OFFSET, FB29_BIT_WIDTH, value as u32); }

	const FB30_BIT_OFFSET: u8 = 30;
	const FB30_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 30)
	pub fn get_fb30() -> u8 { ::read(REGISTER_ADDRESS, FB30_BIT_OFFSET, FB30_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 30)
	pub fn set_fb30(value: u8) { ::write(REGISTER_ADDRESS, FB30_BIT_OFFSET, FB30_BIT_WIDTH, value as u32); }

	const FB31_BIT_OFFSET: u8 = 31;
	const FB31_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 31)
	pub fn get_fb31() -> u8 { ::read(REGISTER_ADDRESS, FB31_BIT_OFFSET, FB31_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 31)
	pub fn set_fb31(value: u8) { ::write(REGISTER_ADDRESS, FB31_BIT_OFFSET, FB31_BIT_WIDTH, value as u32); }
}
/// Filter bank 4 register 2
/// Size: 0x20 bits
pub mod f4r2 {
	const REGISTER_ADDRESS_OFFSET: u32 = 0x264;
	const REGISTER_ADDRESS: u32 = super::BASE_ADDRESS + REGISTER_ADDRESS_OFFSET;

	const FB0_BIT_OFFSET: u8 = 0;
	const FB0_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 0)
	pub fn get_fb0() -> u8 { ::read(REGISTER_ADDRESS, FB0_BIT_OFFSET, FB0_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 0)
	pub fn set_fb0(value: u8) { ::write(REGISTER_ADDRESS, FB0_BIT_OFFSET, FB0_BIT_WIDTH, value as u32); }

	const FB1_BIT_OFFSET: u8 = 1;
	const FB1_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 1)
	pub fn get_fb1() -> u8 { ::read(REGISTER_ADDRESS, FB1_BIT_OFFSET, FB1_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 1)
	pub fn set_fb1(value: u8) { ::write(REGISTER_ADDRESS, FB1_BIT_OFFSET, FB1_BIT_WIDTH, value as u32); }

	const FB2_BIT_OFFSET: u8 = 2;
	const FB2_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 2)
	pub fn get_fb2() -> u8 { ::read(REGISTER_ADDRESS, FB2_BIT_OFFSET, FB2_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 2)
	pub fn set_fb2(value: u8) { ::write(REGISTER_ADDRESS, FB2_BIT_OFFSET, FB2_BIT_WIDTH, value as u32); }

	const FB3_BIT_OFFSET: u8 = 3;
	const FB3_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 3)
	pub fn get_fb3() -> u8 { ::read(REGISTER_ADDRESS, FB3_BIT_OFFSET, FB3_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 3)
	pub fn set_fb3(value: u8) { ::write(REGISTER_ADDRESS, FB3_BIT_OFFSET, FB3_BIT_WIDTH, value as u32); }

	const FB4_BIT_OFFSET: u8 = 4;
	const FB4_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 4)
	pub fn get_fb4() -> u8 { ::read(REGISTER_ADDRESS, FB4_BIT_OFFSET, FB4_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 4)
	pub fn set_fb4(value: u8) { ::write(REGISTER_ADDRESS, FB4_BIT_OFFSET, FB4_BIT_WIDTH, value as u32); }

	const FB5_BIT_OFFSET: u8 = 5;
	const FB5_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 5)
	pub fn get_fb5() -> u8 { ::read(REGISTER_ADDRESS, FB5_BIT_OFFSET, FB5_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 5)
	pub fn set_fb5(value: u8) { ::write(REGISTER_ADDRESS, FB5_BIT_OFFSET, FB5_BIT_WIDTH, value as u32); }

	const FB6_BIT_OFFSET: u8 = 6;
	const FB6_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 6)
	pub fn get_fb6() -> u8 { ::read(REGISTER_ADDRESS, FB6_BIT_OFFSET, FB6_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 6)
	pub fn set_fb6(value: u8) { ::write(REGISTER_ADDRESS, FB6_BIT_OFFSET, FB6_BIT_WIDTH, value as u32); }

	const FB7_BIT_OFFSET: u8 = 7;
	const FB7_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 7)
	pub fn get_fb7() -> u8 { ::read(REGISTER_ADDRESS, FB7_BIT_OFFSET, FB7_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 7)
	pub fn set_fb7(value: u8) { ::write(REGISTER_ADDRESS, FB7_BIT_OFFSET, FB7_BIT_WIDTH, value as u32); }

	const FB8_BIT_OFFSET: u8 = 8;
	const FB8_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 8)
	pub fn get_fb8() -> u8 { ::read(REGISTER_ADDRESS, FB8_BIT_OFFSET, FB8_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 8)
	pub fn set_fb8(value: u8) { ::write(REGISTER_ADDRESS, FB8_BIT_OFFSET, FB8_BIT_WIDTH, value as u32); }

	const FB9_BIT_OFFSET: u8 = 9;
	const FB9_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 9)
	pub fn get_fb9() -> u8 { ::read(REGISTER_ADDRESS, FB9_BIT_OFFSET, FB9_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 9)
	pub fn set_fb9(value: u8) { ::write(REGISTER_ADDRESS, FB9_BIT_OFFSET, FB9_BIT_WIDTH, value as u32); }

	const FB10_BIT_OFFSET: u8 = 10;
	const FB10_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 10)
	pub fn get_fb10() -> u8 { ::read(REGISTER_ADDRESS, FB10_BIT_OFFSET, FB10_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 10)
	pub fn set_fb10(value: u8) { ::write(REGISTER_ADDRESS, FB10_BIT_OFFSET, FB10_BIT_WIDTH, value as u32); }

	const FB11_BIT_OFFSET: u8 = 11;
	const FB11_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 11)
	pub fn get_fb11() -> u8 { ::read(REGISTER_ADDRESS, FB11_BIT_OFFSET, FB11_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 11)
	pub fn set_fb11(value: u8) { ::write(REGISTER_ADDRESS, FB11_BIT_OFFSET, FB11_BIT_WIDTH, value as u32); }

	const FB12_BIT_OFFSET: u8 = 12;
	const FB12_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 12)
	pub fn get_fb12() -> u8 { ::read(REGISTER_ADDRESS, FB12_BIT_OFFSET, FB12_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 12)
	pub fn set_fb12(value: u8) { ::write(REGISTER_ADDRESS, FB12_BIT_OFFSET, FB12_BIT_WIDTH, value as u32); }

	const FB13_BIT_OFFSET: u8 = 13;
	const FB13_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 13)
	pub fn get_fb13() -> u8 { ::read(REGISTER_ADDRESS, FB13_BIT_OFFSET, FB13_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 13)
	pub fn set_fb13(value: u8) { ::write(REGISTER_ADDRESS, FB13_BIT_OFFSET, FB13_BIT_WIDTH, value as u32); }

	const FB14_BIT_OFFSET: u8 = 14;
	const FB14_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 14)
	pub fn get_fb14() -> u8 { ::read(REGISTER_ADDRESS, FB14_BIT_OFFSET, FB14_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 14)
	pub fn set_fb14(value: u8) { ::write(REGISTER_ADDRESS, FB14_BIT_OFFSET, FB14_BIT_WIDTH, value as u32); }

	const FB15_BIT_OFFSET: u8 = 15;
	const FB15_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 15)
	pub fn get_fb15() -> u8 { ::read(REGISTER_ADDRESS, FB15_BIT_OFFSET, FB15_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 15)
	pub fn set_fb15(value: u8) { ::write(REGISTER_ADDRESS, FB15_BIT_OFFSET, FB15_BIT_WIDTH, value as u32); }

	const FB16_BIT_OFFSET: u8 = 16;
	const FB16_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 16)
	pub fn get_fb16() -> u8 { ::read(REGISTER_ADDRESS, FB16_BIT_OFFSET, FB16_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 16)
	pub fn set_fb16(value: u8) { ::write(REGISTER_ADDRESS, FB16_BIT_OFFSET, FB16_BIT_WIDTH, value as u32); }

	const FB17_BIT_OFFSET: u8 = 17;
	const FB17_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 17)
	pub fn get_fb17() -> u8 { ::read(REGISTER_ADDRESS, FB17_BIT_OFFSET, FB17_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 17)
	pub fn set_fb17(value: u8) { ::write(REGISTER_ADDRESS, FB17_BIT_OFFSET, FB17_BIT_WIDTH, value as u32); }

	const FB18_BIT_OFFSET: u8 = 18;
	const FB18_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 18)
	pub fn get_fb18() -> u8 { ::read(REGISTER_ADDRESS, FB18_BIT_OFFSET, FB18_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 18)
	pub fn set_fb18(value: u8) { ::write(REGISTER_ADDRESS, FB18_BIT_OFFSET, FB18_BIT_WIDTH, value as u32); }

	const FB19_BIT_OFFSET: u8 = 19;
	const FB19_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 19)
	pub fn get_fb19() -> u8 { ::read(REGISTER_ADDRESS, FB19_BIT_OFFSET, FB19_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 19)
	pub fn set_fb19(value: u8) { ::write(REGISTER_ADDRESS, FB19_BIT_OFFSET, FB19_BIT_WIDTH, value as u32); }

	const FB20_BIT_OFFSET: u8 = 20;
	const FB20_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 20)
	pub fn get_fb20() -> u8 { ::read(REGISTER_ADDRESS, FB20_BIT_OFFSET, FB20_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 20)
	pub fn set_fb20(value: u8) { ::write(REGISTER_ADDRESS, FB20_BIT_OFFSET, FB20_BIT_WIDTH, value as u32); }

	const FB21_BIT_OFFSET: u8 = 21;
	const FB21_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 21)
	pub fn get_fb21() -> u8 { ::read(REGISTER_ADDRESS, FB21_BIT_OFFSET, FB21_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 21)
	pub fn set_fb21(value: u8) { ::write(REGISTER_ADDRESS, FB21_BIT_OFFSET, FB21_BIT_WIDTH, value as u32); }

	const FB22_BIT_OFFSET: u8 = 22;
	const FB22_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 22)
	pub fn get_fb22() -> u8 { ::read(REGISTER_ADDRESS, FB22_BIT_OFFSET, FB22_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 22)
	pub fn set_fb22(value: u8) { ::write(REGISTER_ADDRESS, FB22_BIT_OFFSET, FB22_BIT_WIDTH, value as u32); }

	const FB23_BIT_OFFSET: u8 = 23;
	const FB23_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 23)
	pub fn get_fb23() -> u8 { ::read(REGISTER_ADDRESS, FB23_BIT_OFFSET, FB23_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 23)
	pub fn set_fb23(value: u8) { ::write(REGISTER_ADDRESS, FB23_BIT_OFFSET, FB23_BIT_WIDTH, value as u32); }

	const FB24_BIT_OFFSET: u8 = 24;
	const FB24_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 24)
	pub fn get_fb24() -> u8 { ::read(REGISTER_ADDRESS, FB24_BIT_OFFSET, FB24_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 24)
	pub fn set_fb24(value: u8) { ::write(REGISTER_ADDRESS, FB24_BIT_OFFSET, FB24_BIT_WIDTH, value as u32); }

	const FB25_BIT_OFFSET: u8 = 25;
	const FB25_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 25)
	pub fn get_fb25() -> u8 { ::read(REGISTER_ADDRESS, FB25_BIT_OFFSET, FB25_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 25)
	pub fn set_fb25(value: u8) { ::write(REGISTER_ADDRESS, FB25_BIT_OFFSET, FB25_BIT_WIDTH, value as u32); }

	const FB26_BIT_OFFSET: u8 = 26;
	const FB26_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 26)
	pub fn get_fb26() -> u8 { ::read(REGISTER_ADDRESS, FB26_BIT_OFFSET, FB26_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 26)
	pub fn set_fb26(value: u8) { ::write(REGISTER_ADDRESS, FB26_BIT_OFFSET, FB26_BIT_WIDTH, value as u32); }

	const FB27_BIT_OFFSET: u8 = 27;
	const FB27_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 27)
	pub fn get_fb27() -> u8 { ::read(REGISTER_ADDRESS, FB27_BIT_OFFSET, FB27_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 27)
	pub fn set_fb27(value: u8) { ::write(REGISTER_ADDRESS, FB27_BIT_OFFSET, FB27_BIT_WIDTH, value as u32); }

	const FB28_BIT_OFFSET: u8 = 28;
	const FB28_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 28)
	pub fn get_fb28() -> u8 { ::read(REGISTER_ADDRESS, FB28_BIT_OFFSET, FB28_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 28)
	pub fn set_fb28(value: u8) { ::write(REGISTER_ADDRESS, FB28_BIT_OFFSET, FB28_BIT_WIDTH, value as u32); }

	const FB29_BIT_OFFSET: u8 = 29;
	const FB29_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 29)
	pub fn get_fb29() -> u8 { ::read(REGISTER_ADDRESS, FB29_BIT_OFFSET, FB29_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 29)
	pub fn set_fb29(value: u8) { ::write(REGISTER_ADDRESS, FB29_BIT_OFFSET, FB29_BIT_WIDTH, value as u32); }

	const FB30_BIT_OFFSET: u8 = 30;
	const FB30_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 30)
	pub fn get_fb30() -> u8 { ::read(REGISTER_ADDRESS, FB30_BIT_OFFSET, FB30_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 30)
	pub fn set_fb30(value: u8) { ::write(REGISTER_ADDRESS, FB30_BIT_OFFSET, FB30_BIT_WIDTH, value as u32); }

	const FB31_BIT_OFFSET: u8 = 31;
	const FB31_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 31)
	pub fn get_fb31() -> u8 { ::read(REGISTER_ADDRESS, FB31_BIT_OFFSET, FB31_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 31)
	pub fn set_fb31(value: u8) { ::write(REGISTER_ADDRESS, FB31_BIT_OFFSET, FB31_BIT_WIDTH, value as u32); }
}
/// Filter bank 5 register 1
/// Size: 0x20 bits
pub mod f5r1 {
	const REGISTER_ADDRESS_OFFSET: u32 = 0x268;
	const REGISTER_ADDRESS: u32 = super::BASE_ADDRESS + REGISTER_ADDRESS_OFFSET;

	const FB0_BIT_OFFSET: u8 = 0;
	const FB0_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 0)
	pub fn get_fb0() -> u8 { ::read(REGISTER_ADDRESS, FB0_BIT_OFFSET, FB0_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 0)
	pub fn set_fb0(value: u8) { ::write(REGISTER_ADDRESS, FB0_BIT_OFFSET, FB0_BIT_WIDTH, value as u32); }

	const FB1_BIT_OFFSET: u8 = 1;
	const FB1_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 1)
	pub fn get_fb1() -> u8 { ::read(REGISTER_ADDRESS, FB1_BIT_OFFSET, FB1_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 1)
	pub fn set_fb1(value: u8) { ::write(REGISTER_ADDRESS, FB1_BIT_OFFSET, FB1_BIT_WIDTH, value as u32); }

	const FB2_BIT_OFFSET: u8 = 2;
	const FB2_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 2)
	pub fn get_fb2() -> u8 { ::read(REGISTER_ADDRESS, FB2_BIT_OFFSET, FB2_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 2)
	pub fn set_fb2(value: u8) { ::write(REGISTER_ADDRESS, FB2_BIT_OFFSET, FB2_BIT_WIDTH, value as u32); }

	const FB3_BIT_OFFSET: u8 = 3;
	const FB3_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 3)
	pub fn get_fb3() -> u8 { ::read(REGISTER_ADDRESS, FB3_BIT_OFFSET, FB3_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 3)
	pub fn set_fb3(value: u8) { ::write(REGISTER_ADDRESS, FB3_BIT_OFFSET, FB3_BIT_WIDTH, value as u32); }

	const FB4_BIT_OFFSET: u8 = 4;
	const FB4_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 4)
	pub fn get_fb4() -> u8 { ::read(REGISTER_ADDRESS, FB4_BIT_OFFSET, FB4_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 4)
	pub fn set_fb4(value: u8) { ::write(REGISTER_ADDRESS, FB4_BIT_OFFSET, FB4_BIT_WIDTH, value as u32); }

	const FB5_BIT_OFFSET: u8 = 5;
	const FB5_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 5)
	pub fn get_fb5() -> u8 { ::read(REGISTER_ADDRESS, FB5_BIT_OFFSET, FB5_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 5)
	pub fn set_fb5(value: u8) { ::write(REGISTER_ADDRESS, FB5_BIT_OFFSET, FB5_BIT_WIDTH, value as u32); }

	const FB6_BIT_OFFSET: u8 = 6;
	const FB6_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 6)
	pub fn get_fb6() -> u8 { ::read(REGISTER_ADDRESS, FB6_BIT_OFFSET, FB6_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 6)
	pub fn set_fb6(value: u8) { ::write(REGISTER_ADDRESS, FB6_BIT_OFFSET, FB6_BIT_WIDTH, value as u32); }

	const FB7_BIT_OFFSET: u8 = 7;
	const FB7_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 7)
	pub fn get_fb7() -> u8 { ::read(REGISTER_ADDRESS, FB7_BIT_OFFSET, FB7_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 7)
	pub fn set_fb7(value: u8) { ::write(REGISTER_ADDRESS, FB7_BIT_OFFSET, FB7_BIT_WIDTH, value as u32); }

	const FB8_BIT_OFFSET: u8 = 8;
	const FB8_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 8)
	pub fn get_fb8() -> u8 { ::read(REGISTER_ADDRESS, FB8_BIT_OFFSET, FB8_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 8)
	pub fn set_fb8(value: u8) { ::write(REGISTER_ADDRESS, FB8_BIT_OFFSET, FB8_BIT_WIDTH, value as u32); }

	const FB9_BIT_OFFSET: u8 = 9;
	const FB9_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 9)
	pub fn get_fb9() -> u8 { ::read(REGISTER_ADDRESS, FB9_BIT_OFFSET, FB9_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 9)
	pub fn set_fb9(value: u8) { ::write(REGISTER_ADDRESS, FB9_BIT_OFFSET, FB9_BIT_WIDTH, value as u32); }

	const FB10_BIT_OFFSET: u8 = 10;
	const FB10_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 10)
	pub fn get_fb10() -> u8 { ::read(REGISTER_ADDRESS, FB10_BIT_OFFSET, FB10_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 10)
	pub fn set_fb10(value: u8) { ::write(REGISTER_ADDRESS, FB10_BIT_OFFSET, FB10_BIT_WIDTH, value as u32); }

	const FB11_BIT_OFFSET: u8 = 11;
	const FB11_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 11)
	pub fn get_fb11() -> u8 { ::read(REGISTER_ADDRESS, FB11_BIT_OFFSET, FB11_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 11)
	pub fn set_fb11(value: u8) { ::write(REGISTER_ADDRESS, FB11_BIT_OFFSET, FB11_BIT_WIDTH, value as u32); }

	const FB12_BIT_OFFSET: u8 = 12;
	const FB12_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 12)
	pub fn get_fb12() -> u8 { ::read(REGISTER_ADDRESS, FB12_BIT_OFFSET, FB12_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 12)
	pub fn set_fb12(value: u8) { ::write(REGISTER_ADDRESS, FB12_BIT_OFFSET, FB12_BIT_WIDTH, value as u32); }

	const FB13_BIT_OFFSET: u8 = 13;
	const FB13_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 13)
	pub fn get_fb13() -> u8 { ::read(REGISTER_ADDRESS, FB13_BIT_OFFSET, FB13_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 13)
	pub fn set_fb13(value: u8) { ::write(REGISTER_ADDRESS, FB13_BIT_OFFSET, FB13_BIT_WIDTH, value as u32); }

	const FB14_BIT_OFFSET: u8 = 14;
	const FB14_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 14)
	pub fn get_fb14() -> u8 { ::read(REGISTER_ADDRESS, FB14_BIT_OFFSET, FB14_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 14)
	pub fn set_fb14(value: u8) { ::write(REGISTER_ADDRESS, FB14_BIT_OFFSET, FB14_BIT_WIDTH, value as u32); }

	const FB15_BIT_OFFSET: u8 = 15;
	const FB15_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 15)
	pub fn get_fb15() -> u8 { ::read(REGISTER_ADDRESS, FB15_BIT_OFFSET, FB15_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 15)
	pub fn set_fb15(value: u8) { ::write(REGISTER_ADDRESS, FB15_BIT_OFFSET, FB15_BIT_WIDTH, value as u32); }

	const FB16_BIT_OFFSET: u8 = 16;
	const FB16_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 16)
	pub fn get_fb16() -> u8 { ::read(REGISTER_ADDRESS, FB16_BIT_OFFSET, FB16_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 16)
	pub fn set_fb16(value: u8) { ::write(REGISTER_ADDRESS, FB16_BIT_OFFSET, FB16_BIT_WIDTH, value as u32); }

	const FB17_BIT_OFFSET: u8 = 17;
	const FB17_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 17)
	pub fn get_fb17() -> u8 { ::read(REGISTER_ADDRESS, FB17_BIT_OFFSET, FB17_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 17)
	pub fn set_fb17(value: u8) { ::write(REGISTER_ADDRESS, FB17_BIT_OFFSET, FB17_BIT_WIDTH, value as u32); }

	const FB18_BIT_OFFSET: u8 = 18;
	const FB18_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 18)
	pub fn get_fb18() -> u8 { ::read(REGISTER_ADDRESS, FB18_BIT_OFFSET, FB18_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 18)
	pub fn set_fb18(value: u8) { ::write(REGISTER_ADDRESS, FB18_BIT_OFFSET, FB18_BIT_WIDTH, value as u32); }

	const FB19_BIT_OFFSET: u8 = 19;
	const FB19_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 19)
	pub fn get_fb19() -> u8 { ::read(REGISTER_ADDRESS, FB19_BIT_OFFSET, FB19_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 19)
	pub fn set_fb19(value: u8) { ::write(REGISTER_ADDRESS, FB19_BIT_OFFSET, FB19_BIT_WIDTH, value as u32); }

	const FB20_BIT_OFFSET: u8 = 20;
	const FB20_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 20)
	pub fn get_fb20() -> u8 { ::read(REGISTER_ADDRESS, FB20_BIT_OFFSET, FB20_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 20)
	pub fn set_fb20(value: u8) { ::write(REGISTER_ADDRESS, FB20_BIT_OFFSET, FB20_BIT_WIDTH, value as u32); }

	const FB21_BIT_OFFSET: u8 = 21;
	const FB21_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 21)
	pub fn get_fb21() -> u8 { ::read(REGISTER_ADDRESS, FB21_BIT_OFFSET, FB21_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 21)
	pub fn set_fb21(value: u8) { ::write(REGISTER_ADDRESS, FB21_BIT_OFFSET, FB21_BIT_WIDTH, value as u32); }

	const FB22_BIT_OFFSET: u8 = 22;
	const FB22_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 22)
	pub fn get_fb22() -> u8 { ::read(REGISTER_ADDRESS, FB22_BIT_OFFSET, FB22_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 22)
	pub fn set_fb22(value: u8) { ::write(REGISTER_ADDRESS, FB22_BIT_OFFSET, FB22_BIT_WIDTH, value as u32); }

	const FB23_BIT_OFFSET: u8 = 23;
	const FB23_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 23)
	pub fn get_fb23() -> u8 { ::read(REGISTER_ADDRESS, FB23_BIT_OFFSET, FB23_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 23)
	pub fn set_fb23(value: u8) { ::write(REGISTER_ADDRESS, FB23_BIT_OFFSET, FB23_BIT_WIDTH, value as u32); }

	const FB24_BIT_OFFSET: u8 = 24;
	const FB24_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 24)
	pub fn get_fb24() -> u8 { ::read(REGISTER_ADDRESS, FB24_BIT_OFFSET, FB24_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 24)
	pub fn set_fb24(value: u8) { ::write(REGISTER_ADDRESS, FB24_BIT_OFFSET, FB24_BIT_WIDTH, value as u32); }

	const FB25_BIT_OFFSET: u8 = 25;
	const FB25_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 25)
	pub fn get_fb25() -> u8 { ::read(REGISTER_ADDRESS, FB25_BIT_OFFSET, FB25_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 25)
	pub fn set_fb25(value: u8) { ::write(REGISTER_ADDRESS, FB25_BIT_OFFSET, FB25_BIT_WIDTH, value as u32); }

	const FB26_BIT_OFFSET: u8 = 26;
	const FB26_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 26)
	pub fn get_fb26() -> u8 { ::read(REGISTER_ADDRESS, FB26_BIT_OFFSET, FB26_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 26)
	pub fn set_fb26(value: u8) { ::write(REGISTER_ADDRESS, FB26_BIT_OFFSET, FB26_BIT_WIDTH, value as u32); }

	const FB27_BIT_OFFSET: u8 = 27;
	const FB27_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 27)
	pub fn get_fb27() -> u8 { ::read(REGISTER_ADDRESS, FB27_BIT_OFFSET, FB27_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 27)
	pub fn set_fb27(value: u8) { ::write(REGISTER_ADDRESS, FB27_BIT_OFFSET, FB27_BIT_WIDTH, value as u32); }

	const FB28_BIT_OFFSET: u8 = 28;
	const FB28_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 28)
	pub fn get_fb28() -> u8 { ::read(REGISTER_ADDRESS, FB28_BIT_OFFSET, FB28_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 28)
	pub fn set_fb28(value: u8) { ::write(REGISTER_ADDRESS, FB28_BIT_OFFSET, FB28_BIT_WIDTH, value as u32); }

	const FB29_BIT_OFFSET: u8 = 29;
	const FB29_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 29)
	pub fn get_fb29() -> u8 { ::read(REGISTER_ADDRESS, FB29_BIT_OFFSET, FB29_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 29)
	pub fn set_fb29(value: u8) { ::write(REGISTER_ADDRESS, FB29_BIT_OFFSET, FB29_BIT_WIDTH, value as u32); }

	const FB30_BIT_OFFSET: u8 = 30;
	const FB30_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 30)
	pub fn get_fb30() -> u8 { ::read(REGISTER_ADDRESS, FB30_BIT_OFFSET, FB30_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 30)
	pub fn set_fb30(value: u8) { ::write(REGISTER_ADDRESS, FB30_BIT_OFFSET, FB30_BIT_WIDTH, value as u32); }

	const FB31_BIT_OFFSET: u8 = 31;
	const FB31_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 31)
	pub fn get_fb31() -> u8 { ::read(REGISTER_ADDRESS, FB31_BIT_OFFSET, FB31_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 31)
	pub fn set_fb31(value: u8) { ::write(REGISTER_ADDRESS, FB31_BIT_OFFSET, FB31_BIT_WIDTH, value as u32); }
}
/// Filter bank 5 register 2
/// Size: 0x20 bits
pub mod f5r2 {
	const REGISTER_ADDRESS_OFFSET: u32 = 0x26C;
	const REGISTER_ADDRESS: u32 = super::BASE_ADDRESS + REGISTER_ADDRESS_OFFSET;

	const FB0_BIT_OFFSET: u8 = 0;
	const FB0_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 0)
	pub fn get_fb0() -> u8 { ::read(REGISTER_ADDRESS, FB0_BIT_OFFSET, FB0_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 0)
	pub fn set_fb0(value: u8) { ::write(REGISTER_ADDRESS, FB0_BIT_OFFSET, FB0_BIT_WIDTH, value as u32); }

	const FB1_BIT_OFFSET: u8 = 1;
	const FB1_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 1)
	pub fn get_fb1() -> u8 { ::read(REGISTER_ADDRESS, FB1_BIT_OFFSET, FB1_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 1)
	pub fn set_fb1(value: u8) { ::write(REGISTER_ADDRESS, FB1_BIT_OFFSET, FB1_BIT_WIDTH, value as u32); }

	const FB2_BIT_OFFSET: u8 = 2;
	const FB2_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 2)
	pub fn get_fb2() -> u8 { ::read(REGISTER_ADDRESS, FB2_BIT_OFFSET, FB2_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 2)
	pub fn set_fb2(value: u8) { ::write(REGISTER_ADDRESS, FB2_BIT_OFFSET, FB2_BIT_WIDTH, value as u32); }

	const FB3_BIT_OFFSET: u8 = 3;
	const FB3_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 3)
	pub fn get_fb3() -> u8 { ::read(REGISTER_ADDRESS, FB3_BIT_OFFSET, FB3_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 3)
	pub fn set_fb3(value: u8) { ::write(REGISTER_ADDRESS, FB3_BIT_OFFSET, FB3_BIT_WIDTH, value as u32); }

	const FB4_BIT_OFFSET: u8 = 4;
	const FB4_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 4)
	pub fn get_fb4() -> u8 { ::read(REGISTER_ADDRESS, FB4_BIT_OFFSET, FB4_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 4)
	pub fn set_fb4(value: u8) { ::write(REGISTER_ADDRESS, FB4_BIT_OFFSET, FB4_BIT_WIDTH, value as u32); }

	const FB5_BIT_OFFSET: u8 = 5;
	const FB5_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 5)
	pub fn get_fb5() -> u8 { ::read(REGISTER_ADDRESS, FB5_BIT_OFFSET, FB5_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 5)
	pub fn set_fb5(value: u8) { ::write(REGISTER_ADDRESS, FB5_BIT_OFFSET, FB5_BIT_WIDTH, value as u32); }

	const FB6_BIT_OFFSET: u8 = 6;
	const FB6_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 6)
	pub fn get_fb6() -> u8 { ::read(REGISTER_ADDRESS, FB6_BIT_OFFSET, FB6_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 6)
	pub fn set_fb6(value: u8) { ::write(REGISTER_ADDRESS, FB6_BIT_OFFSET, FB6_BIT_WIDTH, value as u32); }

	const FB7_BIT_OFFSET: u8 = 7;
	const FB7_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 7)
	pub fn get_fb7() -> u8 { ::read(REGISTER_ADDRESS, FB7_BIT_OFFSET, FB7_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 7)
	pub fn set_fb7(value: u8) { ::write(REGISTER_ADDRESS, FB7_BIT_OFFSET, FB7_BIT_WIDTH, value as u32); }

	const FB8_BIT_OFFSET: u8 = 8;
	const FB8_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 8)
	pub fn get_fb8() -> u8 { ::read(REGISTER_ADDRESS, FB8_BIT_OFFSET, FB8_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 8)
	pub fn set_fb8(value: u8) { ::write(REGISTER_ADDRESS, FB8_BIT_OFFSET, FB8_BIT_WIDTH, value as u32); }

	const FB9_BIT_OFFSET: u8 = 9;
	const FB9_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 9)
	pub fn get_fb9() -> u8 { ::read(REGISTER_ADDRESS, FB9_BIT_OFFSET, FB9_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 9)
	pub fn set_fb9(value: u8) { ::write(REGISTER_ADDRESS, FB9_BIT_OFFSET, FB9_BIT_WIDTH, value as u32); }

	const FB10_BIT_OFFSET: u8 = 10;
	const FB10_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 10)
	pub fn get_fb10() -> u8 { ::read(REGISTER_ADDRESS, FB10_BIT_OFFSET, FB10_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 10)
	pub fn set_fb10(value: u8) { ::write(REGISTER_ADDRESS, FB10_BIT_OFFSET, FB10_BIT_WIDTH, value as u32); }

	const FB11_BIT_OFFSET: u8 = 11;
	const FB11_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 11)
	pub fn get_fb11() -> u8 { ::read(REGISTER_ADDRESS, FB11_BIT_OFFSET, FB11_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 11)
	pub fn set_fb11(value: u8) { ::write(REGISTER_ADDRESS, FB11_BIT_OFFSET, FB11_BIT_WIDTH, value as u32); }

	const FB12_BIT_OFFSET: u8 = 12;
	const FB12_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 12)
	pub fn get_fb12() -> u8 { ::read(REGISTER_ADDRESS, FB12_BIT_OFFSET, FB12_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 12)
	pub fn set_fb12(value: u8) { ::write(REGISTER_ADDRESS, FB12_BIT_OFFSET, FB12_BIT_WIDTH, value as u32); }

	const FB13_BIT_OFFSET: u8 = 13;
	const FB13_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 13)
	pub fn get_fb13() -> u8 { ::read(REGISTER_ADDRESS, FB13_BIT_OFFSET, FB13_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 13)
	pub fn set_fb13(value: u8) { ::write(REGISTER_ADDRESS, FB13_BIT_OFFSET, FB13_BIT_WIDTH, value as u32); }

	const FB14_BIT_OFFSET: u8 = 14;
	const FB14_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 14)
	pub fn get_fb14() -> u8 { ::read(REGISTER_ADDRESS, FB14_BIT_OFFSET, FB14_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 14)
	pub fn set_fb14(value: u8) { ::write(REGISTER_ADDRESS, FB14_BIT_OFFSET, FB14_BIT_WIDTH, value as u32); }

	const FB15_BIT_OFFSET: u8 = 15;
	const FB15_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 15)
	pub fn get_fb15() -> u8 { ::read(REGISTER_ADDRESS, FB15_BIT_OFFSET, FB15_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 15)
	pub fn set_fb15(value: u8) { ::write(REGISTER_ADDRESS, FB15_BIT_OFFSET, FB15_BIT_WIDTH, value as u32); }

	const FB16_BIT_OFFSET: u8 = 16;
	const FB16_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 16)
	pub fn get_fb16() -> u8 { ::read(REGISTER_ADDRESS, FB16_BIT_OFFSET, FB16_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 16)
	pub fn set_fb16(value: u8) { ::write(REGISTER_ADDRESS, FB16_BIT_OFFSET, FB16_BIT_WIDTH, value as u32); }

	const FB17_BIT_OFFSET: u8 = 17;
	const FB17_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 17)
	pub fn get_fb17() -> u8 { ::read(REGISTER_ADDRESS, FB17_BIT_OFFSET, FB17_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 17)
	pub fn set_fb17(value: u8) { ::write(REGISTER_ADDRESS, FB17_BIT_OFFSET, FB17_BIT_WIDTH, value as u32); }

	const FB18_BIT_OFFSET: u8 = 18;
	const FB18_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 18)
	pub fn get_fb18() -> u8 { ::read(REGISTER_ADDRESS, FB18_BIT_OFFSET, FB18_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 18)
	pub fn set_fb18(value: u8) { ::write(REGISTER_ADDRESS, FB18_BIT_OFFSET, FB18_BIT_WIDTH, value as u32); }

	const FB19_BIT_OFFSET: u8 = 19;
	const FB19_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 19)
	pub fn get_fb19() -> u8 { ::read(REGISTER_ADDRESS, FB19_BIT_OFFSET, FB19_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 19)
	pub fn set_fb19(value: u8) { ::write(REGISTER_ADDRESS, FB19_BIT_OFFSET, FB19_BIT_WIDTH, value as u32); }

	const FB20_BIT_OFFSET: u8 = 20;
	const FB20_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 20)
	pub fn get_fb20() -> u8 { ::read(REGISTER_ADDRESS, FB20_BIT_OFFSET, FB20_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 20)
	pub fn set_fb20(value: u8) { ::write(REGISTER_ADDRESS, FB20_BIT_OFFSET, FB20_BIT_WIDTH, value as u32); }

	const FB21_BIT_OFFSET: u8 = 21;
	const FB21_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 21)
	pub fn get_fb21() -> u8 { ::read(REGISTER_ADDRESS, FB21_BIT_OFFSET, FB21_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 21)
	pub fn set_fb21(value: u8) { ::write(REGISTER_ADDRESS, FB21_BIT_OFFSET, FB21_BIT_WIDTH, value as u32); }

	const FB22_BIT_OFFSET: u8 = 22;
	const FB22_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 22)
	pub fn get_fb22() -> u8 { ::read(REGISTER_ADDRESS, FB22_BIT_OFFSET, FB22_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 22)
	pub fn set_fb22(value: u8) { ::write(REGISTER_ADDRESS, FB22_BIT_OFFSET, FB22_BIT_WIDTH, value as u32); }

	const FB23_BIT_OFFSET: u8 = 23;
	const FB23_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 23)
	pub fn get_fb23() -> u8 { ::read(REGISTER_ADDRESS, FB23_BIT_OFFSET, FB23_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 23)
	pub fn set_fb23(value: u8) { ::write(REGISTER_ADDRESS, FB23_BIT_OFFSET, FB23_BIT_WIDTH, value as u32); }

	const FB24_BIT_OFFSET: u8 = 24;
	const FB24_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 24)
	pub fn get_fb24() -> u8 { ::read(REGISTER_ADDRESS, FB24_BIT_OFFSET, FB24_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 24)
	pub fn set_fb24(value: u8) { ::write(REGISTER_ADDRESS, FB24_BIT_OFFSET, FB24_BIT_WIDTH, value as u32); }

	const FB25_BIT_OFFSET: u8 = 25;
	const FB25_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 25)
	pub fn get_fb25() -> u8 { ::read(REGISTER_ADDRESS, FB25_BIT_OFFSET, FB25_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 25)
	pub fn set_fb25(value: u8) { ::write(REGISTER_ADDRESS, FB25_BIT_OFFSET, FB25_BIT_WIDTH, value as u32); }

	const FB26_BIT_OFFSET: u8 = 26;
	const FB26_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 26)
	pub fn get_fb26() -> u8 { ::read(REGISTER_ADDRESS, FB26_BIT_OFFSET, FB26_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 26)
	pub fn set_fb26(value: u8) { ::write(REGISTER_ADDRESS, FB26_BIT_OFFSET, FB26_BIT_WIDTH, value as u32); }

	const FB27_BIT_OFFSET: u8 = 27;
	const FB27_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 27)
	pub fn get_fb27() -> u8 { ::read(REGISTER_ADDRESS, FB27_BIT_OFFSET, FB27_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 27)
	pub fn set_fb27(value: u8) { ::write(REGISTER_ADDRESS, FB27_BIT_OFFSET, FB27_BIT_WIDTH, value as u32); }

	const FB28_BIT_OFFSET: u8 = 28;
	const FB28_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 28)
	pub fn get_fb28() -> u8 { ::read(REGISTER_ADDRESS, FB28_BIT_OFFSET, FB28_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 28)
	pub fn set_fb28(value: u8) { ::write(REGISTER_ADDRESS, FB28_BIT_OFFSET, FB28_BIT_WIDTH, value as u32); }

	const FB29_BIT_OFFSET: u8 = 29;
	const FB29_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 29)
	pub fn get_fb29() -> u8 { ::read(REGISTER_ADDRESS, FB29_BIT_OFFSET, FB29_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 29)
	pub fn set_fb29(value: u8) { ::write(REGISTER_ADDRESS, FB29_BIT_OFFSET, FB29_BIT_WIDTH, value as u32); }

	const FB30_BIT_OFFSET: u8 = 30;
	const FB30_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 30)
	pub fn get_fb30() -> u8 { ::read(REGISTER_ADDRESS, FB30_BIT_OFFSET, FB30_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 30)
	pub fn set_fb30(value: u8) { ::write(REGISTER_ADDRESS, FB30_BIT_OFFSET, FB30_BIT_WIDTH, value as u32); }

	const FB31_BIT_OFFSET: u8 = 31;
	const FB31_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 31)
	pub fn get_fb31() -> u8 { ::read(REGISTER_ADDRESS, FB31_BIT_OFFSET, FB31_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 31)
	pub fn set_fb31(value: u8) { ::write(REGISTER_ADDRESS, FB31_BIT_OFFSET, FB31_BIT_WIDTH, value as u32); }
}
/// Filter bank 6 register 1
/// Size: 0x20 bits
pub mod f6r1 {
	const REGISTER_ADDRESS_OFFSET: u32 = 0x270;
	const REGISTER_ADDRESS: u32 = super::BASE_ADDRESS + REGISTER_ADDRESS_OFFSET;

	const FB0_BIT_OFFSET: u8 = 0;
	const FB0_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 0)
	pub fn get_fb0() -> u8 { ::read(REGISTER_ADDRESS, FB0_BIT_OFFSET, FB0_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 0)
	pub fn set_fb0(value: u8) { ::write(REGISTER_ADDRESS, FB0_BIT_OFFSET, FB0_BIT_WIDTH, value as u32); }

	const FB1_BIT_OFFSET: u8 = 1;
	const FB1_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 1)
	pub fn get_fb1() -> u8 { ::read(REGISTER_ADDRESS, FB1_BIT_OFFSET, FB1_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 1)
	pub fn set_fb1(value: u8) { ::write(REGISTER_ADDRESS, FB1_BIT_OFFSET, FB1_BIT_WIDTH, value as u32); }

	const FB2_BIT_OFFSET: u8 = 2;
	const FB2_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 2)
	pub fn get_fb2() -> u8 { ::read(REGISTER_ADDRESS, FB2_BIT_OFFSET, FB2_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 2)
	pub fn set_fb2(value: u8) { ::write(REGISTER_ADDRESS, FB2_BIT_OFFSET, FB2_BIT_WIDTH, value as u32); }

	const FB3_BIT_OFFSET: u8 = 3;
	const FB3_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 3)
	pub fn get_fb3() -> u8 { ::read(REGISTER_ADDRESS, FB3_BIT_OFFSET, FB3_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 3)
	pub fn set_fb3(value: u8) { ::write(REGISTER_ADDRESS, FB3_BIT_OFFSET, FB3_BIT_WIDTH, value as u32); }

	const FB4_BIT_OFFSET: u8 = 4;
	const FB4_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 4)
	pub fn get_fb4() -> u8 { ::read(REGISTER_ADDRESS, FB4_BIT_OFFSET, FB4_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 4)
	pub fn set_fb4(value: u8) { ::write(REGISTER_ADDRESS, FB4_BIT_OFFSET, FB4_BIT_WIDTH, value as u32); }

	const FB5_BIT_OFFSET: u8 = 5;
	const FB5_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 5)
	pub fn get_fb5() -> u8 { ::read(REGISTER_ADDRESS, FB5_BIT_OFFSET, FB5_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 5)
	pub fn set_fb5(value: u8) { ::write(REGISTER_ADDRESS, FB5_BIT_OFFSET, FB5_BIT_WIDTH, value as u32); }

	const FB6_BIT_OFFSET: u8 = 6;
	const FB6_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 6)
	pub fn get_fb6() -> u8 { ::read(REGISTER_ADDRESS, FB6_BIT_OFFSET, FB6_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 6)
	pub fn set_fb6(value: u8) { ::write(REGISTER_ADDRESS, FB6_BIT_OFFSET, FB6_BIT_WIDTH, value as u32); }

	const FB7_BIT_OFFSET: u8 = 7;
	const FB7_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 7)
	pub fn get_fb7() -> u8 { ::read(REGISTER_ADDRESS, FB7_BIT_OFFSET, FB7_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 7)
	pub fn set_fb7(value: u8) { ::write(REGISTER_ADDRESS, FB7_BIT_OFFSET, FB7_BIT_WIDTH, value as u32); }

	const FB8_BIT_OFFSET: u8 = 8;
	const FB8_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 8)
	pub fn get_fb8() -> u8 { ::read(REGISTER_ADDRESS, FB8_BIT_OFFSET, FB8_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 8)
	pub fn set_fb8(value: u8) { ::write(REGISTER_ADDRESS, FB8_BIT_OFFSET, FB8_BIT_WIDTH, value as u32); }

	const FB9_BIT_OFFSET: u8 = 9;
	const FB9_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 9)
	pub fn get_fb9() -> u8 { ::read(REGISTER_ADDRESS, FB9_BIT_OFFSET, FB9_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 9)
	pub fn set_fb9(value: u8) { ::write(REGISTER_ADDRESS, FB9_BIT_OFFSET, FB9_BIT_WIDTH, value as u32); }

	const FB10_BIT_OFFSET: u8 = 10;
	const FB10_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 10)
	pub fn get_fb10() -> u8 { ::read(REGISTER_ADDRESS, FB10_BIT_OFFSET, FB10_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 10)
	pub fn set_fb10(value: u8) { ::write(REGISTER_ADDRESS, FB10_BIT_OFFSET, FB10_BIT_WIDTH, value as u32); }

	const FB11_BIT_OFFSET: u8 = 11;
	const FB11_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 11)
	pub fn get_fb11() -> u8 { ::read(REGISTER_ADDRESS, FB11_BIT_OFFSET, FB11_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 11)
	pub fn set_fb11(value: u8) { ::write(REGISTER_ADDRESS, FB11_BIT_OFFSET, FB11_BIT_WIDTH, value as u32); }

	const FB12_BIT_OFFSET: u8 = 12;
	const FB12_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 12)
	pub fn get_fb12() -> u8 { ::read(REGISTER_ADDRESS, FB12_BIT_OFFSET, FB12_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 12)
	pub fn set_fb12(value: u8) { ::write(REGISTER_ADDRESS, FB12_BIT_OFFSET, FB12_BIT_WIDTH, value as u32); }

	const FB13_BIT_OFFSET: u8 = 13;
	const FB13_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 13)
	pub fn get_fb13() -> u8 { ::read(REGISTER_ADDRESS, FB13_BIT_OFFSET, FB13_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 13)
	pub fn set_fb13(value: u8) { ::write(REGISTER_ADDRESS, FB13_BIT_OFFSET, FB13_BIT_WIDTH, value as u32); }

	const FB14_BIT_OFFSET: u8 = 14;
	const FB14_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 14)
	pub fn get_fb14() -> u8 { ::read(REGISTER_ADDRESS, FB14_BIT_OFFSET, FB14_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 14)
	pub fn set_fb14(value: u8) { ::write(REGISTER_ADDRESS, FB14_BIT_OFFSET, FB14_BIT_WIDTH, value as u32); }

	const FB15_BIT_OFFSET: u8 = 15;
	const FB15_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 15)
	pub fn get_fb15() -> u8 { ::read(REGISTER_ADDRESS, FB15_BIT_OFFSET, FB15_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 15)
	pub fn set_fb15(value: u8) { ::write(REGISTER_ADDRESS, FB15_BIT_OFFSET, FB15_BIT_WIDTH, value as u32); }

	const FB16_BIT_OFFSET: u8 = 16;
	const FB16_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 16)
	pub fn get_fb16() -> u8 { ::read(REGISTER_ADDRESS, FB16_BIT_OFFSET, FB16_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 16)
	pub fn set_fb16(value: u8) { ::write(REGISTER_ADDRESS, FB16_BIT_OFFSET, FB16_BIT_WIDTH, value as u32); }

	const FB17_BIT_OFFSET: u8 = 17;
	const FB17_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 17)
	pub fn get_fb17() -> u8 { ::read(REGISTER_ADDRESS, FB17_BIT_OFFSET, FB17_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 17)
	pub fn set_fb17(value: u8) { ::write(REGISTER_ADDRESS, FB17_BIT_OFFSET, FB17_BIT_WIDTH, value as u32); }

	const FB18_BIT_OFFSET: u8 = 18;
	const FB18_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 18)
	pub fn get_fb18() -> u8 { ::read(REGISTER_ADDRESS, FB18_BIT_OFFSET, FB18_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 18)
	pub fn set_fb18(value: u8) { ::write(REGISTER_ADDRESS, FB18_BIT_OFFSET, FB18_BIT_WIDTH, value as u32); }

	const FB19_BIT_OFFSET: u8 = 19;
	const FB19_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 19)
	pub fn get_fb19() -> u8 { ::read(REGISTER_ADDRESS, FB19_BIT_OFFSET, FB19_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 19)
	pub fn set_fb19(value: u8) { ::write(REGISTER_ADDRESS, FB19_BIT_OFFSET, FB19_BIT_WIDTH, value as u32); }

	const FB20_BIT_OFFSET: u8 = 20;
	const FB20_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 20)
	pub fn get_fb20() -> u8 { ::read(REGISTER_ADDRESS, FB20_BIT_OFFSET, FB20_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 20)
	pub fn set_fb20(value: u8) { ::write(REGISTER_ADDRESS, FB20_BIT_OFFSET, FB20_BIT_WIDTH, value as u32); }

	const FB21_BIT_OFFSET: u8 = 21;
	const FB21_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 21)
	pub fn get_fb21() -> u8 { ::read(REGISTER_ADDRESS, FB21_BIT_OFFSET, FB21_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 21)
	pub fn set_fb21(value: u8) { ::write(REGISTER_ADDRESS, FB21_BIT_OFFSET, FB21_BIT_WIDTH, value as u32); }

	const FB22_BIT_OFFSET: u8 = 22;
	const FB22_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 22)
	pub fn get_fb22() -> u8 { ::read(REGISTER_ADDRESS, FB22_BIT_OFFSET, FB22_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 22)
	pub fn set_fb22(value: u8) { ::write(REGISTER_ADDRESS, FB22_BIT_OFFSET, FB22_BIT_WIDTH, value as u32); }

	const FB23_BIT_OFFSET: u8 = 23;
	const FB23_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 23)
	pub fn get_fb23() -> u8 { ::read(REGISTER_ADDRESS, FB23_BIT_OFFSET, FB23_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 23)
	pub fn set_fb23(value: u8) { ::write(REGISTER_ADDRESS, FB23_BIT_OFFSET, FB23_BIT_WIDTH, value as u32); }

	const FB24_BIT_OFFSET: u8 = 24;
	const FB24_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 24)
	pub fn get_fb24() -> u8 { ::read(REGISTER_ADDRESS, FB24_BIT_OFFSET, FB24_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 24)
	pub fn set_fb24(value: u8) { ::write(REGISTER_ADDRESS, FB24_BIT_OFFSET, FB24_BIT_WIDTH, value as u32); }

	const FB25_BIT_OFFSET: u8 = 25;
	const FB25_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 25)
	pub fn get_fb25() -> u8 { ::read(REGISTER_ADDRESS, FB25_BIT_OFFSET, FB25_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 25)
	pub fn set_fb25(value: u8) { ::write(REGISTER_ADDRESS, FB25_BIT_OFFSET, FB25_BIT_WIDTH, value as u32); }

	const FB26_BIT_OFFSET: u8 = 26;
	const FB26_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 26)
	pub fn get_fb26() -> u8 { ::read(REGISTER_ADDRESS, FB26_BIT_OFFSET, FB26_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 26)
	pub fn set_fb26(value: u8) { ::write(REGISTER_ADDRESS, FB26_BIT_OFFSET, FB26_BIT_WIDTH, value as u32); }

	const FB27_BIT_OFFSET: u8 = 27;
	const FB27_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 27)
	pub fn get_fb27() -> u8 { ::read(REGISTER_ADDRESS, FB27_BIT_OFFSET, FB27_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 27)
	pub fn set_fb27(value: u8) { ::write(REGISTER_ADDRESS, FB27_BIT_OFFSET, FB27_BIT_WIDTH, value as u32); }

	const FB28_BIT_OFFSET: u8 = 28;
	const FB28_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 28)
	pub fn get_fb28() -> u8 { ::read(REGISTER_ADDRESS, FB28_BIT_OFFSET, FB28_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 28)
	pub fn set_fb28(value: u8) { ::write(REGISTER_ADDRESS, FB28_BIT_OFFSET, FB28_BIT_WIDTH, value as u32); }

	const FB29_BIT_OFFSET: u8 = 29;
	const FB29_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 29)
	pub fn get_fb29() -> u8 { ::read(REGISTER_ADDRESS, FB29_BIT_OFFSET, FB29_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 29)
	pub fn set_fb29(value: u8) { ::write(REGISTER_ADDRESS, FB29_BIT_OFFSET, FB29_BIT_WIDTH, value as u32); }

	const FB30_BIT_OFFSET: u8 = 30;
	const FB30_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 30)
	pub fn get_fb30() -> u8 { ::read(REGISTER_ADDRESS, FB30_BIT_OFFSET, FB30_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 30)
	pub fn set_fb30(value: u8) { ::write(REGISTER_ADDRESS, FB30_BIT_OFFSET, FB30_BIT_WIDTH, value as u32); }

	const FB31_BIT_OFFSET: u8 = 31;
	const FB31_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 31)
	pub fn get_fb31() -> u8 { ::read(REGISTER_ADDRESS, FB31_BIT_OFFSET, FB31_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 31)
	pub fn set_fb31(value: u8) { ::write(REGISTER_ADDRESS, FB31_BIT_OFFSET, FB31_BIT_WIDTH, value as u32); }
}
/// Filter bank 6 register 2
/// Size: 0x20 bits
pub mod f6r2 {
	const REGISTER_ADDRESS_OFFSET: u32 = 0x274;
	const REGISTER_ADDRESS: u32 = super::BASE_ADDRESS + REGISTER_ADDRESS_OFFSET;

	const FB0_BIT_OFFSET: u8 = 0;
	const FB0_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 0)
	pub fn get_fb0() -> u8 { ::read(REGISTER_ADDRESS, FB0_BIT_OFFSET, FB0_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 0)
	pub fn set_fb0(value: u8) { ::write(REGISTER_ADDRESS, FB0_BIT_OFFSET, FB0_BIT_WIDTH, value as u32); }

	const FB1_BIT_OFFSET: u8 = 1;
	const FB1_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 1)
	pub fn get_fb1() -> u8 { ::read(REGISTER_ADDRESS, FB1_BIT_OFFSET, FB1_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 1)
	pub fn set_fb1(value: u8) { ::write(REGISTER_ADDRESS, FB1_BIT_OFFSET, FB1_BIT_WIDTH, value as u32); }

	const FB2_BIT_OFFSET: u8 = 2;
	const FB2_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 2)
	pub fn get_fb2() -> u8 { ::read(REGISTER_ADDRESS, FB2_BIT_OFFSET, FB2_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 2)
	pub fn set_fb2(value: u8) { ::write(REGISTER_ADDRESS, FB2_BIT_OFFSET, FB2_BIT_WIDTH, value as u32); }

	const FB3_BIT_OFFSET: u8 = 3;
	const FB3_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 3)
	pub fn get_fb3() -> u8 { ::read(REGISTER_ADDRESS, FB3_BIT_OFFSET, FB3_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 3)
	pub fn set_fb3(value: u8) { ::write(REGISTER_ADDRESS, FB3_BIT_OFFSET, FB3_BIT_WIDTH, value as u32); }

	const FB4_BIT_OFFSET: u8 = 4;
	const FB4_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 4)
	pub fn get_fb4() -> u8 { ::read(REGISTER_ADDRESS, FB4_BIT_OFFSET, FB4_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 4)
	pub fn set_fb4(value: u8) { ::write(REGISTER_ADDRESS, FB4_BIT_OFFSET, FB4_BIT_WIDTH, value as u32); }

	const FB5_BIT_OFFSET: u8 = 5;
	const FB5_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 5)
	pub fn get_fb5() -> u8 { ::read(REGISTER_ADDRESS, FB5_BIT_OFFSET, FB5_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 5)
	pub fn set_fb5(value: u8) { ::write(REGISTER_ADDRESS, FB5_BIT_OFFSET, FB5_BIT_WIDTH, value as u32); }

	const FB6_BIT_OFFSET: u8 = 6;
	const FB6_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 6)
	pub fn get_fb6() -> u8 { ::read(REGISTER_ADDRESS, FB6_BIT_OFFSET, FB6_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 6)
	pub fn set_fb6(value: u8) { ::write(REGISTER_ADDRESS, FB6_BIT_OFFSET, FB6_BIT_WIDTH, value as u32); }

	const FB7_BIT_OFFSET: u8 = 7;
	const FB7_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 7)
	pub fn get_fb7() -> u8 { ::read(REGISTER_ADDRESS, FB7_BIT_OFFSET, FB7_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 7)
	pub fn set_fb7(value: u8) { ::write(REGISTER_ADDRESS, FB7_BIT_OFFSET, FB7_BIT_WIDTH, value as u32); }

	const FB8_BIT_OFFSET: u8 = 8;
	const FB8_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 8)
	pub fn get_fb8() -> u8 { ::read(REGISTER_ADDRESS, FB8_BIT_OFFSET, FB8_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 8)
	pub fn set_fb8(value: u8) { ::write(REGISTER_ADDRESS, FB8_BIT_OFFSET, FB8_BIT_WIDTH, value as u32); }

	const FB9_BIT_OFFSET: u8 = 9;
	const FB9_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 9)
	pub fn get_fb9() -> u8 { ::read(REGISTER_ADDRESS, FB9_BIT_OFFSET, FB9_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 9)
	pub fn set_fb9(value: u8) { ::write(REGISTER_ADDRESS, FB9_BIT_OFFSET, FB9_BIT_WIDTH, value as u32); }

	const FB10_BIT_OFFSET: u8 = 10;
	const FB10_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 10)
	pub fn get_fb10() -> u8 { ::read(REGISTER_ADDRESS, FB10_BIT_OFFSET, FB10_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 10)
	pub fn set_fb10(value: u8) { ::write(REGISTER_ADDRESS, FB10_BIT_OFFSET, FB10_BIT_WIDTH, value as u32); }

	const FB11_BIT_OFFSET: u8 = 11;
	const FB11_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 11)
	pub fn get_fb11() -> u8 { ::read(REGISTER_ADDRESS, FB11_BIT_OFFSET, FB11_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 11)
	pub fn set_fb11(value: u8) { ::write(REGISTER_ADDRESS, FB11_BIT_OFFSET, FB11_BIT_WIDTH, value as u32); }

	const FB12_BIT_OFFSET: u8 = 12;
	const FB12_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 12)
	pub fn get_fb12() -> u8 { ::read(REGISTER_ADDRESS, FB12_BIT_OFFSET, FB12_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 12)
	pub fn set_fb12(value: u8) { ::write(REGISTER_ADDRESS, FB12_BIT_OFFSET, FB12_BIT_WIDTH, value as u32); }

	const FB13_BIT_OFFSET: u8 = 13;
	const FB13_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 13)
	pub fn get_fb13() -> u8 { ::read(REGISTER_ADDRESS, FB13_BIT_OFFSET, FB13_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 13)
	pub fn set_fb13(value: u8) { ::write(REGISTER_ADDRESS, FB13_BIT_OFFSET, FB13_BIT_WIDTH, value as u32); }

	const FB14_BIT_OFFSET: u8 = 14;
	const FB14_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 14)
	pub fn get_fb14() -> u8 { ::read(REGISTER_ADDRESS, FB14_BIT_OFFSET, FB14_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 14)
	pub fn set_fb14(value: u8) { ::write(REGISTER_ADDRESS, FB14_BIT_OFFSET, FB14_BIT_WIDTH, value as u32); }

	const FB15_BIT_OFFSET: u8 = 15;
	const FB15_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 15)
	pub fn get_fb15() -> u8 { ::read(REGISTER_ADDRESS, FB15_BIT_OFFSET, FB15_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 15)
	pub fn set_fb15(value: u8) { ::write(REGISTER_ADDRESS, FB15_BIT_OFFSET, FB15_BIT_WIDTH, value as u32); }

	const FB16_BIT_OFFSET: u8 = 16;
	const FB16_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 16)
	pub fn get_fb16() -> u8 { ::read(REGISTER_ADDRESS, FB16_BIT_OFFSET, FB16_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 16)
	pub fn set_fb16(value: u8) { ::write(REGISTER_ADDRESS, FB16_BIT_OFFSET, FB16_BIT_WIDTH, value as u32); }

	const FB17_BIT_OFFSET: u8 = 17;
	const FB17_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 17)
	pub fn get_fb17() -> u8 { ::read(REGISTER_ADDRESS, FB17_BIT_OFFSET, FB17_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 17)
	pub fn set_fb17(value: u8) { ::write(REGISTER_ADDRESS, FB17_BIT_OFFSET, FB17_BIT_WIDTH, value as u32); }

	const FB18_BIT_OFFSET: u8 = 18;
	const FB18_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 18)
	pub fn get_fb18() -> u8 { ::read(REGISTER_ADDRESS, FB18_BIT_OFFSET, FB18_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 18)
	pub fn set_fb18(value: u8) { ::write(REGISTER_ADDRESS, FB18_BIT_OFFSET, FB18_BIT_WIDTH, value as u32); }

	const FB19_BIT_OFFSET: u8 = 19;
	const FB19_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 19)
	pub fn get_fb19() -> u8 { ::read(REGISTER_ADDRESS, FB19_BIT_OFFSET, FB19_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 19)
	pub fn set_fb19(value: u8) { ::write(REGISTER_ADDRESS, FB19_BIT_OFFSET, FB19_BIT_WIDTH, value as u32); }

	const FB20_BIT_OFFSET: u8 = 20;
	const FB20_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 20)
	pub fn get_fb20() -> u8 { ::read(REGISTER_ADDRESS, FB20_BIT_OFFSET, FB20_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 20)
	pub fn set_fb20(value: u8) { ::write(REGISTER_ADDRESS, FB20_BIT_OFFSET, FB20_BIT_WIDTH, value as u32); }

	const FB21_BIT_OFFSET: u8 = 21;
	const FB21_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 21)
	pub fn get_fb21() -> u8 { ::read(REGISTER_ADDRESS, FB21_BIT_OFFSET, FB21_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 21)
	pub fn set_fb21(value: u8) { ::write(REGISTER_ADDRESS, FB21_BIT_OFFSET, FB21_BIT_WIDTH, value as u32); }

	const FB22_BIT_OFFSET: u8 = 22;
	const FB22_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 22)
	pub fn get_fb22() -> u8 { ::read(REGISTER_ADDRESS, FB22_BIT_OFFSET, FB22_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 22)
	pub fn set_fb22(value: u8) { ::write(REGISTER_ADDRESS, FB22_BIT_OFFSET, FB22_BIT_WIDTH, value as u32); }

	const FB23_BIT_OFFSET: u8 = 23;
	const FB23_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 23)
	pub fn get_fb23() -> u8 { ::read(REGISTER_ADDRESS, FB23_BIT_OFFSET, FB23_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 23)
	pub fn set_fb23(value: u8) { ::write(REGISTER_ADDRESS, FB23_BIT_OFFSET, FB23_BIT_WIDTH, value as u32); }

	const FB24_BIT_OFFSET: u8 = 24;
	const FB24_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 24)
	pub fn get_fb24() -> u8 { ::read(REGISTER_ADDRESS, FB24_BIT_OFFSET, FB24_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 24)
	pub fn set_fb24(value: u8) { ::write(REGISTER_ADDRESS, FB24_BIT_OFFSET, FB24_BIT_WIDTH, value as u32); }

	const FB25_BIT_OFFSET: u8 = 25;
	const FB25_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 25)
	pub fn get_fb25() -> u8 { ::read(REGISTER_ADDRESS, FB25_BIT_OFFSET, FB25_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 25)
	pub fn set_fb25(value: u8) { ::write(REGISTER_ADDRESS, FB25_BIT_OFFSET, FB25_BIT_WIDTH, value as u32); }

	const FB26_BIT_OFFSET: u8 = 26;
	const FB26_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 26)
	pub fn get_fb26() -> u8 { ::read(REGISTER_ADDRESS, FB26_BIT_OFFSET, FB26_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 26)
	pub fn set_fb26(value: u8) { ::write(REGISTER_ADDRESS, FB26_BIT_OFFSET, FB26_BIT_WIDTH, value as u32); }

	const FB27_BIT_OFFSET: u8 = 27;
	const FB27_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 27)
	pub fn get_fb27() -> u8 { ::read(REGISTER_ADDRESS, FB27_BIT_OFFSET, FB27_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 27)
	pub fn set_fb27(value: u8) { ::write(REGISTER_ADDRESS, FB27_BIT_OFFSET, FB27_BIT_WIDTH, value as u32); }

	const FB28_BIT_OFFSET: u8 = 28;
	const FB28_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 28)
	pub fn get_fb28() -> u8 { ::read(REGISTER_ADDRESS, FB28_BIT_OFFSET, FB28_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 28)
	pub fn set_fb28(value: u8) { ::write(REGISTER_ADDRESS, FB28_BIT_OFFSET, FB28_BIT_WIDTH, value as u32); }

	const FB29_BIT_OFFSET: u8 = 29;
	const FB29_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 29)
	pub fn get_fb29() -> u8 { ::read(REGISTER_ADDRESS, FB29_BIT_OFFSET, FB29_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 29)
	pub fn set_fb29(value: u8) { ::write(REGISTER_ADDRESS, FB29_BIT_OFFSET, FB29_BIT_WIDTH, value as u32); }

	const FB30_BIT_OFFSET: u8 = 30;
	const FB30_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 30)
	pub fn get_fb30() -> u8 { ::read(REGISTER_ADDRESS, FB30_BIT_OFFSET, FB30_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 30)
	pub fn set_fb30(value: u8) { ::write(REGISTER_ADDRESS, FB30_BIT_OFFSET, FB30_BIT_WIDTH, value as u32); }

	const FB31_BIT_OFFSET: u8 = 31;
	const FB31_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 31)
	pub fn get_fb31() -> u8 { ::read(REGISTER_ADDRESS, FB31_BIT_OFFSET, FB31_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 31)
	pub fn set_fb31(value: u8) { ::write(REGISTER_ADDRESS, FB31_BIT_OFFSET, FB31_BIT_WIDTH, value as u32); }
}
/// Filter bank 7 register 1
/// Size: 0x20 bits
pub mod f7r1 {
	const REGISTER_ADDRESS_OFFSET: u32 = 0x278;
	const REGISTER_ADDRESS: u32 = super::BASE_ADDRESS + REGISTER_ADDRESS_OFFSET;

	const FB0_BIT_OFFSET: u8 = 0;
	const FB0_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 0)
	pub fn get_fb0() -> u8 { ::read(REGISTER_ADDRESS, FB0_BIT_OFFSET, FB0_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 0)
	pub fn set_fb0(value: u8) { ::write(REGISTER_ADDRESS, FB0_BIT_OFFSET, FB0_BIT_WIDTH, value as u32); }

	const FB1_BIT_OFFSET: u8 = 1;
	const FB1_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 1)
	pub fn get_fb1() -> u8 { ::read(REGISTER_ADDRESS, FB1_BIT_OFFSET, FB1_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 1)
	pub fn set_fb1(value: u8) { ::write(REGISTER_ADDRESS, FB1_BIT_OFFSET, FB1_BIT_WIDTH, value as u32); }

	const FB2_BIT_OFFSET: u8 = 2;
	const FB2_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 2)
	pub fn get_fb2() -> u8 { ::read(REGISTER_ADDRESS, FB2_BIT_OFFSET, FB2_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 2)
	pub fn set_fb2(value: u8) { ::write(REGISTER_ADDRESS, FB2_BIT_OFFSET, FB2_BIT_WIDTH, value as u32); }

	const FB3_BIT_OFFSET: u8 = 3;
	const FB3_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 3)
	pub fn get_fb3() -> u8 { ::read(REGISTER_ADDRESS, FB3_BIT_OFFSET, FB3_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 3)
	pub fn set_fb3(value: u8) { ::write(REGISTER_ADDRESS, FB3_BIT_OFFSET, FB3_BIT_WIDTH, value as u32); }

	const FB4_BIT_OFFSET: u8 = 4;
	const FB4_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 4)
	pub fn get_fb4() -> u8 { ::read(REGISTER_ADDRESS, FB4_BIT_OFFSET, FB4_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 4)
	pub fn set_fb4(value: u8) { ::write(REGISTER_ADDRESS, FB4_BIT_OFFSET, FB4_BIT_WIDTH, value as u32); }

	const FB5_BIT_OFFSET: u8 = 5;
	const FB5_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 5)
	pub fn get_fb5() -> u8 { ::read(REGISTER_ADDRESS, FB5_BIT_OFFSET, FB5_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 5)
	pub fn set_fb5(value: u8) { ::write(REGISTER_ADDRESS, FB5_BIT_OFFSET, FB5_BIT_WIDTH, value as u32); }

	const FB6_BIT_OFFSET: u8 = 6;
	const FB6_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 6)
	pub fn get_fb6() -> u8 { ::read(REGISTER_ADDRESS, FB6_BIT_OFFSET, FB6_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 6)
	pub fn set_fb6(value: u8) { ::write(REGISTER_ADDRESS, FB6_BIT_OFFSET, FB6_BIT_WIDTH, value as u32); }

	const FB7_BIT_OFFSET: u8 = 7;
	const FB7_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 7)
	pub fn get_fb7() -> u8 { ::read(REGISTER_ADDRESS, FB7_BIT_OFFSET, FB7_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 7)
	pub fn set_fb7(value: u8) { ::write(REGISTER_ADDRESS, FB7_BIT_OFFSET, FB7_BIT_WIDTH, value as u32); }

	const FB8_BIT_OFFSET: u8 = 8;
	const FB8_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 8)
	pub fn get_fb8() -> u8 { ::read(REGISTER_ADDRESS, FB8_BIT_OFFSET, FB8_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 8)
	pub fn set_fb8(value: u8) { ::write(REGISTER_ADDRESS, FB8_BIT_OFFSET, FB8_BIT_WIDTH, value as u32); }

	const FB9_BIT_OFFSET: u8 = 9;
	const FB9_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 9)
	pub fn get_fb9() -> u8 { ::read(REGISTER_ADDRESS, FB9_BIT_OFFSET, FB9_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 9)
	pub fn set_fb9(value: u8) { ::write(REGISTER_ADDRESS, FB9_BIT_OFFSET, FB9_BIT_WIDTH, value as u32); }

	const FB10_BIT_OFFSET: u8 = 10;
	const FB10_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 10)
	pub fn get_fb10() -> u8 { ::read(REGISTER_ADDRESS, FB10_BIT_OFFSET, FB10_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 10)
	pub fn set_fb10(value: u8) { ::write(REGISTER_ADDRESS, FB10_BIT_OFFSET, FB10_BIT_WIDTH, value as u32); }

	const FB11_BIT_OFFSET: u8 = 11;
	const FB11_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 11)
	pub fn get_fb11() -> u8 { ::read(REGISTER_ADDRESS, FB11_BIT_OFFSET, FB11_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 11)
	pub fn set_fb11(value: u8) { ::write(REGISTER_ADDRESS, FB11_BIT_OFFSET, FB11_BIT_WIDTH, value as u32); }

	const FB12_BIT_OFFSET: u8 = 12;
	const FB12_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 12)
	pub fn get_fb12() -> u8 { ::read(REGISTER_ADDRESS, FB12_BIT_OFFSET, FB12_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 12)
	pub fn set_fb12(value: u8) { ::write(REGISTER_ADDRESS, FB12_BIT_OFFSET, FB12_BIT_WIDTH, value as u32); }

	const FB13_BIT_OFFSET: u8 = 13;
	const FB13_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 13)
	pub fn get_fb13() -> u8 { ::read(REGISTER_ADDRESS, FB13_BIT_OFFSET, FB13_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 13)
	pub fn set_fb13(value: u8) { ::write(REGISTER_ADDRESS, FB13_BIT_OFFSET, FB13_BIT_WIDTH, value as u32); }

	const FB14_BIT_OFFSET: u8 = 14;
	const FB14_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 14)
	pub fn get_fb14() -> u8 { ::read(REGISTER_ADDRESS, FB14_BIT_OFFSET, FB14_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 14)
	pub fn set_fb14(value: u8) { ::write(REGISTER_ADDRESS, FB14_BIT_OFFSET, FB14_BIT_WIDTH, value as u32); }

	const FB15_BIT_OFFSET: u8 = 15;
	const FB15_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 15)
	pub fn get_fb15() -> u8 { ::read(REGISTER_ADDRESS, FB15_BIT_OFFSET, FB15_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 15)
	pub fn set_fb15(value: u8) { ::write(REGISTER_ADDRESS, FB15_BIT_OFFSET, FB15_BIT_WIDTH, value as u32); }

	const FB16_BIT_OFFSET: u8 = 16;
	const FB16_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 16)
	pub fn get_fb16() -> u8 { ::read(REGISTER_ADDRESS, FB16_BIT_OFFSET, FB16_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 16)
	pub fn set_fb16(value: u8) { ::write(REGISTER_ADDRESS, FB16_BIT_OFFSET, FB16_BIT_WIDTH, value as u32); }

	const FB17_BIT_OFFSET: u8 = 17;
	const FB17_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 17)
	pub fn get_fb17() -> u8 { ::read(REGISTER_ADDRESS, FB17_BIT_OFFSET, FB17_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 17)
	pub fn set_fb17(value: u8) { ::write(REGISTER_ADDRESS, FB17_BIT_OFFSET, FB17_BIT_WIDTH, value as u32); }

	const FB18_BIT_OFFSET: u8 = 18;
	const FB18_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 18)
	pub fn get_fb18() -> u8 { ::read(REGISTER_ADDRESS, FB18_BIT_OFFSET, FB18_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 18)
	pub fn set_fb18(value: u8) { ::write(REGISTER_ADDRESS, FB18_BIT_OFFSET, FB18_BIT_WIDTH, value as u32); }

	const FB19_BIT_OFFSET: u8 = 19;
	const FB19_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 19)
	pub fn get_fb19() -> u8 { ::read(REGISTER_ADDRESS, FB19_BIT_OFFSET, FB19_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 19)
	pub fn set_fb19(value: u8) { ::write(REGISTER_ADDRESS, FB19_BIT_OFFSET, FB19_BIT_WIDTH, value as u32); }

	const FB20_BIT_OFFSET: u8 = 20;
	const FB20_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 20)
	pub fn get_fb20() -> u8 { ::read(REGISTER_ADDRESS, FB20_BIT_OFFSET, FB20_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 20)
	pub fn set_fb20(value: u8) { ::write(REGISTER_ADDRESS, FB20_BIT_OFFSET, FB20_BIT_WIDTH, value as u32); }

	const FB21_BIT_OFFSET: u8 = 21;
	const FB21_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 21)
	pub fn get_fb21() -> u8 { ::read(REGISTER_ADDRESS, FB21_BIT_OFFSET, FB21_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 21)
	pub fn set_fb21(value: u8) { ::write(REGISTER_ADDRESS, FB21_BIT_OFFSET, FB21_BIT_WIDTH, value as u32); }

	const FB22_BIT_OFFSET: u8 = 22;
	const FB22_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 22)
	pub fn get_fb22() -> u8 { ::read(REGISTER_ADDRESS, FB22_BIT_OFFSET, FB22_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 22)
	pub fn set_fb22(value: u8) { ::write(REGISTER_ADDRESS, FB22_BIT_OFFSET, FB22_BIT_WIDTH, value as u32); }

	const FB23_BIT_OFFSET: u8 = 23;
	const FB23_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 23)
	pub fn get_fb23() -> u8 { ::read(REGISTER_ADDRESS, FB23_BIT_OFFSET, FB23_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 23)
	pub fn set_fb23(value: u8) { ::write(REGISTER_ADDRESS, FB23_BIT_OFFSET, FB23_BIT_WIDTH, value as u32); }

	const FB24_BIT_OFFSET: u8 = 24;
	const FB24_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 24)
	pub fn get_fb24() -> u8 { ::read(REGISTER_ADDRESS, FB24_BIT_OFFSET, FB24_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 24)
	pub fn set_fb24(value: u8) { ::write(REGISTER_ADDRESS, FB24_BIT_OFFSET, FB24_BIT_WIDTH, value as u32); }

	const FB25_BIT_OFFSET: u8 = 25;
	const FB25_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 25)
	pub fn get_fb25() -> u8 { ::read(REGISTER_ADDRESS, FB25_BIT_OFFSET, FB25_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 25)
	pub fn set_fb25(value: u8) { ::write(REGISTER_ADDRESS, FB25_BIT_OFFSET, FB25_BIT_WIDTH, value as u32); }

	const FB26_BIT_OFFSET: u8 = 26;
	const FB26_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 26)
	pub fn get_fb26() -> u8 { ::read(REGISTER_ADDRESS, FB26_BIT_OFFSET, FB26_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 26)
	pub fn set_fb26(value: u8) { ::write(REGISTER_ADDRESS, FB26_BIT_OFFSET, FB26_BIT_WIDTH, value as u32); }

	const FB27_BIT_OFFSET: u8 = 27;
	const FB27_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 27)
	pub fn get_fb27() -> u8 { ::read(REGISTER_ADDRESS, FB27_BIT_OFFSET, FB27_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 27)
	pub fn set_fb27(value: u8) { ::write(REGISTER_ADDRESS, FB27_BIT_OFFSET, FB27_BIT_WIDTH, value as u32); }

	const FB28_BIT_OFFSET: u8 = 28;
	const FB28_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 28)
	pub fn get_fb28() -> u8 { ::read(REGISTER_ADDRESS, FB28_BIT_OFFSET, FB28_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 28)
	pub fn set_fb28(value: u8) { ::write(REGISTER_ADDRESS, FB28_BIT_OFFSET, FB28_BIT_WIDTH, value as u32); }

	const FB29_BIT_OFFSET: u8 = 29;
	const FB29_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 29)
	pub fn get_fb29() -> u8 { ::read(REGISTER_ADDRESS, FB29_BIT_OFFSET, FB29_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 29)
	pub fn set_fb29(value: u8) { ::write(REGISTER_ADDRESS, FB29_BIT_OFFSET, FB29_BIT_WIDTH, value as u32); }

	const FB30_BIT_OFFSET: u8 = 30;
	const FB30_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 30)
	pub fn get_fb30() -> u8 { ::read(REGISTER_ADDRESS, FB30_BIT_OFFSET, FB30_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 30)
	pub fn set_fb30(value: u8) { ::write(REGISTER_ADDRESS, FB30_BIT_OFFSET, FB30_BIT_WIDTH, value as u32); }

	const FB31_BIT_OFFSET: u8 = 31;
	const FB31_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 31)
	pub fn get_fb31() -> u8 { ::read(REGISTER_ADDRESS, FB31_BIT_OFFSET, FB31_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 31)
	pub fn set_fb31(value: u8) { ::write(REGISTER_ADDRESS, FB31_BIT_OFFSET, FB31_BIT_WIDTH, value as u32); }
}
/// Filter bank 7 register 2
/// Size: 0x20 bits
pub mod f7r2 {
	const REGISTER_ADDRESS_OFFSET: u32 = 0x27C;
	const REGISTER_ADDRESS: u32 = super::BASE_ADDRESS + REGISTER_ADDRESS_OFFSET;

	const FB0_BIT_OFFSET: u8 = 0;
	const FB0_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 0)
	pub fn get_fb0() -> u8 { ::read(REGISTER_ADDRESS, FB0_BIT_OFFSET, FB0_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 0)
	pub fn set_fb0(value: u8) { ::write(REGISTER_ADDRESS, FB0_BIT_OFFSET, FB0_BIT_WIDTH, value as u32); }

	const FB1_BIT_OFFSET: u8 = 1;
	const FB1_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 1)
	pub fn get_fb1() -> u8 { ::read(REGISTER_ADDRESS, FB1_BIT_OFFSET, FB1_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 1)
	pub fn set_fb1(value: u8) { ::write(REGISTER_ADDRESS, FB1_BIT_OFFSET, FB1_BIT_WIDTH, value as u32); }

	const FB2_BIT_OFFSET: u8 = 2;
	const FB2_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 2)
	pub fn get_fb2() -> u8 { ::read(REGISTER_ADDRESS, FB2_BIT_OFFSET, FB2_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 2)
	pub fn set_fb2(value: u8) { ::write(REGISTER_ADDRESS, FB2_BIT_OFFSET, FB2_BIT_WIDTH, value as u32); }

	const FB3_BIT_OFFSET: u8 = 3;
	const FB3_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 3)
	pub fn get_fb3() -> u8 { ::read(REGISTER_ADDRESS, FB3_BIT_OFFSET, FB3_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 3)
	pub fn set_fb3(value: u8) { ::write(REGISTER_ADDRESS, FB3_BIT_OFFSET, FB3_BIT_WIDTH, value as u32); }

	const FB4_BIT_OFFSET: u8 = 4;
	const FB4_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 4)
	pub fn get_fb4() -> u8 { ::read(REGISTER_ADDRESS, FB4_BIT_OFFSET, FB4_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 4)
	pub fn set_fb4(value: u8) { ::write(REGISTER_ADDRESS, FB4_BIT_OFFSET, FB4_BIT_WIDTH, value as u32); }

	const FB5_BIT_OFFSET: u8 = 5;
	const FB5_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 5)
	pub fn get_fb5() -> u8 { ::read(REGISTER_ADDRESS, FB5_BIT_OFFSET, FB5_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 5)
	pub fn set_fb5(value: u8) { ::write(REGISTER_ADDRESS, FB5_BIT_OFFSET, FB5_BIT_WIDTH, value as u32); }

	const FB6_BIT_OFFSET: u8 = 6;
	const FB6_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 6)
	pub fn get_fb6() -> u8 { ::read(REGISTER_ADDRESS, FB6_BIT_OFFSET, FB6_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 6)
	pub fn set_fb6(value: u8) { ::write(REGISTER_ADDRESS, FB6_BIT_OFFSET, FB6_BIT_WIDTH, value as u32); }

	const FB7_BIT_OFFSET: u8 = 7;
	const FB7_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 7)
	pub fn get_fb7() -> u8 { ::read(REGISTER_ADDRESS, FB7_BIT_OFFSET, FB7_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 7)
	pub fn set_fb7(value: u8) { ::write(REGISTER_ADDRESS, FB7_BIT_OFFSET, FB7_BIT_WIDTH, value as u32); }

	const FB8_BIT_OFFSET: u8 = 8;
	const FB8_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 8)
	pub fn get_fb8() -> u8 { ::read(REGISTER_ADDRESS, FB8_BIT_OFFSET, FB8_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 8)
	pub fn set_fb8(value: u8) { ::write(REGISTER_ADDRESS, FB8_BIT_OFFSET, FB8_BIT_WIDTH, value as u32); }

	const FB9_BIT_OFFSET: u8 = 9;
	const FB9_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 9)
	pub fn get_fb9() -> u8 { ::read(REGISTER_ADDRESS, FB9_BIT_OFFSET, FB9_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 9)
	pub fn set_fb9(value: u8) { ::write(REGISTER_ADDRESS, FB9_BIT_OFFSET, FB9_BIT_WIDTH, value as u32); }

	const FB10_BIT_OFFSET: u8 = 10;
	const FB10_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 10)
	pub fn get_fb10() -> u8 { ::read(REGISTER_ADDRESS, FB10_BIT_OFFSET, FB10_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 10)
	pub fn set_fb10(value: u8) { ::write(REGISTER_ADDRESS, FB10_BIT_OFFSET, FB10_BIT_WIDTH, value as u32); }

	const FB11_BIT_OFFSET: u8 = 11;
	const FB11_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 11)
	pub fn get_fb11() -> u8 { ::read(REGISTER_ADDRESS, FB11_BIT_OFFSET, FB11_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 11)
	pub fn set_fb11(value: u8) { ::write(REGISTER_ADDRESS, FB11_BIT_OFFSET, FB11_BIT_WIDTH, value as u32); }

	const FB12_BIT_OFFSET: u8 = 12;
	const FB12_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 12)
	pub fn get_fb12() -> u8 { ::read(REGISTER_ADDRESS, FB12_BIT_OFFSET, FB12_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 12)
	pub fn set_fb12(value: u8) { ::write(REGISTER_ADDRESS, FB12_BIT_OFFSET, FB12_BIT_WIDTH, value as u32); }

	const FB13_BIT_OFFSET: u8 = 13;
	const FB13_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 13)
	pub fn get_fb13() -> u8 { ::read(REGISTER_ADDRESS, FB13_BIT_OFFSET, FB13_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 13)
	pub fn set_fb13(value: u8) { ::write(REGISTER_ADDRESS, FB13_BIT_OFFSET, FB13_BIT_WIDTH, value as u32); }

	const FB14_BIT_OFFSET: u8 = 14;
	const FB14_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 14)
	pub fn get_fb14() -> u8 { ::read(REGISTER_ADDRESS, FB14_BIT_OFFSET, FB14_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 14)
	pub fn set_fb14(value: u8) { ::write(REGISTER_ADDRESS, FB14_BIT_OFFSET, FB14_BIT_WIDTH, value as u32); }

	const FB15_BIT_OFFSET: u8 = 15;
	const FB15_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 15)
	pub fn get_fb15() -> u8 { ::read(REGISTER_ADDRESS, FB15_BIT_OFFSET, FB15_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 15)
	pub fn set_fb15(value: u8) { ::write(REGISTER_ADDRESS, FB15_BIT_OFFSET, FB15_BIT_WIDTH, value as u32); }

	const FB16_BIT_OFFSET: u8 = 16;
	const FB16_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 16)
	pub fn get_fb16() -> u8 { ::read(REGISTER_ADDRESS, FB16_BIT_OFFSET, FB16_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 16)
	pub fn set_fb16(value: u8) { ::write(REGISTER_ADDRESS, FB16_BIT_OFFSET, FB16_BIT_WIDTH, value as u32); }

	const FB17_BIT_OFFSET: u8 = 17;
	const FB17_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 17)
	pub fn get_fb17() -> u8 { ::read(REGISTER_ADDRESS, FB17_BIT_OFFSET, FB17_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 17)
	pub fn set_fb17(value: u8) { ::write(REGISTER_ADDRESS, FB17_BIT_OFFSET, FB17_BIT_WIDTH, value as u32); }

	const FB18_BIT_OFFSET: u8 = 18;
	const FB18_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 18)
	pub fn get_fb18() -> u8 { ::read(REGISTER_ADDRESS, FB18_BIT_OFFSET, FB18_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 18)
	pub fn set_fb18(value: u8) { ::write(REGISTER_ADDRESS, FB18_BIT_OFFSET, FB18_BIT_WIDTH, value as u32); }

	const FB19_BIT_OFFSET: u8 = 19;
	const FB19_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 19)
	pub fn get_fb19() -> u8 { ::read(REGISTER_ADDRESS, FB19_BIT_OFFSET, FB19_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 19)
	pub fn set_fb19(value: u8) { ::write(REGISTER_ADDRESS, FB19_BIT_OFFSET, FB19_BIT_WIDTH, value as u32); }

	const FB20_BIT_OFFSET: u8 = 20;
	const FB20_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 20)
	pub fn get_fb20() -> u8 { ::read(REGISTER_ADDRESS, FB20_BIT_OFFSET, FB20_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 20)
	pub fn set_fb20(value: u8) { ::write(REGISTER_ADDRESS, FB20_BIT_OFFSET, FB20_BIT_WIDTH, value as u32); }

	const FB21_BIT_OFFSET: u8 = 21;
	const FB21_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 21)
	pub fn get_fb21() -> u8 { ::read(REGISTER_ADDRESS, FB21_BIT_OFFSET, FB21_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 21)
	pub fn set_fb21(value: u8) { ::write(REGISTER_ADDRESS, FB21_BIT_OFFSET, FB21_BIT_WIDTH, value as u32); }

	const FB22_BIT_OFFSET: u8 = 22;
	const FB22_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 22)
	pub fn get_fb22() -> u8 { ::read(REGISTER_ADDRESS, FB22_BIT_OFFSET, FB22_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 22)
	pub fn set_fb22(value: u8) { ::write(REGISTER_ADDRESS, FB22_BIT_OFFSET, FB22_BIT_WIDTH, value as u32); }

	const FB23_BIT_OFFSET: u8 = 23;
	const FB23_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 23)
	pub fn get_fb23() -> u8 { ::read(REGISTER_ADDRESS, FB23_BIT_OFFSET, FB23_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 23)
	pub fn set_fb23(value: u8) { ::write(REGISTER_ADDRESS, FB23_BIT_OFFSET, FB23_BIT_WIDTH, value as u32); }

	const FB24_BIT_OFFSET: u8 = 24;
	const FB24_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 24)
	pub fn get_fb24() -> u8 { ::read(REGISTER_ADDRESS, FB24_BIT_OFFSET, FB24_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 24)
	pub fn set_fb24(value: u8) { ::write(REGISTER_ADDRESS, FB24_BIT_OFFSET, FB24_BIT_WIDTH, value as u32); }

	const FB25_BIT_OFFSET: u8 = 25;
	const FB25_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 25)
	pub fn get_fb25() -> u8 { ::read(REGISTER_ADDRESS, FB25_BIT_OFFSET, FB25_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 25)
	pub fn set_fb25(value: u8) { ::write(REGISTER_ADDRESS, FB25_BIT_OFFSET, FB25_BIT_WIDTH, value as u32); }

	const FB26_BIT_OFFSET: u8 = 26;
	const FB26_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 26)
	pub fn get_fb26() -> u8 { ::read(REGISTER_ADDRESS, FB26_BIT_OFFSET, FB26_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 26)
	pub fn set_fb26(value: u8) { ::write(REGISTER_ADDRESS, FB26_BIT_OFFSET, FB26_BIT_WIDTH, value as u32); }

	const FB27_BIT_OFFSET: u8 = 27;
	const FB27_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 27)
	pub fn get_fb27() -> u8 { ::read(REGISTER_ADDRESS, FB27_BIT_OFFSET, FB27_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 27)
	pub fn set_fb27(value: u8) { ::write(REGISTER_ADDRESS, FB27_BIT_OFFSET, FB27_BIT_WIDTH, value as u32); }

	const FB28_BIT_OFFSET: u8 = 28;
	const FB28_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 28)
	pub fn get_fb28() -> u8 { ::read(REGISTER_ADDRESS, FB28_BIT_OFFSET, FB28_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 28)
	pub fn set_fb28(value: u8) { ::write(REGISTER_ADDRESS, FB28_BIT_OFFSET, FB28_BIT_WIDTH, value as u32); }

	const FB29_BIT_OFFSET: u8 = 29;
	const FB29_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 29)
	pub fn get_fb29() -> u8 { ::read(REGISTER_ADDRESS, FB29_BIT_OFFSET, FB29_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 29)
	pub fn set_fb29(value: u8) { ::write(REGISTER_ADDRESS, FB29_BIT_OFFSET, FB29_BIT_WIDTH, value as u32); }

	const FB30_BIT_OFFSET: u8 = 30;
	const FB30_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 30)
	pub fn get_fb30() -> u8 { ::read(REGISTER_ADDRESS, FB30_BIT_OFFSET, FB30_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 30)
	pub fn set_fb30(value: u8) { ::write(REGISTER_ADDRESS, FB30_BIT_OFFSET, FB30_BIT_WIDTH, value as u32); }

	const FB31_BIT_OFFSET: u8 = 31;
	const FB31_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 31)
	pub fn get_fb31() -> u8 { ::read(REGISTER_ADDRESS, FB31_BIT_OFFSET, FB31_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 31)
	pub fn set_fb31(value: u8) { ::write(REGISTER_ADDRESS, FB31_BIT_OFFSET, FB31_BIT_WIDTH, value as u32); }
}
/// Filter bank 8 register 1
/// Size: 0x20 bits
pub mod f8r1 {
	const REGISTER_ADDRESS_OFFSET: u32 = 0x280;
	const REGISTER_ADDRESS: u32 = super::BASE_ADDRESS + REGISTER_ADDRESS_OFFSET;

	const FB0_BIT_OFFSET: u8 = 0;
	const FB0_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 0)
	pub fn get_fb0() -> u8 { ::read(REGISTER_ADDRESS, FB0_BIT_OFFSET, FB0_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 0)
	pub fn set_fb0(value: u8) { ::write(REGISTER_ADDRESS, FB0_BIT_OFFSET, FB0_BIT_WIDTH, value as u32); }

	const FB1_BIT_OFFSET: u8 = 1;
	const FB1_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 1)
	pub fn get_fb1() -> u8 { ::read(REGISTER_ADDRESS, FB1_BIT_OFFSET, FB1_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 1)
	pub fn set_fb1(value: u8) { ::write(REGISTER_ADDRESS, FB1_BIT_OFFSET, FB1_BIT_WIDTH, value as u32); }

	const FB2_BIT_OFFSET: u8 = 2;
	const FB2_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 2)
	pub fn get_fb2() -> u8 { ::read(REGISTER_ADDRESS, FB2_BIT_OFFSET, FB2_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 2)
	pub fn set_fb2(value: u8) { ::write(REGISTER_ADDRESS, FB2_BIT_OFFSET, FB2_BIT_WIDTH, value as u32); }

	const FB3_BIT_OFFSET: u8 = 3;
	const FB3_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 3)
	pub fn get_fb3() -> u8 { ::read(REGISTER_ADDRESS, FB3_BIT_OFFSET, FB3_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 3)
	pub fn set_fb3(value: u8) { ::write(REGISTER_ADDRESS, FB3_BIT_OFFSET, FB3_BIT_WIDTH, value as u32); }

	const FB4_BIT_OFFSET: u8 = 4;
	const FB4_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 4)
	pub fn get_fb4() -> u8 { ::read(REGISTER_ADDRESS, FB4_BIT_OFFSET, FB4_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 4)
	pub fn set_fb4(value: u8) { ::write(REGISTER_ADDRESS, FB4_BIT_OFFSET, FB4_BIT_WIDTH, value as u32); }

	const FB5_BIT_OFFSET: u8 = 5;
	const FB5_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 5)
	pub fn get_fb5() -> u8 { ::read(REGISTER_ADDRESS, FB5_BIT_OFFSET, FB5_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 5)
	pub fn set_fb5(value: u8) { ::write(REGISTER_ADDRESS, FB5_BIT_OFFSET, FB5_BIT_WIDTH, value as u32); }

	const FB6_BIT_OFFSET: u8 = 6;
	const FB6_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 6)
	pub fn get_fb6() -> u8 { ::read(REGISTER_ADDRESS, FB6_BIT_OFFSET, FB6_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 6)
	pub fn set_fb6(value: u8) { ::write(REGISTER_ADDRESS, FB6_BIT_OFFSET, FB6_BIT_WIDTH, value as u32); }

	const FB7_BIT_OFFSET: u8 = 7;
	const FB7_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 7)
	pub fn get_fb7() -> u8 { ::read(REGISTER_ADDRESS, FB7_BIT_OFFSET, FB7_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 7)
	pub fn set_fb7(value: u8) { ::write(REGISTER_ADDRESS, FB7_BIT_OFFSET, FB7_BIT_WIDTH, value as u32); }

	const FB8_BIT_OFFSET: u8 = 8;
	const FB8_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 8)
	pub fn get_fb8() -> u8 { ::read(REGISTER_ADDRESS, FB8_BIT_OFFSET, FB8_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 8)
	pub fn set_fb8(value: u8) { ::write(REGISTER_ADDRESS, FB8_BIT_OFFSET, FB8_BIT_WIDTH, value as u32); }

	const FB9_BIT_OFFSET: u8 = 9;
	const FB9_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 9)
	pub fn get_fb9() -> u8 { ::read(REGISTER_ADDRESS, FB9_BIT_OFFSET, FB9_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 9)
	pub fn set_fb9(value: u8) { ::write(REGISTER_ADDRESS, FB9_BIT_OFFSET, FB9_BIT_WIDTH, value as u32); }

	const FB10_BIT_OFFSET: u8 = 10;
	const FB10_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 10)
	pub fn get_fb10() -> u8 { ::read(REGISTER_ADDRESS, FB10_BIT_OFFSET, FB10_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 10)
	pub fn set_fb10(value: u8) { ::write(REGISTER_ADDRESS, FB10_BIT_OFFSET, FB10_BIT_WIDTH, value as u32); }

	const FB11_BIT_OFFSET: u8 = 11;
	const FB11_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 11)
	pub fn get_fb11() -> u8 { ::read(REGISTER_ADDRESS, FB11_BIT_OFFSET, FB11_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 11)
	pub fn set_fb11(value: u8) { ::write(REGISTER_ADDRESS, FB11_BIT_OFFSET, FB11_BIT_WIDTH, value as u32); }

	const FB12_BIT_OFFSET: u8 = 12;
	const FB12_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 12)
	pub fn get_fb12() -> u8 { ::read(REGISTER_ADDRESS, FB12_BIT_OFFSET, FB12_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 12)
	pub fn set_fb12(value: u8) { ::write(REGISTER_ADDRESS, FB12_BIT_OFFSET, FB12_BIT_WIDTH, value as u32); }

	const FB13_BIT_OFFSET: u8 = 13;
	const FB13_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 13)
	pub fn get_fb13() -> u8 { ::read(REGISTER_ADDRESS, FB13_BIT_OFFSET, FB13_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 13)
	pub fn set_fb13(value: u8) { ::write(REGISTER_ADDRESS, FB13_BIT_OFFSET, FB13_BIT_WIDTH, value as u32); }

	const FB14_BIT_OFFSET: u8 = 14;
	const FB14_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 14)
	pub fn get_fb14() -> u8 { ::read(REGISTER_ADDRESS, FB14_BIT_OFFSET, FB14_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 14)
	pub fn set_fb14(value: u8) { ::write(REGISTER_ADDRESS, FB14_BIT_OFFSET, FB14_BIT_WIDTH, value as u32); }

	const FB15_BIT_OFFSET: u8 = 15;
	const FB15_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 15)
	pub fn get_fb15() -> u8 { ::read(REGISTER_ADDRESS, FB15_BIT_OFFSET, FB15_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 15)
	pub fn set_fb15(value: u8) { ::write(REGISTER_ADDRESS, FB15_BIT_OFFSET, FB15_BIT_WIDTH, value as u32); }

	const FB16_BIT_OFFSET: u8 = 16;
	const FB16_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 16)
	pub fn get_fb16() -> u8 { ::read(REGISTER_ADDRESS, FB16_BIT_OFFSET, FB16_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 16)
	pub fn set_fb16(value: u8) { ::write(REGISTER_ADDRESS, FB16_BIT_OFFSET, FB16_BIT_WIDTH, value as u32); }

	const FB17_BIT_OFFSET: u8 = 17;
	const FB17_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 17)
	pub fn get_fb17() -> u8 { ::read(REGISTER_ADDRESS, FB17_BIT_OFFSET, FB17_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 17)
	pub fn set_fb17(value: u8) { ::write(REGISTER_ADDRESS, FB17_BIT_OFFSET, FB17_BIT_WIDTH, value as u32); }

	const FB18_BIT_OFFSET: u8 = 18;
	const FB18_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 18)
	pub fn get_fb18() -> u8 { ::read(REGISTER_ADDRESS, FB18_BIT_OFFSET, FB18_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 18)
	pub fn set_fb18(value: u8) { ::write(REGISTER_ADDRESS, FB18_BIT_OFFSET, FB18_BIT_WIDTH, value as u32); }

	const FB19_BIT_OFFSET: u8 = 19;
	const FB19_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 19)
	pub fn get_fb19() -> u8 { ::read(REGISTER_ADDRESS, FB19_BIT_OFFSET, FB19_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 19)
	pub fn set_fb19(value: u8) { ::write(REGISTER_ADDRESS, FB19_BIT_OFFSET, FB19_BIT_WIDTH, value as u32); }

	const FB20_BIT_OFFSET: u8 = 20;
	const FB20_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 20)
	pub fn get_fb20() -> u8 { ::read(REGISTER_ADDRESS, FB20_BIT_OFFSET, FB20_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 20)
	pub fn set_fb20(value: u8) { ::write(REGISTER_ADDRESS, FB20_BIT_OFFSET, FB20_BIT_WIDTH, value as u32); }

	const FB21_BIT_OFFSET: u8 = 21;
	const FB21_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 21)
	pub fn get_fb21() -> u8 { ::read(REGISTER_ADDRESS, FB21_BIT_OFFSET, FB21_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 21)
	pub fn set_fb21(value: u8) { ::write(REGISTER_ADDRESS, FB21_BIT_OFFSET, FB21_BIT_WIDTH, value as u32); }

	const FB22_BIT_OFFSET: u8 = 22;
	const FB22_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 22)
	pub fn get_fb22() -> u8 { ::read(REGISTER_ADDRESS, FB22_BIT_OFFSET, FB22_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 22)
	pub fn set_fb22(value: u8) { ::write(REGISTER_ADDRESS, FB22_BIT_OFFSET, FB22_BIT_WIDTH, value as u32); }

	const FB23_BIT_OFFSET: u8 = 23;
	const FB23_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 23)
	pub fn get_fb23() -> u8 { ::read(REGISTER_ADDRESS, FB23_BIT_OFFSET, FB23_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 23)
	pub fn set_fb23(value: u8) { ::write(REGISTER_ADDRESS, FB23_BIT_OFFSET, FB23_BIT_WIDTH, value as u32); }

	const FB24_BIT_OFFSET: u8 = 24;
	const FB24_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 24)
	pub fn get_fb24() -> u8 { ::read(REGISTER_ADDRESS, FB24_BIT_OFFSET, FB24_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 24)
	pub fn set_fb24(value: u8) { ::write(REGISTER_ADDRESS, FB24_BIT_OFFSET, FB24_BIT_WIDTH, value as u32); }

	const FB25_BIT_OFFSET: u8 = 25;
	const FB25_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 25)
	pub fn get_fb25() -> u8 { ::read(REGISTER_ADDRESS, FB25_BIT_OFFSET, FB25_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 25)
	pub fn set_fb25(value: u8) { ::write(REGISTER_ADDRESS, FB25_BIT_OFFSET, FB25_BIT_WIDTH, value as u32); }

	const FB26_BIT_OFFSET: u8 = 26;
	const FB26_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 26)
	pub fn get_fb26() -> u8 { ::read(REGISTER_ADDRESS, FB26_BIT_OFFSET, FB26_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 26)
	pub fn set_fb26(value: u8) { ::write(REGISTER_ADDRESS, FB26_BIT_OFFSET, FB26_BIT_WIDTH, value as u32); }

	const FB27_BIT_OFFSET: u8 = 27;
	const FB27_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 27)
	pub fn get_fb27() -> u8 { ::read(REGISTER_ADDRESS, FB27_BIT_OFFSET, FB27_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 27)
	pub fn set_fb27(value: u8) { ::write(REGISTER_ADDRESS, FB27_BIT_OFFSET, FB27_BIT_WIDTH, value as u32); }

	const FB28_BIT_OFFSET: u8 = 28;
	const FB28_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 28)
	pub fn get_fb28() -> u8 { ::read(REGISTER_ADDRESS, FB28_BIT_OFFSET, FB28_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 28)
	pub fn set_fb28(value: u8) { ::write(REGISTER_ADDRESS, FB28_BIT_OFFSET, FB28_BIT_WIDTH, value as u32); }

	const FB29_BIT_OFFSET: u8 = 29;
	const FB29_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 29)
	pub fn get_fb29() -> u8 { ::read(REGISTER_ADDRESS, FB29_BIT_OFFSET, FB29_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 29)
	pub fn set_fb29(value: u8) { ::write(REGISTER_ADDRESS, FB29_BIT_OFFSET, FB29_BIT_WIDTH, value as u32); }

	const FB30_BIT_OFFSET: u8 = 30;
	const FB30_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 30)
	pub fn get_fb30() -> u8 { ::read(REGISTER_ADDRESS, FB30_BIT_OFFSET, FB30_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 30)
	pub fn set_fb30(value: u8) { ::write(REGISTER_ADDRESS, FB30_BIT_OFFSET, FB30_BIT_WIDTH, value as u32); }

	const FB31_BIT_OFFSET: u8 = 31;
	const FB31_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 31)
	pub fn get_fb31() -> u8 { ::read(REGISTER_ADDRESS, FB31_BIT_OFFSET, FB31_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 31)
	pub fn set_fb31(value: u8) { ::write(REGISTER_ADDRESS, FB31_BIT_OFFSET, FB31_BIT_WIDTH, value as u32); }
}
/// Filter bank 8 register 2
/// Size: 0x20 bits
pub mod f8r2 {
	const REGISTER_ADDRESS_OFFSET: u32 = 0x284;
	const REGISTER_ADDRESS: u32 = super::BASE_ADDRESS + REGISTER_ADDRESS_OFFSET;

	const FB0_BIT_OFFSET: u8 = 0;
	const FB0_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 0)
	pub fn get_fb0() -> u8 { ::read(REGISTER_ADDRESS, FB0_BIT_OFFSET, FB0_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 0)
	pub fn set_fb0(value: u8) { ::write(REGISTER_ADDRESS, FB0_BIT_OFFSET, FB0_BIT_WIDTH, value as u32); }

	const FB1_BIT_OFFSET: u8 = 1;
	const FB1_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 1)
	pub fn get_fb1() -> u8 { ::read(REGISTER_ADDRESS, FB1_BIT_OFFSET, FB1_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 1)
	pub fn set_fb1(value: u8) { ::write(REGISTER_ADDRESS, FB1_BIT_OFFSET, FB1_BIT_WIDTH, value as u32); }

	const FB2_BIT_OFFSET: u8 = 2;
	const FB2_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 2)
	pub fn get_fb2() -> u8 { ::read(REGISTER_ADDRESS, FB2_BIT_OFFSET, FB2_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 2)
	pub fn set_fb2(value: u8) { ::write(REGISTER_ADDRESS, FB2_BIT_OFFSET, FB2_BIT_WIDTH, value as u32); }

	const FB3_BIT_OFFSET: u8 = 3;
	const FB3_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 3)
	pub fn get_fb3() -> u8 { ::read(REGISTER_ADDRESS, FB3_BIT_OFFSET, FB3_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 3)
	pub fn set_fb3(value: u8) { ::write(REGISTER_ADDRESS, FB3_BIT_OFFSET, FB3_BIT_WIDTH, value as u32); }

	const FB4_BIT_OFFSET: u8 = 4;
	const FB4_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 4)
	pub fn get_fb4() -> u8 { ::read(REGISTER_ADDRESS, FB4_BIT_OFFSET, FB4_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 4)
	pub fn set_fb4(value: u8) { ::write(REGISTER_ADDRESS, FB4_BIT_OFFSET, FB4_BIT_WIDTH, value as u32); }

	const FB5_BIT_OFFSET: u8 = 5;
	const FB5_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 5)
	pub fn get_fb5() -> u8 { ::read(REGISTER_ADDRESS, FB5_BIT_OFFSET, FB5_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 5)
	pub fn set_fb5(value: u8) { ::write(REGISTER_ADDRESS, FB5_BIT_OFFSET, FB5_BIT_WIDTH, value as u32); }

	const FB6_BIT_OFFSET: u8 = 6;
	const FB6_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 6)
	pub fn get_fb6() -> u8 { ::read(REGISTER_ADDRESS, FB6_BIT_OFFSET, FB6_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 6)
	pub fn set_fb6(value: u8) { ::write(REGISTER_ADDRESS, FB6_BIT_OFFSET, FB6_BIT_WIDTH, value as u32); }

	const FB7_BIT_OFFSET: u8 = 7;
	const FB7_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 7)
	pub fn get_fb7() -> u8 { ::read(REGISTER_ADDRESS, FB7_BIT_OFFSET, FB7_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 7)
	pub fn set_fb7(value: u8) { ::write(REGISTER_ADDRESS, FB7_BIT_OFFSET, FB7_BIT_WIDTH, value as u32); }

	const FB8_BIT_OFFSET: u8 = 8;
	const FB8_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 8)
	pub fn get_fb8() -> u8 { ::read(REGISTER_ADDRESS, FB8_BIT_OFFSET, FB8_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 8)
	pub fn set_fb8(value: u8) { ::write(REGISTER_ADDRESS, FB8_BIT_OFFSET, FB8_BIT_WIDTH, value as u32); }

	const FB9_BIT_OFFSET: u8 = 9;
	const FB9_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 9)
	pub fn get_fb9() -> u8 { ::read(REGISTER_ADDRESS, FB9_BIT_OFFSET, FB9_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 9)
	pub fn set_fb9(value: u8) { ::write(REGISTER_ADDRESS, FB9_BIT_OFFSET, FB9_BIT_WIDTH, value as u32); }

	const FB10_BIT_OFFSET: u8 = 10;
	const FB10_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 10)
	pub fn get_fb10() -> u8 { ::read(REGISTER_ADDRESS, FB10_BIT_OFFSET, FB10_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 10)
	pub fn set_fb10(value: u8) { ::write(REGISTER_ADDRESS, FB10_BIT_OFFSET, FB10_BIT_WIDTH, value as u32); }

	const FB11_BIT_OFFSET: u8 = 11;
	const FB11_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 11)
	pub fn get_fb11() -> u8 { ::read(REGISTER_ADDRESS, FB11_BIT_OFFSET, FB11_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 11)
	pub fn set_fb11(value: u8) { ::write(REGISTER_ADDRESS, FB11_BIT_OFFSET, FB11_BIT_WIDTH, value as u32); }

	const FB12_BIT_OFFSET: u8 = 12;
	const FB12_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 12)
	pub fn get_fb12() -> u8 { ::read(REGISTER_ADDRESS, FB12_BIT_OFFSET, FB12_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 12)
	pub fn set_fb12(value: u8) { ::write(REGISTER_ADDRESS, FB12_BIT_OFFSET, FB12_BIT_WIDTH, value as u32); }

	const FB13_BIT_OFFSET: u8 = 13;
	const FB13_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 13)
	pub fn get_fb13() -> u8 { ::read(REGISTER_ADDRESS, FB13_BIT_OFFSET, FB13_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 13)
	pub fn set_fb13(value: u8) { ::write(REGISTER_ADDRESS, FB13_BIT_OFFSET, FB13_BIT_WIDTH, value as u32); }

	const FB14_BIT_OFFSET: u8 = 14;
	const FB14_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 14)
	pub fn get_fb14() -> u8 { ::read(REGISTER_ADDRESS, FB14_BIT_OFFSET, FB14_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 14)
	pub fn set_fb14(value: u8) { ::write(REGISTER_ADDRESS, FB14_BIT_OFFSET, FB14_BIT_WIDTH, value as u32); }

	const FB15_BIT_OFFSET: u8 = 15;
	const FB15_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 15)
	pub fn get_fb15() -> u8 { ::read(REGISTER_ADDRESS, FB15_BIT_OFFSET, FB15_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 15)
	pub fn set_fb15(value: u8) { ::write(REGISTER_ADDRESS, FB15_BIT_OFFSET, FB15_BIT_WIDTH, value as u32); }

	const FB16_BIT_OFFSET: u8 = 16;
	const FB16_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 16)
	pub fn get_fb16() -> u8 { ::read(REGISTER_ADDRESS, FB16_BIT_OFFSET, FB16_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 16)
	pub fn set_fb16(value: u8) { ::write(REGISTER_ADDRESS, FB16_BIT_OFFSET, FB16_BIT_WIDTH, value as u32); }

	const FB17_BIT_OFFSET: u8 = 17;
	const FB17_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 17)
	pub fn get_fb17() -> u8 { ::read(REGISTER_ADDRESS, FB17_BIT_OFFSET, FB17_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 17)
	pub fn set_fb17(value: u8) { ::write(REGISTER_ADDRESS, FB17_BIT_OFFSET, FB17_BIT_WIDTH, value as u32); }

	const FB18_BIT_OFFSET: u8 = 18;
	const FB18_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 18)
	pub fn get_fb18() -> u8 { ::read(REGISTER_ADDRESS, FB18_BIT_OFFSET, FB18_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 18)
	pub fn set_fb18(value: u8) { ::write(REGISTER_ADDRESS, FB18_BIT_OFFSET, FB18_BIT_WIDTH, value as u32); }

	const FB19_BIT_OFFSET: u8 = 19;
	const FB19_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 19)
	pub fn get_fb19() -> u8 { ::read(REGISTER_ADDRESS, FB19_BIT_OFFSET, FB19_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 19)
	pub fn set_fb19(value: u8) { ::write(REGISTER_ADDRESS, FB19_BIT_OFFSET, FB19_BIT_WIDTH, value as u32); }

	const FB20_BIT_OFFSET: u8 = 20;
	const FB20_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 20)
	pub fn get_fb20() -> u8 { ::read(REGISTER_ADDRESS, FB20_BIT_OFFSET, FB20_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 20)
	pub fn set_fb20(value: u8) { ::write(REGISTER_ADDRESS, FB20_BIT_OFFSET, FB20_BIT_WIDTH, value as u32); }

	const FB21_BIT_OFFSET: u8 = 21;
	const FB21_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 21)
	pub fn get_fb21() -> u8 { ::read(REGISTER_ADDRESS, FB21_BIT_OFFSET, FB21_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 21)
	pub fn set_fb21(value: u8) { ::write(REGISTER_ADDRESS, FB21_BIT_OFFSET, FB21_BIT_WIDTH, value as u32); }

	const FB22_BIT_OFFSET: u8 = 22;
	const FB22_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 22)
	pub fn get_fb22() -> u8 { ::read(REGISTER_ADDRESS, FB22_BIT_OFFSET, FB22_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 22)
	pub fn set_fb22(value: u8) { ::write(REGISTER_ADDRESS, FB22_BIT_OFFSET, FB22_BIT_WIDTH, value as u32); }

	const FB23_BIT_OFFSET: u8 = 23;
	const FB23_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 23)
	pub fn get_fb23() -> u8 { ::read(REGISTER_ADDRESS, FB23_BIT_OFFSET, FB23_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 23)
	pub fn set_fb23(value: u8) { ::write(REGISTER_ADDRESS, FB23_BIT_OFFSET, FB23_BIT_WIDTH, value as u32); }

	const FB24_BIT_OFFSET: u8 = 24;
	const FB24_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 24)
	pub fn get_fb24() -> u8 { ::read(REGISTER_ADDRESS, FB24_BIT_OFFSET, FB24_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 24)
	pub fn set_fb24(value: u8) { ::write(REGISTER_ADDRESS, FB24_BIT_OFFSET, FB24_BIT_WIDTH, value as u32); }

	const FB25_BIT_OFFSET: u8 = 25;
	const FB25_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 25)
	pub fn get_fb25() -> u8 { ::read(REGISTER_ADDRESS, FB25_BIT_OFFSET, FB25_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 25)
	pub fn set_fb25(value: u8) { ::write(REGISTER_ADDRESS, FB25_BIT_OFFSET, FB25_BIT_WIDTH, value as u32); }

	const FB26_BIT_OFFSET: u8 = 26;
	const FB26_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 26)
	pub fn get_fb26() -> u8 { ::read(REGISTER_ADDRESS, FB26_BIT_OFFSET, FB26_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 26)
	pub fn set_fb26(value: u8) { ::write(REGISTER_ADDRESS, FB26_BIT_OFFSET, FB26_BIT_WIDTH, value as u32); }

	const FB27_BIT_OFFSET: u8 = 27;
	const FB27_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 27)
	pub fn get_fb27() -> u8 { ::read(REGISTER_ADDRESS, FB27_BIT_OFFSET, FB27_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 27)
	pub fn set_fb27(value: u8) { ::write(REGISTER_ADDRESS, FB27_BIT_OFFSET, FB27_BIT_WIDTH, value as u32); }

	const FB28_BIT_OFFSET: u8 = 28;
	const FB28_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 28)
	pub fn get_fb28() -> u8 { ::read(REGISTER_ADDRESS, FB28_BIT_OFFSET, FB28_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 28)
	pub fn set_fb28(value: u8) { ::write(REGISTER_ADDRESS, FB28_BIT_OFFSET, FB28_BIT_WIDTH, value as u32); }

	const FB29_BIT_OFFSET: u8 = 29;
	const FB29_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 29)
	pub fn get_fb29() -> u8 { ::read(REGISTER_ADDRESS, FB29_BIT_OFFSET, FB29_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 29)
	pub fn set_fb29(value: u8) { ::write(REGISTER_ADDRESS, FB29_BIT_OFFSET, FB29_BIT_WIDTH, value as u32); }

	const FB30_BIT_OFFSET: u8 = 30;
	const FB30_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 30)
	pub fn get_fb30() -> u8 { ::read(REGISTER_ADDRESS, FB30_BIT_OFFSET, FB30_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 30)
	pub fn set_fb30(value: u8) { ::write(REGISTER_ADDRESS, FB30_BIT_OFFSET, FB30_BIT_WIDTH, value as u32); }

	const FB31_BIT_OFFSET: u8 = 31;
	const FB31_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 31)
	pub fn get_fb31() -> u8 { ::read(REGISTER_ADDRESS, FB31_BIT_OFFSET, FB31_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 31)
	pub fn set_fb31(value: u8) { ::write(REGISTER_ADDRESS, FB31_BIT_OFFSET, FB31_BIT_WIDTH, value as u32); }
}
/// Filter bank 9 register 1
/// Size: 0x20 bits
pub mod f9r1 {
	const REGISTER_ADDRESS_OFFSET: u32 = 0x288;
	const REGISTER_ADDRESS: u32 = super::BASE_ADDRESS + REGISTER_ADDRESS_OFFSET;

	const FB0_BIT_OFFSET: u8 = 0;
	const FB0_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 0)
	pub fn get_fb0() -> u8 { ::read(REGISTER_ADDRESS, FB0_BIT_OFFSET, FB0_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 0)
	pub fn set_fb0(value: u8) { ::write(REGISTER_ADDRESS, FB0_BIT_OFFSET, FB0_BIT_WIDTH, value as u32); }

	const FB1_BIT_OFFSET: u8 = 1;
	const FB1_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 1)
	pub fn get_fb1() -> u8 { ::read(REGISTER_ADDRESS, FB1_BIT_OFFSET, FB1_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 1)
	pub fn set_fb1(value: u8) { ::write(REGISTER_ADDRESS, FB1_BIT_OFFSET, FB1_BIT_WIDTH, value as u32); }

	const FB2_BIT_OFFSET: u8 = 2;
	const FB2_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 2)
	pub fn get_fb2() -> u8 { ::read(REGISTER_ADDRESS, FB2_BIT_OFFSET, FB2_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 2)
	pub fn set_fb2(value: u8) { ::write(REGISTER_ADDRESS, FB2_BIT_OFFSET, FB2_BIT_WIDTH, value as u32); }

	const FB3_BIT_OFFSET: u8 = 3;
	const FB3_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 3)
	pub fn get_fb3() -> u8 { ::read(REGISTER_ADDRESS, FB3_BIT_OFFSET, FB3_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 3)
	pub fn set_fb3(value: u8) { ::write(REGISTER_ADDRESS, FB3_BIT_OFFSET, FB3_BIT_WIDTH, value as u32); }

	const FB4_BIT_OFFSET: u8 = 4;
	const FB4_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 4)
	pub fn get_fb4() -> u8 { ::read(REGISTER_ADDRESS, FB4_BIT_OFFSET, FB4_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 4)
	pub fn set_fb4(value: u8) { ::write(REGISTER_ADDRESS, FB4_BIT_OFFSET, FB4_BIT_WIDTH, value as u32); }

	const FB5_BIT_OFFSET: u8 = 5;
	const FB5_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 5)
	pub fn get_fb5() -> u8 { ::read(REGISTER_ADDRESS, FB5_BIT_OFFSET, FB5_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 5)
	pub fn set_fb5(value: u8) { ::write(REGISTER_ADDRESS, FB5_BIT_OFFSET, FB5_BIT_WIDTH, value as u32); }

	const FB6_BIT_OFFSET: u8 = 6;
	const FB6_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 6)
	pub fn get_fb6() -> u8 { ::read(REGISTER_ADDRESS, FB6_BIT_OFFSET, FB6_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 6)
	pub fn set_fb6(value: u8) { ::write(REGISTER_ADDRESS, FB6_BIT_OFFSET, FB6_BIT_WIDTH, value as u32); }

	const FB7_BIT_OFFSET: u8 = 7;
	const FB7_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 7)
	pub fn get_fb7() -> u8 { ::read(REGISTER_ADDRESS, FB7_BIT_OFFSET, FB7_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 7)
	pub fn set_fb7(value: u8) { ::write(REGISTER_ADDRESS, FB7_BIT_OFFSET, FB7_BIT_WIDTH, value as u32); }

	const FB8_BIT_OFFSET: u8 = 8;
	const FB8_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 8)
	pub fn get_fb8() -> u8 { ::read(REGISTER_ADDRESS, FB8_BIT_OFFSET, FB8_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 8)
	pub fn set_fb8(value: u8) { ::write(REGISTER_ADDRESS, FB8_BIT_OFFSET, FB8_BIT_WIDTH, value as u32); }

	const FB9_BIT_OFFSET: u8 = 9;
	const FB9_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 9)
	pub fn get_fb9() -> u8 { ::read(REGISTER_ADDRESS, FB9_BIT_OFFSET, FB9_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 9)
	pub fn set_fb9(value: u8) { ::write(REGISTER_ADDRESS, FB9_BIT_OFFSET, FB9_BIT_WIDTH, value as u32); }

	const FB10_BIT_OFFSET: u8 = 10;
	const FB10_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 10)
	pub fn get_fb10() -> u8 { ::read(REGISTER_ADDRESS, FB10_BIT_OFFSET, FB10_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 10)
	pub fn set_fb10(value: u8) { ::write(REGISTER_ADDRESS, FB10_BIT_OFFSET, FB10_BIT_WIDTH, value as u32); }

	const FB11_BIT_OFFSET: u8 = 11;
	const FB11_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 11)
	pub fn get_fb11() -> u8 { ::read(REGISTER_ADDRESS, FB11_BIT_OFFSET, FB11_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 11)
	pub fn set_fb11(value: u8) { ::write(REGISTER_ADDRESS, FB11_BIT_OFFSET, FB11_BIT_WIDTH, value as u32); }

	const FB12_BIT_OFFSET: u8 = 12;
	const FB12_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 12)
	pub fn get_fb12() -> u8 { ::read(REGISTER_ADDRESS, FB12_BIT_OFFSET, FB12_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 12)
	pub fn set_fb12(value: u8) { ::write(REGISTER_ADDRESS, FB12_BIT_OFFSET, FB12_BIT_WIDTH, value as u32); }

	const FB13_BIT_OFFSET: u8 = 13;
	const FB13_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 13)
	pub fn get_fb13() -> u8 { ::read(REGISTER_ADDRESS, FB13_BIT_OFFSET, FB13_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 13)
	pub fn set_fb13(value: u8) { ::write(REGISTER_ADDRESS, FB13_BIT_OFFSET, FB13_BIT_WIDTH, value as u32); }

	const FB14_BIT_OFFSET: u8 = 14;
	const FB14_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 14)
	pub fn get_fb14() -> u8 { ::read(REGISTER_ADDRESS, FB14_BIT_OFFSET, FB14_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 14)
	pub fn set_fb14(value: u8) { ::write(REGISTER_ADDRESS, FB14_BIT_OFFSET, FB14_BIT_WIDTH, value as u32); }

	const FB15_BIT_OFFSET: u8 = 15;
	const FB15_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 15)
	pub fn get_fb15() -> u8 { ::read(REGISTER_ADDRESS, FB15_BIT_OFFSET, FB15_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 15)
	pub fn set_fb15(value: u8) { ::write(REGISTER_ADDRESS, FB15_BIT_OFFSET, FB15_BIT_WIDTH, value as u32); }

	const FB16_BIT_OFFSET: u8 = 16;
	const FB16_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 16)
	pub fn get_fb16() -> u8 { ::read(REGISTER_ADDRESS, FB16_BIT_OFFSET, FB16_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 16)
	pub fn set_fb16(value: u8) { ::write(REGISTER_ADDRESS, FB16_BIT_OFFSET, FB16_BIT_WIDTH, value as u32); }

	const FB17_BIT_OFFSET: u8 = 17;
	const FB17_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 17)
	pub fn get_fb17() -> u8 { ::read(REGISTER_ADDRESS, FB17_BIT_OFFSET, FB17_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 17)
	pub fn set_fb17(value: u8) { ::write(REGISTER_ADDRESS, FB17_BIT_OFFSET, FB17_BIT_WIDTH, value as u32); }

	const FB18_BIT_OFFSET: u8 = 18;
	const FB18_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 18)
	pub fn get_fb18() -> u8 { ::read(REGISTER_ADDRESS, FB18_BIT_OFFSET, FB18_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 18)
	pub fn set_fb18(value: u8) { ::write(REGISTER_ADDRESS, FB18_BIT_OFFSET, FB18_BIT_WIDTH, value as u32); }

	const FB19_BIT_OFFSET: u8 = 19;
	const FB19_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 19)
	pub fn get_fb19() -> u8 { ::read(REGISTER_ADDRESS, FB19_BIT_OFFSET, FB19_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 19)
	pub fn set_fb19(value: u8) { ::write(REGISTER_ADDRESS, FB19_BIT_OFFSET, FB19_BIT_WIDTH, value as u32); }

	const FB20_BIT_OFFSET: u8 = 20;
	const FB20_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 20)
	pub fn get_fb20() -> u8 { ::read(REGISTER_ADDRESS, FB20_BIT_OFFSET, FB20_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 20)
	pub fn set_fb20(value: u8) { ::write(REGISTER_ADDRESS, FB20_BIT_OFFSET, FB20_BIT_WIDTH, value as u32); }

	const FB21_BIT_OFFSET: u8 = 21;
	const FB21_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 21)
	pub fn get_fb21() -> u8 { ::read(REGISTER_ADDRESS, FB21_BIT_OFFSET, FB21_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 21)
	pub fn set_fb21(value: u8) { ::write(REGISTER_ADDRESS, FB21_BIT_OFFSET, FB21_BIT_WIDTH, value as u32); }

	const FB22_BIT_OFFSET: u8 = 22;
	const FB22_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 22)
	pub fn get_fb22() -> u8 { ::read(REGISTER_ADDRESS, FB22_BIT_OFFSET, FB22_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 22)
	pub fn set_fb22(value: u8) { ::write(REGISTER_ADDRESS, FB22_BIT_OFFSET, FB22_BIT_WIDTH, value as u32); }

	const FB23_BIT_OFFSET: u8 = 23;
	const FB23_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 23)
	pub fn get_fb23() -> u8 { ::read(REGISTER_ADDRESS, FB23_BIT_OFFSET, FB23_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 23)
	pub fn set_fb23(value: u8) { ::write(REGISTER_ADDRESS, FB23_BIT_OFFSET, FB23_BIT_WIDTH, value as u32); }

	const FB24_BIT_OFFSET: u8 = 24;
	const FB24_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 24)
	pub fn get_fb24() -> u8 { ::read(REGISTER_ADDRESS, FB24_BIT_OFFSET, FB24_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 24)
	pub fn set_fb24(value: u8) { ::write(REGISTER_ADDRESS, FB24_BIT_OFFSET, FB24_BIT_WIDTH, value as u32); }

	const FB25_BIT_OFFSET: u8 = 25;
	const FB25_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 25)
	pub fn get_fb25() -> u8 { ::read(REGISTER_ADDRESS, FB25_BIT_OFFSET, FB25_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 25)
	pub fn set_fb25(value: u8) { ::write(REGISTER_ADDRESS, FB25_BIT_OFFSET, FB25_BIT_WIDTH, value as u32); }

	const FB26_BIT_OFFSET: u8 = 26;
	const FB26_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 26)
	pub fn get_fb26() -> u8 { ::read(REGISTER_ADDRESS, FB26_BIT_OFFSET, FB26_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 26)
	pub fn set_fb26(value: u8) { ::write(REGISTER_ADDRESS, FB26_BIT_OFFSET, FB26_BIT_WIDTH, value as u32); }

	const FB27_BIT_OFFSET: u8 = 27;
	const FB27_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 27)
	pub fn get_fb27() -> u8 { ::read(REGISTER_ADDRESS, FB27_BIT_OFFSET, FB27_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 27)
	pub fn set_fb27(value: u8) { ::write(REGISTER_ADDRESS, FB27_BIT_OFFSET, FB27_BIT_WIDTH, value as u32); }

	const FB28_BIT_OFFSET: u8 = 28;
	const FB28_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 28)
	pub fn get_fb28() -> u8 { ::read(REGISTER_ADDRESS, FB28_BIT_OFFSET, FB28_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 28)
	pub fn set_fb28(value: u8) { ::write(REGISTER_ADDRESS, FB28_BIT_OFFSET, FB28_BIT_WIDTH, value as u32); }

	const FB29_BIT_OFFSET: u8 = 29;
	const FB29_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 29)
	pub fn get_fb29() -> u8 { ::read(REGISTER_ADDRESS, FB29_BIT_OFFSET, FB29_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 29)
	pub fn set_fb29(value: u8) { ::write(REGISTER_ADDRESS, FB29_BIT_OFFSET, FB29_BIT_WIDTH, value as u32); }

	const FB30_BIT_OFFSET: u8 = 30;
	const FB30_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 30)
	pub fn get_fb30() -> u8 { ::read(REGISTER_ADDRESS, FB30_BIT_OFFSET, FB30_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 30)
	pub fn set_fb30(value: u8) { ::write(REGISTER_ADDRESS, FB30_BIT_OFFSET, FB30_BIT_WIDTH, value as u32); }

	const FB31_BIT_OFFSET: u8 = 31;
	const FB31_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 31)
	pub fn get_fb31() -> u8 { ::read(REGISTER_ADDRESS, FB31_BIT_OFFSET, FB31_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 31)
	pub fn set_fb31(value: u8) { ::write(REGISTER_ADDRESS, FB31_BIT_OFFSET, FB31_BIT_WIDTH, value as u32); }
}
/// Filter bank 9 register 2
/// Size: 0x20 bits
pub mod f9r2 {
	const REGISTER_ADDRESS_OFFSET: u32 = 0x28C;
	const REGISTER_ADDRESS: u32 = super::BASE_ADDRESS + REGISTER_ADDRESS_OFFSET;

	const FB0_BIT_OFFSET: u8 = 0;
	const FB0_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 0)
	pub fn get_fb0() -> u8 { ::read(REGISTER_ADDRESS, FB0_BIT_OFFSET, FB0_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 0)
	pub fn set_fb0(value: u8) { ::write(REGISTER_ADDRESS, FB0_BIT_OFFSET, FB0_BIT_WIDTH, value as u32); }

	const FB1_BIT_OFFSET: u8 = 1;
	const FB1_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 1)
	pub fn get_fb1() -> u8 { ::read(REGISTER_ADDRESS, FB1_BIT_OFFSET, FB1_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 1)
	pub fn set_fb1(value: u8) { ::write(REGISTER_ADDRESS, FB1_BIT_OFFSET, FB1_BIT_WIDTH, value as u32); }

	const FB2_BIT_OFFSET: u8 = 2;
	const FB2_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 2)
	pub fn get_fb2() -> u8 { ::read(REGISTER_ADDRESS, FB2_BIT_OFFSET, FB2_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 2)
	pub fn set_fb2(value: u8) { ::write(REGISTER_ADDRESS, FB2_BIT_OFFSET, FB2_BIT_WIDTH, value as u32); }

	const FB3_BIT_OFFSET: u8 = 3;
	const FB3_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 3)
	pub fn get_fb3() -> u8 { ::read(REGISTER_ADDRESS, FB3_BIT_OFFSET, FB3_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 3)
	pub fn set_fb3(value: u8) { ::write(REGISTER_ADDRESS, FB3_BIT_OFFSET, FB3_BIT_WIDTH, value as u32); }

	const FB4_BIT_OFFSET: u8 = 4;
	const FB4_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 4)
	pub fn get_fb4() -> u8 { ::read(REGISTER_ADDRESS, FB4_BIT_OFFSET, FB4_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 4)
	pub fn set_fb4(value: u8) { ::write(REGISTER_ADDRESS, FB4_BIT_OFFSET, FB4_BIT_WIDTH, value as u32); }

	const FB5_BIT_OFFSET: u8 = 5;
	const FB5_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 5)
	pub fn get_fb5() -> u8 { ::read(REGISTER_ADDRESS, FB5_BIT_OFFSET, FB5_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 5)
	pub fn set_fb5(value: u8) { ::write(REGISTER_ADDRESS, FB5_BIT_OFFSET, FB5_BIT_WIDTH, value as u32); }

	const FB6_BIT_OFFSET: u8 = 6;
	const FB6_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 6)
	pub fn get_fb6() -> u8 { ::read(REGISTER_ADDRESS, FB6_BIT_OFFSET, FB6_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 6)
	pub fn set_fb6(value: u8) { ::write(REGISTER_ADDRESS, FB6_BIT_OFFSET, FB6_BIT_WIDTH, value as u32); }

	const FB7_BIT_OFFSET: u8 = 7;
	const FB7_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 7)
	pub fn get_fb7() -> u8 { ::read(REGISTER_ADDRESS, FB7_BIT_OFFSET, FB7_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 7)
	pub fn set_fb7(value: u8) { ::write(REGISTER_ADDRESS, FB7_BIT_OFFSET, FB7_BIT_WIDTH, value as u32); }

	const FB8_BIT_OFFSET: u8 = 8;
	const FB8_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 8)
	pub fn get_fb8() -> u8 { ::read(REGISTER_ADDRESS, FB8_BIT_OFFSET, FB8_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 8)
	pub fn set_fb8(value: u8) { ::write(REGISTER_ADDRESS, FB8_BIT_OFFSET, FB8_BIT_WIDTH, value as u32); }

	const FB9_BIT_OFFSET: u8 = 9;
	const FB9_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 9)
	pub fn get_fb9() -> u8 { ::read(REGISTER_ADDRESS, FB9_BIT_OFFSET, FB9_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 9)
	pub fn set_fb9(value: u8) { ::write(REGISTER_ADDRESS, FB9_BIT_OFFSET, FB9_BIT_WIDTH, value as u32); }

	const FB10_BIT_OFFSET: u8 = 10;
	const FB10_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 10)
	pub fn get_fb10() -> u8 { ::read(REGISTER_ADDRESS, FB10_BIT_OFFSET, FB10_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 10)
	pub fn set_fb10(value: u8) { ::write(REGISTER_ADDRESS, FB10_BIT_OFFSET, FB10_BIT_WIDTH, value as u32); }

	const FB11_BIT_OFFSET: u8 = 11;
	const FB11_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 11)
	pub fn get_fb11() -> u8 { ::read(REGISTER_ADDRESS, FB11_BIT_OFFSET, FB11_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 11)
	pub fn set_fb11(value: u8) { ::write(REGISTER_ADDRESS, FB11_BIT_OFFSET, FB11_BIT_WIDTH, value as u32); }

	const FB12_BIT_OFFSET: u8 = 12;
	const FB12_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 12)
	pub fn get_fb12() -> u8 { ::read(REGISTER_ADDRESS, FB12_BIT_OFFSET, FB12_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 12)
	pub fn set_fb12(value: u8) { ::write(REGISTER_ADDRESS, FB12_BIT_OFFSET, FB12_BIT_WIDTH, value as u32); }

	const FB13_BIT_OFFSET: u8 = 13;
	const FB13_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 13)
	pub fn get_fb13() -> u8 { ::read(REGISTER_ADDRESS, FB13_BIT_OFFSET, FB13_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 13)
	pub fn set_fb13(value: u8) { ::write(REGISTER_ADDRESS, FB13_BIT_OFFSET, FB13_BIT_WIDTH, value as u32); }

	const FB14_BIT_OFFSET: u8 = 14;
	const FB14_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 14)
	pub fn get_fb14() -> u8 { ::read(REGISTER_ADDRESS, FB14_BIT_OFFSET, FB14_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 14)
	pub fn set_fb14(value: u8) { ::write(REGISTER_ADDRESS, FB14_BIT_OFFSET, FB14_BIT_WIDTH, value as u32); }

	const FB15_BIT_OFFSET: u8 = 15;
	const FB15_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 15)
	pub fn get_fb15() -> u8 { ::read(REGISTER_ADDRESS, FB15_BIT_OFFSET, FB15_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 15)
	pub fn set_fb15(value: u8) { ::write(REGISTER_ADDRESS, FB15_BIT_OFFSET, FB15_BIT_WIDTH, value as u32); }

	const FB16_BIT_OFFSET: u8 = 16;
	const FB16_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 16)
	pub fn get_fb16() -> u8 { ::read(REGISTER_ADDRESS, FB16_BIT_OFFSET, FB16_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 16)
	pub fn set_fb16(value: u8) { ::write(REGISTER_ADDRESS, FB16_BIT_OFFSET, FB16_BIT_WIDTH, value as u32); }

	const FB17_BIT_OFFSET: u8 = 17;
	const FB17_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 17)
	pub fn get_fb17() -> u8 { ::read(REGISTER_ADDRESS, FB17_BIT_OFFSET, FB17_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 17)
	pub fn set_fb17(value: u8) { ::write(REGISTER_ADDRESS, FB17_BIT_OFFSET, FB17_BIT_WIDTH, value as u32); }

	const FB18_BIT_OFFSET: u8 = 18;
	const FB18_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 18)
	pub fn get_fb18() -> u8 { ::read(REGISTER_ADDRESS, FB18_BIT_OFFSET, FB18_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 18)
	pub fn set_fb18(value: u8) { ::write(REGISTER_ADDRESS, FB18_BIT_OFFSET, FB18_BIT_WIDTH, value as u32); }

	const FB19_BIT_OFFSET: u8 = 19;
	const FB19_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 19)
	pub fn get_fb19() -> u8 { ::read(REGISTER_ADDRESS, FB19_BIT_OFFSET, FB19_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 19)
	pub fn set_fb19(value: u8) { ::write(REGISTER_ADDRESS, FB19_BIT_OFFSET, FB19_BIT_WIDTH, value as u32); }

	const FB20_BIT_OFFSET: u8 = 20;
	const FB20_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 20)
	pub fn get_fb20() -> u8 { ::read(REGISTER_ADDRESS, FB20_BIT_OFFSET, FB20_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 20)
	pub fn set_fb20(value: u8) { ::write(REGISTER_ADDRESS, FB20_BIT_OFFSET, FB20_BIT_WIDTH, value as u32); }

	const FB21_BIT_OFFSET: u8 = 21;
	const FB21_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 21)
	pub fn get_fb21() -> u8 { ::read(REGISTER_ADDRESS, FB21_BIT_OFFSET, FB21_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 21)
	pub fn set_fb21(value: u8) { ::write(REGISTER_ADDRESS, FB21_BIT_OFFSET, FB21_BIT_WIDTH, value as u32); }

	const FB22_BIT_OFFSET: u8 = 22;
	const FB22_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 22)
	pub fn get_fb22() -> u8 { ::read(REGISTER_ADDRESS, FB22_BIT_OFFSET, FB22_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 22)
	pub fn set_fb22(value: u8) { ::write(REGISTER_ADDRESS, FB22_BIT_OFFSET, FB22_BIT_WIDTH, value as u32); }

	const FB23_BIT_OFFSET: u8 = 23;
	const FB23_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 23)
	pub fn get_fb23() -> u8 { ::read(REGISTER_ADDRESS, FB23_BIT_OFFSET, FB23_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 23)
	pub fn set_fb23(value: u8) { ::write(REGISTER_ADDRESS, FB23_BIT_OFFSET, FB23_BIT_WIDTH, value as u32); }

	const FB24_BIT_OFFSET: u8 = 24;
	const FB24_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 24)
	pub fn get_fb24() -> u8 { ::read(REGISTER_ADDRESS, FB24_BIT_OFFSET, FB24_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 24)
	pub fn set_fb24(value: u8) { ::write(REGISTER_ADDRESS, FB24_BIT_OFFSET, FB24_BIT_WIDTH, value as u32); }

	const FB25_BIT_OFFSET: u8 = 25;
	const FB25_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 25)
	pub fn get_fb25() -> u8 { ::read(REGISTER_ADDRESS, FB25_BIT_OFFSET, FB25_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 25)
	pub fn set_fb25(value: u8) { ::write(REGISTER_ADDRESS, FB25_BIT_OFFSET, FB25_BIT_WIDTH, value as u32); }

	const FB26_BIT_OFFSET: u8 = 26;
	const FB26_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 26)
	pub fn get_fb26() -> u8 { ::read(REGISTER_ADDRESS, FB26_BIT_OFFSET, FB26_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 26)
	pub fn set_fb26(value: u8) { ::write(REGISTER_ADDRESS, FB26_BIT_OFFSET, FB26_BIT_WIDTH, value as u32); }

	const FB27_BIT_OFFSET: u8 = 27;
	const FB27_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 27)
	pub fn get_fb27() -> u8 { ::read(REGISTER_ADDRESS, FB27_BIT_OFFSET, FB27_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 27)
	pub fn set_fb27(value: u8) { ::write(REGISTER_ADDRESS, FB27_BIT_OFFSET, FB27_BIT_WIDTH, value as u32); }

	const FB28_BIT_OFFSET: u8 = 28;
	const FB28_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 28)
	pub fn get_fb28() -> u8 { ::read(REGISTER_ADDRESS, FB28_BIT_OFFSET, FB28_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 28)
	pub fn set_fb28(value: u8) { ::write(REGISTER_ADDRESS, FB28_BIT_OFFSET, FB28_BIT_WIDTH, value as u32); }

	const FB29_BIT_OFFSET: u8 = 29;
	const FB29_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 29)
	pub fn get_fb29() -> u8 { ::read(REGISTER_ADDRESS, FB29_BIT_OFFSET, FB29_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 29)
	pub fn set_fb29(value: u8) { ::write(REGISTER_ADDRESS, FB29_BIT_OFFSET, FB29_BIT_WIDTH, value as u32); }

	const FB30_BIT_OFFSET: u8 = 30;
	const FB30_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 30)
	pub fn get_fb30() -> u8 { ::read(REGISTER_ADDRESS, FB30_BIT_OFFSET, FB30_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 30)
	pub fn set_fb30(value: u8) { ::write(REGISTER_ADDRESS, FB30_BIT_OFFSET, FB30_BIT_WIDTH, value as u32); }

	const FB31_BIT_OFFSET: u8 = 31;
	const FB31_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 31)
	pub fn get_fb31() -> u8 { ::read(REGISTER_ADDRESS, FB31_BIT_OFFSET, FB31_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 31)
	pub fn set_fb31(value: u8) { ::write(REGISTER_ADDRESS, FB31_BIT_OFFSET, FB31_BIT_WIDTH, value as u32); }
}
/// Filter bank 10 register 1
/// Size: 0x20 bits
pub mod f10r1 {
	const REGISTER_ADDRESS_OFFSET: u32 = 0x290;
	const REGISTER_ADDRESS: u32 = super::BASE_ADDRESS + REGISTER_ADDRESS_OFFSET;

	const FB0_BIT_OFFSET: u8 = 0;
	const FB0_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 0)
	pub fn get_fb0() -> u8 { ::read(REGISTER_ADDRESS, FB0_BIT_OFFSET, FB0_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 0)
	pub fn set_fb0(value: u8) { ::write(REGISTER_ADDRESS, FB0_BIT_OFFSET, FB0_BIT_WIDTH, value as u32); }

	const FB1_BIT_OFFSET: u8 = 1;
	const FB1_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 1)
	pub fn get_fb1() -> u8 { ::read(REGISTER_ADDRESS, FB1_BIT_OFFSET, FB1_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 1)
	pub fn set_fb1(value: u8) { ::write(REGISTER_ADDRESS, FB1_BIT_OFFSET, FB1_BIT_WIDTH, value as u32); }

	const FB2_BIT_OFFSET: u8 = 2;
	const FB2_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 2)
	pub fn get_fb2() -> u8 { ::read(REGISTER_ADDRESS, FB2_BIT_OFFSET, FB2_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 2)
	pub fn set_fb2(value: u8) { ::write(REGISTER_ADDRESS, FB2_BIT_OFFSET, FB2_BIT_WIDTH, value as u32); }

	const FB3_BIT_OFFSET: u8 = 3;
	const FB3_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 3)
	pub fn get_fb3() -> u8 { ::read(REGISTER_ADDRESS, FB3_BIT_OFFSET, FB3_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 3)
	pub fn set_fb3(value: u8) { ::write(REGISTER_ADDRESS, FB3_BIT_OFFSET, FB3_BIT_WIDTH, value as u32); }

	const FB4_BIT_OFFSET: u8 = 4;
	const FB4_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 4)
	pub fn get_fb4() -> u8 { ::read(REGISTER_ADDRESS, FB4_BIT_OFFSET, FB4_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 4)
	pub fn set_fb4(value: u8) { ::write(REGISTER_ADDRESS, FB4_BIT_OFFSET, FB4_BIT_WIDTH, value as u32); }

	const FB5_BIT_OFFSET: u8 = 5;
	const FB5_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 5)
	pub fn get_fb5() -> u8 { ::read(REGISTER_ADDRESS, FB5_BIT_OFFSET, FB5_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 5)
	pub fn set_fb5(value: u8) { ::write(REGISTER_ADDRESS, FB5_BIT_OFFSET, FB5_BIT_WIDTH, value as u32); }

	const FB6_BIT_OFFSET: u8 = 6;
	const FB6_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 6)
	pub fn get_fb6() -> u8 { ::read(REGISTER_ADDRESS, FB6_BIT_OFFSET, FB6_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 6)
	pub fn set_fb6(value: u8) { ::write(REGISTER_ADDRESS, FB6_BIT_OFFSET, FB6_BIT_WIDTH, value as u32); }

	const FB7_BIT_OFFSET: u8 = 7;
	const FB7_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 7)
	pub fn get_fb7() -> u8 { ::read(REGISTER_ADDRESS, FB7_BIT_OFFSET, FB7_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 7)
	pub fn set_fb7(value: u8) { ::write(REGISTER_ADDRESS, FB7_BIT_OFFSET, FB7_BIT_WIDTH, value as u32); }

	const FB8_BIT_OFFSET: u8 = 8;
	const FB8_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 8)
	pub fn get_fb8() -> u8 { ::read(REGISTER_ADDRESS, FB8_BIT_OFFSET, FB8_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 8)
	pub fn set_fb8(value: u8) { ::write(REGISTER_ADDRESS, FB8_BIT_OFFSET, FB8_BIT_WIDTH, value as u32); }

	const FB9_BIT_OFFSET: u8 = 9;
	const FB9_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 9)
	pub fn get_fb9() -> u8 { ::read(REGISTER_ADDRESS, FB9_BIT_OFFSET, FB9_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 9)
	pub fn set_fb9(value: u8) { ::write(REGISTER_ADDRESS, FB9_BIT_OFFSET, FB9_BIT_WIDTH, value as u32); }

	const FB10_BIT_OFFSET: u8 = 10;
	const FB10_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 10)
	pub fn get_fb10() -> u8 { ::read(REGISTER_ADDRESS, FB10_BIT_OFFSET, FB10_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 10)
	pub fn set_fb10(value: u8) { ::write(REGISTER_ADDRESS, FB10_BIT_OFFSET, FB10_BIT_WIDTH, value as u32); }

	const FB11_BIT_OFFSET: u8 = 11;
	const FB11_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 11)
	pub fn get_fb11() -> u8 { ::read(REGISTER_ADDRESS, FB11_BIT_OFFSET, FB11_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 11)
	pub fn set_fb11(value: u8) { ::write(REGISTER_ADDRESS, FB11_BIT_OFFSET, FB11_BIT_WIDTH, value as u32); }

	const FB12_BIT_OFFSET: u8 = 12;
	const FB12_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 12)
	pub fn get_fb12() -> u8 { ::read(REGISTER_ADDRESS, FB12_BIT_OFFSET, FB12_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 12)
	pub fn set_fb12(value: u8) { ::write(REGISTER_ADDRESS, FB12_BIT_OFFSET, FB12_BIT_WIDTH, value as u32); }

	const FB13_BIT_OFFSET: u8 = 13;
	const FB13_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 13)
	pub fn get_fb13() -> u8 { ::read(REGISTER_ADDRESS, FB13_BIT_OFFSET, FB13_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 13)
	pub fn set_fb13(value: u8) { ::write(REGISTER_ADDRESS, FB13_BIT_OFFSET, FB13_BIT_WIDTH, value as u32); }

	const FB14_BIT_OFFSET: u8 = 14;
	const FB14_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 14)
	pub fn get_fb14() -> u8 { ::read(REGISTER_ADDRESS, FB14_BIT_OFFSET, FB14_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 14)
	pub fn set_fb14(value: u8) { ::write(REGISTER_ADDRESS, FB14_BIT_OFFSET, FB14_BIT_WIDTH, value as u32); }

	const FB15_BIT_OFFSET: u8 = 15;
	const FB15_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 15)
	pub fn get_fb15() -> u8 { ::read(REGISTER_ADDRESS, FB15_BIT_OFFSET, FB15_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 15)
	pub fn set_fb15(value: u8) { ::write(REGISTER_ADDRESS, FB15_BIT_OFFSET, FB15_BIT_WIDTH, value as u32); }

	const FB16_BIT_OFFSET: u8 = 16;
	const FB16_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 16)
	pub fn get_fb16() -> u8 { ::read(REGISTER_ADDRESS, FB16_BIT_OFFSET, FB16_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 16)
	pub fn set_fb16(value: u8) { ::write(REGISTER_ADDRESS, FB16_BIT_OFFSET, FB16_BIT_WIDTH, value as u32); }

	const FB17_BIT_OFFSET: u8 = 17;
	const FB17_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 17)
	pub fn get_fb17() -> u8 { ::read(REGISTER_ADDRESS, FB17_BIT_OFFSET, FB17_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 17)
	pub fn set_fb17(value: u8) { ::write(REGISTER_ADDRESS, FB17_BIT_OFFSET, FB17_BIT_WIDTH, value as u32); }

	const FB18_BIT_OFFSET: u8 = 18;
	const FB18_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 18)
	pub fn get_fb18() -> u8 { ::read(REGISTER_ADDRESS, FB18_BIT_OFFSET, FB18_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 18)
	pub fn set_fb18(value: u8) { ::write(REGISTER_ADDRESS, FB18_BIT_OFFSET, FB18_BIT_WIDTH, value as u32); }

	const FB19_BIT_OFFSET: u8 = 19;
	const FB19_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 19)
	pub fn get_fb19() -> u8 { ::read(REGISTER_ADDRESS, FB19_BIT_OFFSET, FB19_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 19)
	pub fn set_fb19(value: u8) { ::write(REGISTER_ADDRESS, FB19_BIT_OFFSET, FB19_BIT_WIDTH, value as u32); }

	const FB20_BIT_OFFSET: u8 = 20;
	const FB20_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 20)
	pub fn get_fb20() -> u8 { ::read(REGISTER_ADDRESS, FB20_BIT_OFFSET, FB20_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 20)
	pub fn set_fb20(value: u8) { ::write(REGISTER_ADDRESS, FB20_BIT_OFFSET, FB20_BIT_WIDTH, value as u32); }

	const FB21_BIT_OFFSET: u8 = 21;
	const FB21_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 21)
	pub fn get_fb21() -> u8 { ::read(REGISTER_ADDRESS, FB21_BIT_OFFSET, FB21_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 21)
	pub fn set_fb21(value: u8) { ::write(REGISTER_ADDRESS, FB21_BIT_OFFSET, FB21_BIT_WIDTH, value as u32); }

	const FB22_BIT_OFFSET: u8 = 22;
	const FB22_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 22)
	pub fn get_fb22() -> u8 { ::read(REGISTER_ADDRESS, FB22_BIT_OFFSET, FB22_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 22)
	pub fn set_fb22(value: u8) { ::write(REGISTER_ADDRESS, FB22_BIT_OFFSET, FB22_BIT_WIDTH, value as u32); }

	const FB23_BIT_OFFSET: u8 = 23;
	const FB23_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 23)
	pub fn get_fb23() -> u8 { ::read(REGISTER_ADDRESS, FB23_BIT_OFFSET, FB23_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 23)
	pub fn set_fb23(value: u8) { ::write(REGISTER_ADDRESS, FB23_BIT_OFFSET, FB23_BIT_WIDTH, value as u32); }

	const FB24_BIT_OFFSET: u8 = 24;
	const FB24_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 24)
	pub fn get_fb24() -> u8 { ::read(REGISTER_ADDRESS, FB24_BIT_OFFSET, FB24_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 24)
	pub fn set_fb24(value: u8) { ::write(REGISTER_ADDRESS, FB24_BIT_OFFSET, FB24_BIT_WIDTH, value as u32); }

	const FB25_BIT_OFFSET: u8 = 25;
	const FB25_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 25)
	pub fn get_fb25() -> u8 { ::read(REGISTER_ADDRESS, FB25_BIT_OFFSET, FB25_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 25)
	pub fn set_fb25(value: u8) { ::write(REGISTER_ADDRESS, FB25_BIT_OFFSET, FB25_BIT_WIDTH, value as u32); }

	const FB26_BIT_OFFSET: u8 = 26;
	const FB26_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 26)
	pub fn get_fb26() -> u8 { ::read(REGISTER_ADDRESS, FB26_BIT_OFFSET, FB26_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 26)
	pub fn set_fb26(value: u8) { ::write(REGISTER_ADDRESS, FB26_BIT_OFFSET, FB26_BIT_WIDTH, value as u32); }

	const FB27_BIT_OFFSET: u8 = 27;
	const FB27_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 27)
	pub fn get_fb27() -> u8 { ::read(REGISTER_ADDRESS, FB27_BIT_OFFSET, FB27_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 27)
	pub fn set_fb27(value: u8) { ::write(REGISTER_ADDRESS, FB27_BIT_OFFSET, FB27_BIT_WIDTH, value as u32); }

	const FB28_BIT_OFFSET: u8 = 28;
	const FB28_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 28)
	pub fn get_fb28() -> u8 { ::read(REGISTER_ADDRESS, FB28_BIT_OFFSET, FB28_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 28)
	pub fn set_fb28(value: u8) { ::write(REGISTER_ADDRESS, FB28_BIT_OFFSET, FB28_BIT_WIDTH, value as u32); }

	const FB29_BIT_OFFSET: u8 = 29;
	const FB29_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 29)
	pub fn get_fb29() -> u8 { ::read(REGISTER_ADDRESS, FB29_BIT_OFFSET, FB29_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 29)
	pub fn set_fb29(value: u8) { ::write(REGISTER_ADDRESS, FB29_BIT_OFFSET, FB29_BIT_WIDTH, value as u32); }

	const FB30_BIT_OFFSET: u8 = 30;
	const FB30_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 30)
	pub fn get_fb30() -> u8 { ::read(REGISTER_ADDRESS, FB30_BIT_OFFSET, FB30_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 30)
	pub fn set_fb30(value: u8) { ::write(REGISTER_ADDRESS, FB30_BIT_OFFSET, FB30_BIT_WIDTH, value as u32); }

	const FB31_BIT_OFFSET: u8 = 31;
	const FB31_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 31)
	pub fn get_fb31() -> u8 { ::read(REGISTER_ADDRESS, FB31_BIT_OFFSET, FB31_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 31)
	pub fn set_fb31(value: u8) { ::write(REGISTER_ADDRESS, FB31_BIT_OFFSET, FB31_BIT_WIDTH, value as u32); }
}
/// Filter bank 10 register 2
/// Size: 0x20 bits
pub mod f10r2 {
	const REGISTER_ADDRESS_OFFSET: u32 = 0x294;
	const REGISTER_ADDRESS: u32 = super::BASE_ADDRESS + REGISTER_ADDRESS_OFFSET;

	const FB0_BIT_OFFSET: u8 = 0;
	const FB0_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 0)
	pub fn get_fb0() -> u8 { ::read(REGISTER_ADDRESS, FB0_BIT_OFFSET, FB0_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 0)
	pub fn set_fb0(value: u8) { ::write(REGISTER_ADDRESS, FB0_BIT_OFFSET, FB0_BIT_WIDTH, value as u32); }

	const FB1_BIT_OFFSET: u8 = 1;
	const FB1_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 1)
	pub fn get_fb1() -> u8 { ::read(REGISTER_ADDRESS, FB1_BIT_OFFSET, FB1_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 1)
	pub fn set_fb1(value: u8) { ::write(REGISTER_ADDRESS, FB1_BIT_OFFSET, FB1_BIT_WIDTH, value as u32); }

	const FB2_BIT_OFFSET: u8 = 2;
	const FB2_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 2)
	pub fn get_fb2() -> u8 { ::read(REGISTER_ADDRESS, FB2_BIT_OFFSET, FB2_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 2)
	pub fn set_fb2(value: u8) { ::write(REGISTER_ADDRESS, FB2_BIT_OFFSET, FB2_BIT_WIDTH, value as u32); }

	const FB3_BIT_OFFSET: u8 = 3;
	const FB3_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 3)
	pub fn get_fb3() -> u8 { ::read(REGISTER_ADDRESS, FB3_BIT_OFFSET, FB3_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 3)
	pub fn set_fb3(value: u8) { ::write(REGISTER_ADDRESS, FB3_BIT_OFFSET, FB3_BIT_WIDTH, value as u32); }

	const FB4_BIT_OFFSET: u8 = 4;
	const FB4_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 4)
	pub fn get_fb4() -> u8 { ::read(REGISTER_ADDRESS, FB4_BIT_OFFSET, FB4_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 4)
	pub fn set_fb4(value: u8) { ::write(REGISTER_ADDRESS, FB4_BIT_OFFSET, FB4_BIT_WIDTH, value as u32); }

	const FB5_BIT_OFFSET: u8 = 5;
	const FB5_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 5)
	pub fn get_fb5() -> u8 { ::read(REGISTER_ADDRESS, FB5_BIT_OFFSET, FB5_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 5)
	pub fn set_fb5(value: u8) { ::write(REGISTER_ADDRESS, FB5_BIT_OFFSET, FB5_BIT_WIDTH, value as u32); }

	const FB6_BIT_OFFSET: u8 = 6;
	const FB6_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 6)
	pub fn get_fb6() -> u8 { ::read(REGISTER_ADDRESS, FB6_BIT_OFFSET, FB6_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 6)
	pub fn set_fb6(value: u8) { ::write(REGISTER_ADDRESS, FB6_BIT_OFFSET, FB6_BIT_WIDTH, value as u32); }

	const FB7_BIT_OFFSET: u8 = 7;
	const FB7_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 7)
	pub fn get_fb7() -> u8 { ::read(REGISTER_ADDRESS, FB7_BIT_OFFSET, FB7_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 7)
	pub fn set_fb7(value: u8) { ::write(REGISTER_ADDRESS, FB7_BIT_OFFSET, FB7_BIT_WIDTH, value as u32); }

	const FB8_BIT_OFFSET: u8 = 8;
	const FB8_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 8)
	pub fn get_fb8() -> u8 { ::read(REGISTER_ADDRESS, FB8_BIT_OFFSET, FB8_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 8)
	pub fn set_fb8(value: u8) { ::write(REGISTER_ADDRESS, FB8_BIT_OFFSET, FB8_BIT_WIDTH, value as u32); }

	const FB9_BIT_OFFSET: u8 = 9;
	const FB9_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 9)
	pub fn get_fb9() -> u8 { ::read(REGISTER_ADDRESS, FB9_BIT_OFFSET, FB9_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 9)
	pub fn set_fb9(value: u8) { ::write(REGISTER_ADDRESS, FB9_BIT_OFFSET, FB9_BIT_WIDTH, value as u32); }

	const FB10_BIT_OFFSET: u8 = 10;
	const FB10_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 10)
	pub fn get_fb10() -> u8 { ::read(REGISTER_ADDRESS, FB10_BIT_OFFSET, FB10_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 10)
	pub fn set_fb10(value: u8) { ::write(REGISTER_ADDRESS, FB10_BIT_OFFSET, FB10_BIT_WIDTH, value as u32); }

	const FB11_BIT_OFFSET: u8 = 11;
	const FB11_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 11)
	pub fn get_fb11() -> u8 { ::read(REGISTER_ADDRESS, FB11_BIT_OFFSET, FB11_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 11)
	pub fn set_fb11(value: u8) { ::write(REGISTER_ADDRESS, FB11_BIT_OFFSET, FB11_BIT_WIDTH, value as u32); }

	const FB12_BIT_OFFSET: u8 = 12;
	const FB12_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 12)
	pub fn get_fb12() -> u8 { ::read(REGISTER_ADDRESS, FB12_BIT_OFFSET, FB12_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 12)
	pub fn set_fb12(value: u8) { ::write(REGISTER_ADDRESS, FB12_BIT_OFFSET, FB12_BIT_WIDTH, value as u32); }

	const FB13_BIT_OFFSET: u8 = 13;
	const FB13_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 13)
	pub fn get_fb13() -> u8 { ::read(REGISTER_ADDRESS, FB13_BIT_OFFSET, FB13_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 13)
	pub fn set_fb13(value: u8) { ::write(REGISTER_ADDRESS, FB13_BIT_OFFSET, FB13_BIT_WIDTH, value as u32); }

	const FB14_BIT_OFFSET: u8 = 14;
	const FB14_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 14)
	pub fn get_fb14() -> u8 { ::read(REGISTER_ADDRESS, FB14_BIT_OFFSET, FB14_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 14)
	pub fn set_fb14(value: u8) { ::write(REGISTER_ADDRESS, FB14_BIT_OFFSET, FB14_BIT_WIDTH, value as u32); }

	const FB15_BIT_OFFSET: u8 = 15;
	const FB15_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 15)
	pub fn get_fb15() -> u8 { ::read(REGISTER_ADDRESS, FB15_BIT_OFFSET, FB15_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 15)
	pub fn set_fb15(value: u8) { ::write(REGISTER_ADDRESS, FB15_BIT_OFFSET, FB15_BIT_WIDTH, value as u32); }

	const FB16_BIT_OFFSET: u8 = 16;
	const FB16_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 16)
	pub fn get_fb16() -> u8 { ::read(REGISTER_ADDRESS, FB16_BIT_OFFSET, FB16_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 16)
	pub fn set_fb16(value: u8) { ::write(REGISTER_ADDRESS, FB16_BIT_OFFSET, FB16_BIT_WIDTH, value as u32); }

	const FB17_BIT_OFFSET: u8 = 17;
	const FB17_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 17)
	pub fn get_fb17() -> u8 { ::read(REGISTER_ADDRESS, FB17_BIT_OFFSET, FB17_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 17)
	pub fn set_fb17(value: u8) { ::write(REGISTER_ADDRESS, FB17_BIT_OFFSET, FB17_BIT_WIDTH, value as u32); }

	const FB18_BIT_OFFSET: u8 = 18;
	const FB18_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 18)
	pub fn get_fb18() -> u8 { ::read(REGISTER_ADDRESS, FB18_BIT_OFFSET, FB18_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 18)
	pub fn set_fb18(value: u8) { ::write(REGISTER_ADDRESS, FB18_BIT_OFFSET, FB18_BIT_WIDTH, value as u32); }

	const FB19_BIT_OFFSET: u8 = 19;
	const FB19_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 19)
	pub fn get_fb19() -> u8 { ::read(REGISTER_ADDRESS, FB19_BIT_OFFSET, FB19_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 19)
	pub fn set_fb19(value: u8) { ::write(REGISTER_ADDRESS, FB19_BIT_OFFSET, FB19_BIT_WIDTH, value as u32); }

	const FB20_BIT_OFFSET: u8 = 20;
	const FB20_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 20)
	pub fn get_fb20() -> u8 { ::read(REGISTER_ADDRESS, FB20_BIT_OFFSET, FB20_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 20)
	pub fn set_fb20(value: u8) { ::write(REGISTER_ADDRESS, FB20_BIT_OFFSET, FB20_BIT_WIDTH, value as u32); }

	const FB21_BIT_OFFSET: u8 = 21;
	const FB21_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 21)
	pub fn get_fb21() -> u8 { ::read(REGISTER_ADDRESS, FB21_BIT_OFFSET, FB21_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 21)
	pub fn set_fb21(value: u8) { ::write(REGISTER_ADDRESS, FB21_BIT_OFFSET, FB21_BIT_WIDTH, value as u32); }

	const FB22_BIT_OFFSET: u8 = 22;
	const FB22_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 22)
	pub fn get_fb22() -> u8 { ::read(REGISTER_ADDRESS, FB22_BIT_OFFSET, FB22_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 22)
	pub fn set_fb22(value: u8) { ::write(REGISTER_ADDRESS, FB22_BIT_OFFSET, FB22_BIT_WIDTH, value as u32); }

	const FB23_BIT_OFFSET: u8 = 23;
	const FB23_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 23)
	pub fn get_fb23() -> u8 { ::read(REGISTER_ADDRESS, FB23_BIT_OFFSET, FB23_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 23)
	pub fn set_fb23(value: u8) { ::write(REGISTER_ADDRESS, FB23_BIT_OFFSET, FB23_BIT_WIDTH, value as u32); }

	const FB24_BIT_OFFSET: u8 = 24;
	const FB24_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 24)
	pub fn get_fb24() -> u8 { ::read(REGISTER_ADDRESS, FB24_BIT_OFFSET, FB24_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 24)
	pub fn set_fb24(value: u8) { ::write(REGISTER_ADDRESS, FB24_BIT_OFFSET, FB24_BIT_WIDTH, value as u32); }

	const FB25_BIT_OFFSET: u8 = 25;
	const FB25_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 25)
	pub fn get_fb25() -> u8 { ::read(REGISTER_ADDRESS, FB25_BIT_OFFSET, FB25_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 25)
	pub fn set_fb25(value: u8) { ::write(REGISTER_ADDRESS, FB25_BIT_OFFSET, FB25_BIT_WIDTH, value as u32); }

	const FB26_BIT_OFFSET: u8 = 26;
	const FB26_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 26)
	pub fn get_fb26() -> u8 { ::read(REGISTER_ADDRESS, FB26_BIT_OFFSET, FB26_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 26)
	pub fn set_fb26(value: u8) { ::write(REGISTER_ADDRESS, FB26_BIT_OFFSET, FB26_BIT_WIDTH, value as u32); }

	const FB27_BIT_OFFSET: u8 = 27;
	const FB27_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 27)
	pub fn get_fb27() -> u8 { ::read(REGISTER_ADDRESS, FB27_BIT_OFFSET, FB27_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 27)
	pub fn set_fb27(value: u8) { ::write(REGISTER_ADDRESS, FB27_BIT_OFFSET, FB27_BIT_WIDTH, value as u32); }

	const FB28_BIT_OFFSET: u8 = 28;
	const FB28_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 28)
	pub fn get_fb28() -> u8 { ::read(REGISTER_ADDRESS, FB28_BIT_OFFSET, FB28_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 28)
	pub fn set_fb28(value: u8) { ::write(REGISTER_ADDRESS, FB28_BIT_OFFSET, FB28_BIT_WIDTH, value as u32); }

	const FB29_BIT_OFFSET: u8 = 29;
	const FB29_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 29)
	pub fn get_fb29() -> u8 { ::read(REGISTER_ADDRESS, FB29_BIT_OFFSET, FB29_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 29)
	pub fn set_fb29(value: u8) { ::write(REGISTER_ADDRESS, FB29_BIT_OFFSET, FB29_BIT_WIDTH, value as u32); }

	const FB30_BIT_OFFSET: u8 = 30;
	const FB30_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 30)
	pub fn get_fb30() -> u8 { ::read(REGISTER_ADDRESS, FB30_BIT_OFFSET, FB30_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 30)
	pub fn set_fb30(value: u8) { ::write(REGISTER_ADDRESS, FB30_BIT_OFFSET, FB30_BIT_WIDTH, value as u32); }

	const FB31_BIT_OFFSET: u8 = 31;
	const FB31_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 31)
	pub fn get_fb31() -> u8 { ::read(REGISTER_ADDRESS, FB31_BIT_OFFSET, FB31_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 31)
	pub fn set_fb31(value: u8) { ::write(REGISTER_ADDRESS, FB31_BIT_OFFSET, FB31_BIT_WIDTH, value as u32); }
}
/// Filter bank 11 register 1
/// Size: 0x20 bits
pub mod f11r1 {
	const REGISTER_ADDRESS_OFFSET: u32 = 0x298;
	const REGISTER_ADDRESS: u32 = super::BASE_ADDRESS + REGISTER_ADDRESS_OFFSET;

	const FB0_BIT_OFFSET: u8 = 0;
	const FB0_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 0)
	pub fn get_fb0() -> u8 { ::read(REGISTER_ADDRESS, FB0_BIT_OFFSET, FB0_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 0)
	pub fn set_fb0(value: u8) { ::write(REGISTER_ADDRESS, FB0_BIT_OFFSET, FB0_BIT_WIDTH, value as u32); }

	const FB1_BIT_OFFSET: u8 = 1;
	const FB1_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 1)
	pub fn get_fb1() -> u8 { ::read(REGISTER_ADDRESS, FB1_BIT_OFFSET, FB1_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 1)
	pub fn set_fb1(value: u8) { ::write(REGISTER_ADDRESS, FB1_BIT_OFFSET, FB1_BIT_WIDTH, value as u32); }

	const FB2_BIT_OFFSET: u8 = 2;
	const FB2_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 2)
	pub fn get_fb2() -> u8 { ::read(REGISTER_ADDRESS, FB2_BIT_OFFSET, FB2_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 2)
	pub fn set_fb2(value: u8) { ::write(REGISTER_ADDRESS, FB2_BIT_OFFSET, FB2_BIT_WIDTH, value as u32); }

	const FB3_BIT_OFFSET: u8 = 3;
	const FB3_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 3)
	pub fn get_fb3() -> u8 { ::read(REGISTER_ADDRESS, FB3_BIT_OFFSET, FB3_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 3)
	pub fn set_fb3(value: u8) { ::write(REGISTER_ADDRESS, FB3_BIT_OFFSET, FB3_BIT_WIDTH, value as u32); }

	const FB4_BIT_OFFSET: u8 = 4;
	const FB4_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 4)
	pub fn get_fb4() -> u8 { ::read(REGISTER_ADDRESS, FB4_BIT_OFFSET, FB4_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 4)
	pub fn set_fb4(value: u8) { ::write(REGISTER_ADDRESS, FB4_BIT_OFFSET, FB4_BIT_WIDTH, value as u32); }

	const FB5_BIT_OFFSET: u8 = 5;
	const FB5_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 5)
	pub fn get_fb5() -> u8 { ::read(REGISTER_ADDRESS, FB5_BIT_OFFSET, FB5_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 5)
	pub fn set_fb5(value: u8) { ::write(REGISTER_ADDRESS, FB5_BIT_OFFSET, FB5_BIT_WIDTH, value as u32); }

	const FB6_BIT_OFFSET: u8 = 6;
	const FB6_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 6)
	pub fn get_fb6() -> u8 { ::read(REGISTER_ADDRESS, FB6_BIT_OFFSET, FB6_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 6)
	pub fn set_fb6(value: u8) { ::write(REGISTER_ADDRESS, FB6_BIT_OFFSET, FB6_BIT_WIDTH, value as u32); }

	const FB7_BIT_OFFSET: u8 = 7;
	const FB7_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 7)
	pub fn get_fb7() -> u8 { ::read(REGISTER_ADDRESS, FB7_BIT_OFFSET, FB7_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 7)
	pub fn set_fb7(value: u8) { ::write(REGISTER_ADDRESS, FB7_BIT_OFFSET, FB7_BIT_WIDTH, value as u32); }

	const FB8_BIT_OFFSET: u8 = 8;
	const FB8_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 8)
	pub fn get_fb8() -> u8 { ::read(REGISTER_ADDRESS, FB8_BIT_OFFSET, FB8_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 8)
	pub fn set_fb8(value: u8) { ::write(REGISTER_ADDRESS, FB8_BIT_OFFSET, FB8_BIT_WIDTH, value as u32); }

	const FB9_BIT_OFFSET: u8 = 9;
	const FB9_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 9)
	pub fn get_fb9() -> u8 { ::read(REGISTER_ADDRESS, FB9_BIT_OFFSET, FB9_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 9)
	pub fn set_fb9(value: u8) { ::write(REGISTER_ADDRESS, FB9_BIT_OFFSET, FB9_BIT_WIDTH, value as u32); }

	const FB10_BIT_OFFSET: u8 = 10;
	const FB10_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 10)
	pub fn get_fb10() -> u8 { ::read(REGISTER_ADDRESS, FB10_BIT_OFFSET, FB10_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 10)
	pub fn set_fb10(value: u8) { ::write(REGISTER_ADDRESS, FB10_BIT_OFFSET, FB10_BIT_WIDTH, value as u32); }

	const FB11_BIT_OFFSET: u8 = 11;
	const FB11_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 11)
	pub fn get_fb11() -> u8 { ::read(REGISTER_ADDRESS, FB11_BIT_OFFSET, FB11_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 11)
	pub fn set_fb11(value: u8) { ::write(REGISTER_ADDRESS, FB11_BIT_OFFSET, FB11_BIT_WIDTH, value as u32); }

	const FB12_BIT_OFFSET: u8 = 12;
	const FB12_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 12)
	pub fn get_fb12() -> u8 { ::read(REGISTER_ADDRESS, FB12_BIT_OFFSET, FB12_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 12)
	pub fn set_fb12(value: u8) { ::write(REGISTER_ADDRESS, FB12_BIT_OFFSET, FB12_BIT_WIDTH, value as u32); }

	const FB13_BIT_OFFSET: u8 = 13;
	const FB13_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 13)
	pub fn get_fb13() -> u8 { ::read(REGISTER_ADDRESS, FB13_BIT_OFFSET, FB13_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 13)
	pub fn set_fb13(value: u8) { ::write(REGISTER_ADDRESS, FB13_BIT_OFFSET, FB13_BIT_WIDTH, value as u32); }

	const FB14_BIT_OFFSET: u8 = 14;
	const FB14_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 14)
	pub fn get_fb14() -> u8 { ::read(REGISTER_ADDRESS, FB14_BIT_OFFSET, FB14_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 14)
	pub fn set_fb14(value: u8) { ::write(REGISTER_ADDRESS, FB14_BIT_OFFSET, FB14_BIT_WIDTH, value as u32); }

	const FB15_BIT_OFFSET: u8 = 15;
	const FB15_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 15)
	pub fn get_fb15() -> u8 { ::read(REGISTER_ADDRESS, FB15_BIT_OFFSET, FB15_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 15)
	pub fn set_fb15(value: u8) { ::write(REGISTER_ADDRESS, FB15_BIT_OFFSET, FB15_BIT_WIDTH, value as u32); }

	const FB16_BIT_OFFSET: u8 = 16;
	const FB16_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 16)
	pub fn get_fb16() -> u8 { ::read(REGISTER_ADDRESS, FB16_BIT_OFFSET, FB16_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 16)
	pub fn set_fb16(value: u8) { ::write(REGISTER_ADDRESS, FB16_BIT_OFFSET, FB16_BIT_WIDTH, value as u32); }

	const FB17_BIT_OFFSET: u8 = 17;
	const FB17_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 17)
	pub fn get_fb17() -> u8 { ::read(REGISTER_ADDRESS, FB17_BIT_OFFSET, FB17_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 17)
	pub fn set_fb17(value: u8) { ::write(REGISTER_ADDRESS, FB17_BIT_OFFSET, FB17_BIT_WIDTH, value as u32); }

	const FB18_BIT_OFFSET: u8 = 18;
	const FB18_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 18)
	pub fn get_fb18() -> u8 { ::read(REGISTER_ADDRESS, FB18_BIT_OFFSET, FB18_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 18)
	pub fn set_fb18(value: u8) { ::write(REGISTER_ADDRESS, FB18_BIT_OFFSET, FB18_BIT_WIDTH, value as u32); }

	const FB19_BIT_OFFSET: u8 = 19;
	const FB19_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 19)
	pub fn get_fb19() -> u8 { ::read(REGISTER_ADDRESS, FB19_BIT_OFFSET, FB19_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 19)
	pub fn set_fb19(value: u8) { ::write(REGISTER_ADDRESS, FB19_BIT_OFFSET, FB19_BIT_WIDTH, value as u32); }

	const FB20_BIT_OFFSET: u8 = 20;
	const FB20_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 20)
	pub fn get_fb20() -> u8 { ::read(REGISTER_ADDRESS, FB20_BIT_OFFSET, FB20_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 20)
	pub fn set_fb20(value: u8) { ::write(REGISTER_ADDRESS, FB20_BIT_OFFSET, FB20_BIT_WIDTH, value as u32); }

	const FB21_BIT_OFFSET: u8 = 21;
	const FB21_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 21)
	pub fn get_fb21() -> u8 { ::read(REGISTER_ADDRESS, FB21_BIT_OFFSET, FB21_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 21)
	pub fn set_fb21(value: u8) { ::write(REGISTER_ADDRESS, FB21_BIT_OFFSET, FB21_BIT_WIDTH, value as u32); }

	const FB22_BIT_OFFSET: u8 = 22;
	const FB22_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 22)
	pub fn get_fb22() -> u8 { ::read(REGISTER_ADDRESS, FB22_BIT_OFFSET, FB22_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 22)
	pub fn set_fb22(value: u8) { ::write(REGISTER_ADDRESS, FB22_BIT_OFFSET, FB22_BIT_WIDTH, value as u32); }

	const FB23_BIT_OFFSET: u8 = 23;
	const FB23_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 23)
	pub fn get_fb23() -> u8 { ::read(REGISTER_ADDRESS, FB23_BIT_OFFSET, FB23_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 23)
	pub fn set_fb23(value: u8) { ::write(REGISTER_ADDRESS, FB23_BIT_OFFSET, FB23_BIT_WIDTH, value as u32); }

	const FB24_BIT_OFFSET: u8 = 24;
	const FB24_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 24)
	pub fn get_fb24() -> u8 { ::read(REGISTER_ADDRESS, FB24_BIT_OFFSET, FB24_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 24)
	pub fn set_fb24(value: u8) { ::write(REGISTER_ADDRESS, FB24_BIT_OFFSET, FB24_BIT_WIDTH, value as u32); }

	const FB25_BIT_OFFSET: u8 = 25;
	const FB25_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 25)
	pub fn get_fb25() -> u8 { ::read(REGISTER_ADDRESS, FB25_BIT_OFFSET, FB25_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 25)
	pub fn set_fb25(value: u8) { ::write(REGISTER_ADDRESS, FB25_BIT_OFFSET, FB25_BIT_WIDTH, value as u32); }

	const FB26_BIT_OFFSET: u8 = 26;
	const FB26_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 26)
	pub fn get_fb26() -> u8 { ::read(REGISTER_ADDRESS, FB26_BIT_OFFSET, FB26_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 26)
	pub fn set_fb26(value: u8) { ::write(REGISTER_ADDRESS, FB26_BIT_OFFSET, FB26_BIT_WIDTH, value as u32); }

	const FB27_BIT_OFFSET: u8 = 27;
	const FB27_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 27)
	pub fn get_fb27() -> u8 { ::read(REGISTER_ADDRESS, FB27_BIT_OFFSET, FB27_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 27)
	pub fn set_fb27(value: u8) { ::write(REGISTER_ADDRESS, FB27_BIT_OFFSET, FB27_BIT_WIDTH, value as u32); }

	const FB28_BIT_OFFSET: u8 = 28;
	const FB28_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 28)
	pub fn get_fb28() -> u8 { ::read(REGISTER_ADDRESS, FB28_BIT_OFFSET, FB28_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 28)
	pub fn set_fb28(value: u8) { ::write(REGISTER_ADDRESS, FB28_BIT_OFFSET, FB28_BIT_WIDTH, value as u32); }

	const FB29_BIT_OFFSET: u8 = 29;
	const FB29_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 29)
	pub fn get_fb29() -> u8 { ::read(REGISTER_ADDRESS, FB29_BIT_OFFSET, FB29_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 29)
	pub fn set_fb29(value: u8) { ::write(REGISTER_ADDRESS, FB29_BIT_OFFSET, FB29_BIT_WIDTH, value as u32); }

	const FB30_BIT_OFFSET: u8 = 30;
	const FB30_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 30)
	pub fn get_fb30() -> u8 { ::read(REGISTER_ADDRESS, FB30_BIT_OFFSET, FB30_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 30)
	pub fn set_fb30(value: u8) { ::write(REGISTER_ADDRESS, FB30_BIT_OFFSET, FB30_BIT_WIDTH, value as u32); }

	const FB31_BIT_OFFSET: u8 = 31;
	const FB31_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 31)
	pub fn get_fb31() -> u8 { ::read(REGISTER_ADDRESS, FB31_BIT_OFFSET, FB31_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 31)
	pub fn set_fb31(value: u8) { ::write(REGISTER_ADDRESS, FB31_BIT_OFFSET, FB31_BIT_WIDTH, value as u32); }
}
/// Filter bank 11 register 2
/// Size: 0x20 bits
pub mod f11r2 {
	const REGISTER_ADDRESS_OFFSET: u32 = 0x29C;
	const REGISTER_ADDRESS: u32 = super::BASE_ADDRESS + REGISTER_ADDRESS_OFFSET;

	const FB0_BIT_OFFSET: u8 = 0;
	const FB0_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 0)
	pub fn get_fb0() -> u8 { ::read(REGISTER_ADDRESS, FB0_BIT_OFFSET, FB0_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 0)
	pub fn set_fb0(value: u8) { ::write(REGISTER_ADDRESS, FB0_BIT_OFFSET, FB0_BIT_WIDTH, value as u32); }

	const FB1_BIT_OFFSET: u8 = 1;
	const FB1_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 1)
	pub fn get_fb1() -> u8 { ::read(REGISTER_ADDRESS, FB1_BIT_OFFSET, FB1_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 1)
	pub fn set_fb1(value: u8) { ::write(REGISTER_ADDRESS, FB1_BIT_OFFSET, FB1_BIT_WIDTH, value as u32); }

	const FB2_BIT_OFFSET: u8 = 2;
	const FB2_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 2)
	pub fn get_fb2() -> u8 { ::read(REGISTER_ADDRESS, FB2_BIT_OFFSET, FB2_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 2)
	pub fn set_fb2(value: u8) { ::write(REGISTER_ADDRESS, FB2_BIT_OFFSET, FB2_BIT_WIDTH, value as u32); }

	const FB3_BIT_OFFSET: u8 = 3;
	const FB3_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 3)
	pub fn get_fb3() -> u8 { ::read(REGISTER_ADDRESS, FB3_BIT_OFFSET, FB3_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 3)
	pub fn set_fb3(value: u8) { ::write(REGISTER_ADDRESS, FB3_BIT_OFFSET, FB3_BIT_WIDTH, value as u32); }

	const FB4_BIT_OFFSET: u8 = 4;
	const FB4_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 4)
	pub fn get_fb4() -> u8 { ::read(REGISTER_ADDRESS, FB4_BIT_OFFSET, FB4_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 4)
	pub fn set_fb4(value: u8) { ::write(REGISTER_ADDRESS, FB4_BIT_OFFSET, FB4_BIT_WIDTH, value as u32); }

	const FB5_BIT_OFFSET: u8 = 5;
	const FB5_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 5)
	pub fn get_fb5() -> u8 { ::read(REGISTER_ADDRESS, FB5_BIT_OFFSET, FB5_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 5)
	pub fn set_fb5(value: u8) { ::write(REGISTER_ADDRESS, FB5_BIT_OFFSET, FB5_BIT_WIDTH, value as u32); }

	const FB6_BIT_OFFSET: u8 = 6;
	const FB6_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 6)
	pub fn get_fb6() -> u8 { ::read(REGISTER_ADDRESS, FB6_BIT_OFFSET, FB6_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 6)
	pub fn set_fb6(value: u8) { ::write(REGISTER_ADDRESS, FB6_BIT_OFFSET, FB6_BIT_WIDTH, value as u32); }

	const FB7_BIT_OFFSET: u8 = 7;
	const FB7_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 7)
	pub fn get_fb7() -> u8 { ::read(REGISTER_ADDRESS, FB7_BIT_OFFSET, FB7_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 7)
	pub fn set_fb7(value: u8) { ::write(REGISTER_ADDRESS, FB7_BIT_OFFSET, FB7_BIT_WIDTH, value as u32); }

	const FB8_BIT_OFFSET: u8 = 8;
	const FB8_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 8)
	pub fn get_fb8() -> u8 { ::read(REGISTER_ADDRESS, FB8_BIT_OFFSET, FB8_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 8)
	pub fn set_fb8(value: u8) { ::write(REGISTER_ADDRESS, FB8_BIT_OFFSET, FB8_BIT_WIDTH, value as u32); }

	const FB9_BIT_OFFSET: u8 = 9;
	const FB9_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 9)
	pub fn get_fb9() -> u8 { ::read(REGISTER_ADDRESS, FB9_BIT_OFFSET, FB9_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 9)
	pub fn set_fb9(value: u8) { ::write(REGISTER_ADDRESS, FB9_BIT_OFFSET, FB9_BIT_WIDTH, value as u32); }

	const FB10_BIT_OFFSET: u8 = 10;
	const FB10_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 10)
	pub fn get_fb10() -> u8 { ::read(REGISTER_ADDRESS, FB10_BIT_OFFSET, FB10_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 10)
	pub fn set_fb10(value: u8) { ::write(REGISTER_ADDRESS, FB10_BIT_OFFSET, FB10_BIT_WIDTH, value as u32); }

	const FB11_BIT_OFFSET: u8 = 11;
	const FB11_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 11)
	pub fn get_fb11() -> u8 { ::read(REGISTER_ADDRESS, FB11_BIT_OFFSET, FB11_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 11)
	pub fn set_fb11(value: u8) { ::write(REGISTER_ADDRESS, FB11_BIT_OFFSET, FB11_BIT_WIDTH, value as u32); }

	const FB12_BIT_OFFSET: u8 = 12;
	const FB12_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 12)
	pub fn get_fb12() -> u8 { ::read(REGISTER_ADDRESS, FB12_BIT_OFFSET, FB12_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 12)
	pub fn set_fb12(value: u8) { ::write(REGISTER_ADDRESS, FB12_BIT_OFFSET, FB12_BIT_WIDTH, value as u32); }

	const FB13_BIT_OFFSET: u8 = 13;
	const FB13_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 13)
	pub fn get_fb13() -> u8 { ::read(REGISTER_ADDRESS, FB13_BIT_OFFSET, FB13_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 13)
	pub fn set_fb13(value: u8) { ::write(REGISTER_ADDRESS, FB13_BIT_OFFSET, FB13_BIT_WIDTH, value as u32); }

	const FB14_BIT_OFFSET: u8 = 14;
	const FB14_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 14)
	pub fn get_fb14() -> u8 { ::read(REGISTER_ADDRESS, FB14_BIT_OFFSET, FB14_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 14)
	pub fn set_fb14(value: u8) { ::write(REGISTER_ADDRESS, FB14_BIT_OFFSET, FB14_BIT_WIDTH, value as u32); }

	const FB15_BIT_OFFSET: u8 = 15;
	const FB15_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 15)
	pub fn get_fb15() -> u8 { ::read(REGISTER_ADDRESS, FB15_BIT_OFFSET, FB15_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 15)
	pub fn set_fb15(value: u8) { ::write(REGISTER_ADDRESS, FB15_BIT_OFFSET, FB15_BIT_WIDTH, value as u32); }

	const FB16_BIT_OFFSET: u8 = 16;
	const FB16_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 16)
	pub fn get_fb16() -> u8 { ::read(REGISTER_ADDRESS, FB16_BIT_OFFSET, FB16_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 16)
	pub fn set_fb16(value: u8) { ::write(REGISTER_ADDRESS, FB16_BIT_OFFSET, FB16_BIT_WIDTH, value as u32); }

	const FB17_BIT_OFFSET: u8 = 17;
	const FB17_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 17)
	pub fn get_fb17() -> u8 { ::read(REGISTER_ADDRESS, FB17_BIT_OFFSET, FB17_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 17)
	pub fn set_fb17(value: u8) { ::write(REGISTER_ADDRESS, FB17_BIT_OFFSET, FB17_BIT_WIDTH, value as u32); }

	const FB18_BIT_OFFSET: u8 = 18;
	const FB18_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 18)
	pub fn get_fb18() -> u8 { ::read(REGISTER_ADDRESS, FB18_BIT_OFFSET, FB18_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 18)
	pub fn set_fb18(value: u8) { ::write(REGISTER_ADDRESS, FB18_BIT_OFFSET, FB18_BIT_WIDTH, value as u32); }

	const FB19_BIT_OFFSET: u8 = 19;
	const FB19_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 19)
	pub fn get_fb19() -> u8 { ::read(REGISTER_ADDRESS, FB19_BIT_OFFSET, FB19_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 19)
	pub fn set_fb19(value: u8) { ::write(REGISTER_ADDRESS, FB19_BIT_OFFSET, FB19_BIT_WIDTH, value as u32); }

	const FB20_BIT_OFFSET: u8 = 20;
	const FB20_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 20)
	pub fn get_fb20() -> u8 { ::read(REGISTER_ADDRESS, FB20_BIT_OFFSET, FB20_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 20)
	pub fn set_fb20(value: u8) { ::write(REGISTER_ADDRESS, FB20_BIT_OFFSET, FB20_BIT_WIDTH, value as u32); }

	const FB21_BIT_OFFSET: u8 = 21;
	const FB21_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 21)
	pub fn get_fb21() -> u8 { ::read(REGISTER_ADDRESS, FB21_BIT_OFFSET, FB21_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 21)
	pub fn set_fb21(value: u8) { ::write(REGISTER_ADDRESS, FB21_BIT_OFFSET, FB21_BIT_WIDTH, value as u32); }

	const FB22_BIT_OFFSET: u8 = 22;
	const FB22_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 22)
	pub fn get_fb22() -> u8 { ::read(REGISTER_ADDRESS, FB22_BIT_OFFSET, FB22_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 22)
	pub fn set_fb22(value: u8) { ::write(REGISTER_ADDRESS, FB22_BIT_OFFSET, FB22_BIT_WIDTH, value as u32); }

	const FB23_BIT_OFFSET: u8 = 23;
	const FB23_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 23)
	pub fn get_fb23() -> u8 { ::read(REGISTER_ADDRESS, FB23_BIT_OFFSET, FB23_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 23)
	pub fn set_fb23(value: u8) { ::write(REGISTER_ADDRESS, FB23_BIT_OFFSET, FB23_BIT_WIDTH, value as u32); }

	const FB24_BIT_OFFSET: u8 = 24;
	const FB24_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 24)
	pub fn get_fb24() -> u8 { ::read(REGISTER_ADDRESS, FB24_BIT_OFFSET, FB24_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 24)
	pub fn set_fb24(value: u8) { ::write(REGISTER_ADDRESS, FB24_BIT_OFFSET, FB24_BIT_WIDTH, value as u32); }

	const FB25_BIT_OFFSET: u8 = 25;
	const FB25_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 25)
	pub fn get_fb25() -> u8 { ::read(REGISTER_ADDRESS, FB25_BIT_OFFSET, FB25_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 25)
	pub fn set_fb25(value: u8) { ::write(REGISTER_ADDRESS, FB25_BIT_OFFSET, FB25_BIT_WIDTH, value as u32); }

	const FB26_BIT_OFFSET: u8 = 26;
	const FB26_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 26)
	pub fn get_fb26() -> u8 { ::read(REGISTER_ADDRESS, FB26_BIT_OFFSET, FB26_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 26)
	pub fn set_fb26(value: u8) { ::write(REGISTER_ADDRESS, FB26_BIT_OFFSET, FB26_BIT_WIDTH, value as u32); }

	const FB27_BIT_OFFSET: u8 = 27;
	const FB27_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 27)
	pub fn get_fb27() -> u8 { ::read(REGISTER_ADDRESS, FB27_BIT_OFFSET, FB27_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 27)
	pub fn set_fb27(value: u8) { ::write(REGISTER_ADDRESS, FB27_BIT_OFFSET, FB27_BIT_WIDTH, value as u32); }

	const FB28_BIT_OFFSET: u8 = 28;
	const FB28_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 28)
	pub fn get_fb28() -> u8 { ::read(REGISTER_ADDRESS, FB28_BIT_OFFSET, FB28_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 28)
	pub fn set_fb28(value: u8) { ::write(REGISTER_ADDRESS, FB28_BIT_OFFSET, FB28_BIT_WIDTH, value as u32); }

	const FB29_BIT_OFFSET: u8 = 29;
	const FB29_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 29)
	pub fn get_fb29() -> u8 { ::read(REGISTER_ADDRESS, FB29_BIT_OFFSET, FB29_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 29)
	pub fn set_fb29(value: u8) { ::write(REGISTER_ADDRESS, FB29_BIT_OFFSET, FB29_BIT_WIDTH, value as u32); }

	const FB30_BIT_OFFSET: u8 = 30;
	const FB30_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 30)
	pub fn get_fb30() -> u8 { ::read(REGISTER_ADDRESS, FB30_BIT_OFFSET, FB30_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 30)
	pub fn set_fb30(value: u8) { ::write(REGISTER_ADDRESS, FB30_BIT_OFFSET, FB30_BIT_WIDTH, value as u32); }

	const FB31_BIT_OFFSET: u8 = 31;
	const FB31_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 31)
	pub fn get_fb31() -> u8 { ::read(REGISTER_ADDRESS, FB31_BIT_OFFSET, FB31_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 31)
	pub fn set_fb31(value: u8) { ::write(REGISTER_ADDRESS, FB31_BIT_OFFSET, FB31_BIT_WIDTH, value as u32); }
}
/// Filter bank 4 register 1
/// Size: 0x20 bits
pub mod f12r1 {
	const REGISTER_ADDRESS_OFFSET: u32 = 0x2A0;
	const REGISTER_ADDRESS: u32 = super::BASE_ADDRESS + REGISTER_ADDRESS_OFFSET;

	const FB0_BIT_OFFSET: u8 = 0;
	const FB0_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 0)
	pub fn get_fb0() -> u8 { ::read(REGISTER_ADDRESS, FB0_BIT_OFFSET, FB0_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 0)
	pub fn set_fb0(value: u8) { ::write(REGISTER_ADDRESS, FB0_BIT_OFFSET, FB0_BIT_WIDTH, value as u32); }

	const FB1_BIT_OFFSET: u8 = 1;
	const FB1_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 1)
	pub fn get_fb1() -> u8 { ::read(REGISTER_ADDRESS, FB1_BIT_OFFSET, FB1_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 1)
	pub fn set_fb1(value: u8) { ::write(REGISTER_ADDRESS, FB1_BIT_OFFSET, FB1_BIT_WIDTH, value as u32); }

	const FB2_BIT_OFFSET: u8 = 2;
	const FB2_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 2)
	pub fn get_fb2() -> u8 { ::read(REGISTER_ADDRESS, FB2_BIT_OFFSET, FB2_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 2)
	pub fn set_fb2(value: u8) { ::write(REGISTER_ADDRESS, FB2_BIT_OFFSET, FB2_BIT_WIDTH, value as u32); }

	const FB3_BIT_OFFSET: u8 = 3;
	const FB3_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 3)
	pub fn get_fb3() -> u8 { ::read(REGISTER_ADDRESS, FB3_BIT_OFFSET, FB3_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 3)
	pub fn set_fb3(value: u8) { ::write(REGISTER_ADDRESS, FB3_BIT_OFFSET, FB3_BIT_WIDTH, value as u32); }

	const FB4_BIT_OFFSET: u8 = 4;
	const FB4_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 4)
	pub fn get_fb4() -> u8 { ::read(REGISTER_ADDRESS, FB4_BIT_OFFSET, FB4_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 4)
	pub fn set_fb4(value: u8) { ::write(REGISTER_ADDRESS, FB4_BIT_OFFSET, FB4_BIT_WIDTH, value as u32); }

	const FB5_BIT_OFFSET: u8 = 5;
	const FB5_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 5)
	pub fn get_fb5() -> u8 { ::read(REGISTER_ADDRESS, FB5_BIT_OFFSET, FB5_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 5)
	pub fn set_fb5(value: u8) { ::write(REGISTER_ADDRESS, FB5_BIT_OFFSET, FB5_BIT_WIDTH, value as u32); }

	const FB6_BIT_OFFSET: u8 = 6;
	const FB6_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 6)
	pub fn get_fb6() -> u8 { ::read(REGISTER_ADDRESS, FB6_BIT_OFFSET, FB6_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 6)
	pub fn set_fb6(value: u8) { ::write(REGISTER_ADDRESS, FB6_BIT_OFFSET, FB6_BIT_WIDTH, value as u32); }

	const FB7_BIT_OFFSET: u8 = 7;
	const FB7_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 7)
	pub fn get_fb7() -> u8 { ::read(REGISTER_ADDRESS, FB7_BIT_OFFSET, FB7_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 7)
	pub fn set_fb7(value: u8) { ::write(REGISTER_ADDRESS, FB7_BIT_OFFSET, FB7_BIT_WIDTH, value as u32); }

	const FB8_BIT_OFFSET: u8 = 8;
	const FB8_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 8)
	pub fn get_fb8() -> u8 { ::read(REGISTER_ADDRESS, FB8_BIT_OFFSET, FB8_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 8)
	pub fn set_fb8(value: u8) { ::write(REGISTER_ADDRESS, FB8_BIT_OFFSET, FB8_BIT_WIDTH, value as u32); }

	const FB9_BIT_OFFSET: u8 = 9;
	const FB9_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 9)
	pub fn get_fb9() -> u8 { ::read(REGISTER_ADDRESS, FB9_BIT_OFFSET, FB9_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 9)
	pub fn set_fb9(value: u8) { ::write(REGISTER_ADDRESS, FB9_BIT_OFFSET, FB9_BIT_WIDTH, value as u32); }

	const FB10_BIT_OFFSET: u8 = 10;
	const FB10_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 10)
	pub fn get_fb10() -> u8 { ::read(REGISTER_ADDRESS, FB10_BIT_OFFSET, FB10_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 10)
	pub fn set_fb10(value: u8) { ::write(REGISTER_ADDRESS, FB10_BIT_OFFSET, FB10_BIT_WIDTH, value as u32); }

	const FB11_BIT_OFFSET: u8 = 11;
	const FB11_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 11)
	pub fn get_fb11() -> u8 { ::read(REGISTER_ADDRESS, FB11_BIT_OFFSET, FB11_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 11)
	pub fn set_fb11(value: u8) { ::write(REGISTER_ADDRESS, FB11_BIT_OFFSET, FB11_BIT_WIDTH, value as u32); }

	const FB12_BIT_OFFSET: u8 = 12;
	const FB12_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 12)
	pub fn get_fb12() -> u8 { ::read(REGISTER_ADDRESS, FB12_BIT_OFFSET, FB12_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 12)
	pub fn set_fb12(value: u8) { ::write(REGISTER_ADDRESS, FB12_BIT_OFFSET, FB12_BIT_WIDTH, value as u32); }

	const FB13_BIT_OFFSET: u8 = 13;
	const FB13_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 13)
	pub fn get_fb13() -> u8 { ::read(REGISTER_ADDRESS, FB13_BIT_OFFSET, FB13_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 13)
	pub fn set_fb13(value: u8) { ::write(REGISTER_ADDRESS, FB13_BIT_OFFSET, FB13_BIT_WIDTH, value as u32); }

	const FB14_BIT_OFFSET: u8 = 14;
	const FB14_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 14)
	pub fn get_fb14() -> u8 { ::read(REGISTER_ADDRESS, FB14_BIT_OFFSET, FB14_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 14)
	pub fn set_fb14(value: u8) { ::write(REGISTER_ADDRESS, FB14_BIT_OFFSET, FB14_BIT_WIDTH, value as u32); }

	const FB15_BIT_OFFSET: u8 = 15;
	const FB15_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 15)
	pub fn get_fb15() -> u8 { ::read(REGISTER_ADDRESS, FB15_BIT_OFFSET, FB15_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 15)
	pub fn set_fb15(value: u8) { ::write(REGISTER_ADDRESS, FB15_BIT_OFFSET, FB15_BIT_WIDTH, value as u32); }

	const FB16_BIT_OFFSET: u8 = 16;
	const FB16_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 16)
	pub fn get_fb16() -> u8 { ::read(REGISTER_ADDRESS, FB16_BIT_OFFSET, FB16_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 16)
	pub fn set_fb16(value: u8) { ::write(REGISTER_ADDRESS, FB16_BIT_OFFSET, FB16_BIT_WIDTH, value as u32); }

	const FB17_BIT_OFFSET: u8 = 17;
	const FB17_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 17)
	pub fn get_fb17() -> u8 { ::read(REGISTER_ADDRESS, FB17_BIT_OFFSET, FB17_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 17)
	pub fn set_fb17(value: u8) { ::write(REGISTER_ADDRESS, FB17_BIT_OFFSET, FB17_BIT_WIDTH, value as u32); }

	const FB18_BIT_OFFSET: u8 = 18;
	const FB18_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 18)
	pub fn get_fb18() -> u8 { ::read(REGISTER_ADDRESS, FB18_BIT_OFFSET, FB18_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 18)
	pub fn set_fb18(value: u8) { ::write(REGISTER_ADDRESS, FB18_BIT_OFFSET, FB18_BIT_WIDTH, value as u32); }

	const FB19_BIT_OFFSET: u8 = 19;
	const FB19_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 19)
	pub fn get_fb19() -> u8 { ::read(REGISTER_ADDRESS, FB19_BIT_OFFSET, FB19_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 19)
	pub fn set_fb19(value: u8) { ::write(REGISTER_ADDRESS, FB19_BIT_OFFSET, FB19_BIT_WIDTH, value as u32); }

	const FB20_BIT_OFFSET: u8 = 20;
	const FB20_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 20)
	pub fn get_fb20() -> u8 { ::read(REGISTER_ADDRESS, FB20_BIT_OFFSET, FB20_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 20)
	pub fn set_fb20(value: u8) { ::write(REGISTER_ADDRESS, FB20_BIT_OFFSET, FB20_BIT_WIDTH, value as u32); }

	const FB21_BIT_OFFSET: u8 = 21;
	const FB21_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 21)
	pub fn get_fb21() -> u8 { ::read(REGISTER_ADDRESS, FB21_BIT_OFFSET, FB21_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 21)
	pub fn set_fb21(value: u8) { ::write(REGISTER_ADDRESS, FB21_BIT_OFFSET, FB21_BIT_WIDTH, value as u32); }

	const FB22_BIT_OFFSET: u8 = 22;
	const FB22_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 22)
	pub fn get_fb22() -> u8 { ::read(REGISTER_ADDRESS, FB22_BIT_OFFSET, FB22_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 22)
	pub fn set_fb22(value: u8) { ::write(REGISTER_ADDRESS, FB22_BIT_OFFSET, FB22_BIT_WIDTH, value as u32); }

	const FB23_BIT_OFFSET: u8 = 23;
	const FB23_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 23)
	pub fn get_fb23() -> u8 { ::read(REGISTER_ADDRESS, FB23_BIT_OFFSET, FB23_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 23)
	pub fn set_fb23(value: u8) { ::write(REGISTER_ADDRESS, FB23_BIT_OFFSET, FB23_BIT_WIDTH, value as u32); }

	const FB24_BIT_OFFSET: u8 = 24;
	const FB24_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 24)
	pub fn get_fb24() -> u8 { ::read(REGISTER_ADDRESS, FB24_BIT_OFFSET, FB24_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 24)
	pub fn set_fb24(value: u8) { ::write(REGISTER_ADDRESS, FB24_BIT_OFFSET, FB24_BIT_WIDTH, value as u32); }

	const FB25_BIT_OFFSET: u8 = 25;
	const FB25_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 25)
	pub fn get_fb25() -> u8 { ::read(REGISTER_ADDRESS, FB25_BIT_OFFSET, FB25_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 25)
	pub fn set_fb25(value: u8) { ::write(REGISTER_ADDRESS, FB25_BIT_OFFSET, FB25_BIT_WIDTH, value as u32); }

	const FB26_BIT_OFFSET: u8 = 26;
	const FB26_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 26)
	pub fn get_fb26() -> u8 { ::read(REGISTER_ADDRESS, FB26_BIT_OFFSET, FB26_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 26)
	pub fn set_fb26(value: u8) { ::write(REGISTER_ADDRESS, FB26_BIT_OFFSET, FB26_BIT_WIDTH, value as u32); }

	const FB27_BIT_OFFSET: u8 = 27;
	const FB27_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 27)
	pub fn get_fb27() -> u8 { ::read(REGISTER_ADDRESS, FB27_BIT_OFFSET, FB27_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 27)
	pub fn set_fb27(value: u8) { ::write(REGISTER_ADDRESS, FB27_BIT_OFFSET, FB27_BIT_WIDTH, value as u32); }

	const FB28_BIT_OFFSET: u8 = 28;
	const FB28_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 28)
	pub fn get_fb28() -> u8 { ::read(REGISTER_ADDRESS, FB28_BIT_OFFSET, FB28_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 28)
	pub fn set_fb28(value: u8) { ::write(REGISTER_ADDRESS, FB28_BIT_OFFSET, FB28_BIT_WIDTH, value as u32); }

	const FB29_BIT_OFFSET: u8 = 29;
	const FB29_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 29)
	pub fn get_fb29() -> u8 { ::read(REGISTER_ADDRESS, FB29_BIT_OFFSET, FB29_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 29)
	pub fn set_fb29(value: u8) { ::write(REGISTER_ADDRESS, FB29_BIT_OFFSET, FB29_BIT_WIDTH, value as u32); }

	const FB30_BIT_OFFSET: u8 = 30;
	const FB30_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 30)
	pub fn get_fb30() -> u8 { ::read(REGISTER_ADDRESS, FB30_BIT_OFFSET, FB30_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 30)
	pub fn set_fb30(value: u8) { ::write(REGISTER_ADDRESS, FB30_BIT_OFFSET, FB30_BIT_WIDTH, value as u32); }

	const FB31_BIT_OFFSET: u8 = 31;
	const FB31_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 31)
	pub fn get_fb31() -> u8 { ::read(REGISTER_ADDRESS, FB31_BIT_OFFSET, FB31_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 31)
	pub fn set_fb31(value: u8) { ::write(REGISTER_ADDRESS, FB31_BIT_OFFSET, FB31_BIT_WIDTH, value as u32); }
}
/// Filter bank 12 register 2
/// Size: 0x20 bits
pub mod f12r2 {
	const REGISTER_ADDRESS_OFFSET: u32 = 0x2A4;
	const REGISTER_ADDRESS: u32 = super::BASE_ADDRESS + REGISTER_ADDRESS_OFFSET;

	const FB0_BIT_OFFSET: u8 = 0;
	const FB0_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 0)
	pub fn get_fb0() -> u8 { ::read(REGISTER_ADDRESS, FB0_BIT_OFFSET, FB0_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 0)
	pub fn set_fb0(value: u8) { ::write(REGISTER_ADDRESS, FB0_BIT_OFFSET, FB0_BIT_WIDTH, value as u32); }

	const FB1_BIT_OFFSET: u8 = 1;
	const FB1_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 1)
	pub fn get_fb1() -> u8 { ::read(REGISTER_ADDRESS, FB1_BIT_OFFSET, FB1_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 1)
	pub fn set_fb1(value: u8) { ::write(REGISTER_ADDRESS, FB1_BIT_OFFSET, FB1_BIT_WIDTH, value as u32); }

	const FB2_BIT_OFFSET: u8 = 2;
	const FB2_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 2)
	pub fn get_fb2() -> u8 { ::read(REGISTER_ADDRESS, FB2_BIT_OFFSET, FB2_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 2)
	pub fn set_fb2(value: u8) { ::write(REGISTER_ADDRESS, FB2_BIT_OFFSET, FB2_BIT_WIDTH, value as u32); }

	const FB3_BIT_OFFSET: u8 = 3;
	const FB3_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 3)
	pub fn get_fb3() -> u8 { ::read(REGISTER_ADDRESS, FB3_BIT_OFFSET, FB3_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 3)
	pub fn set_fb3(value: u8) { ::write(REGISTER_ADDRESS, FB3_BIT_OFFSET, FB3_BIT_WIDTH, value as u32); }

	const FB4_BIT_OFFSET: u8 = 4;
	const FB4_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 4)
	pub fn get_fb4() -> u8 { ::read(REGISTER_ADDRESS, FB4_BIT_OFFSET, FB4_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 4)
	pub fn set_fb4(value: u8) { ::write(REGISTER_ADDRESS, FB4_BIT_OFFSET, FB4_BIT_WIDTH, value as u32); }

	const FB5_BIT_OFFSET: u8 = 5;
	const FB5_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 5)
	pub fn get_fb5() -> u8 { ::read(REGISTER_ADDRESS, FB5_BIT_OFFSET, FB5_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 5)
	pub fn set_fb5(value: u8) { ::write(REGISTER_ADDRESS, FB5_BIT_OFFSET, FB5_BIT_WIDTH, value as u32); }

	const FB6_BIT_OFFSET: u8 = 6;
	const FB6_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 6)
	pub fn get_fb6() -> u8 { ::read(REGISTER_ADDRESS, FB6_BIT_OFFSET, FB6_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 6)
	pub fn set_fb6(value: u8) { ::write(REGISTER_ADDRESS, FB6_BIT_OFFSET, FB6_BIT_WIDTH, value as u32); }

	const FB7_BIT_OFFSET: u8 = 7;
	const FB7_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 7)
	pub fn get_fb7() -> u8 { ::read(REGISTER_ADDRESS, FB7_BIT_OFFSET, FB7_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 7)
	pub fn set_fb7(value: u8) { ::write(REGISTER_ADDRESS, FB7_BIT_OFFSET, FB7_BIT_WIDTH, value as u32); }

	const FB8_BIT_OFFSET: u8 = 8;
	const FB8_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 8)
	pub fn get_fb8() -> u8 { ::read(REGISTER_ADDRESS, FB8_BIT_OFFSET, FB8_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 8)
	pub fn set_fb8(value: u8) { ::write(REGISTER_ADDRESS, FB8_BIT_OFFSET, FB8_BIT_WIDTH, value as u32); }

	const FB9_BIT_OFFSET: u8 = 9;
	const FB9_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 9)
	pub fn get_fb9() -> u8 { ::read(REGISTER_ADDRESS, FB9_BIT_OFFSET, FB9_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 9)
	pub fn set_fb9(value: u8) { ::write(REGISTER_ADDRESS, FB9_BIT_OFFSET, FB9_BIT_WIDTH, value as u32); }

	const FB10_BIT_OFFSET: u8 = 10;
	const FB10_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 10)
	pub fn get_fb10() -> u8 { ::read(REGISTER_ADDRESS, FB10_BIT_OFFSET, FB10_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 10)
	pub fn set_fb10(value: u8) { ::write(REGISTER_ADDRESS, FB10_BIT_OFFSET, FB10_BIT_WIDTH, value as u32); }

	const FB11_BIT_OFFSET: u8 = 11;
	const FB11_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 11)
	pub fn get_fb11() -> u8 { ::read(REGISTER_ADDRESS, FB11_BIT_OFFSET, FB11_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 11)
	pub fn set_fb11(value: u8) { ::write(REGISTER_ADDRESS, FB11_BIT_OFFSET, FB11_BIT_WIDTH, value as u32); }

	const FB12_BIT_OFFSET: u8 = 12;
	const FB12_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 12)
	pub fn get_fb12() -> u8 { ::read(REGISTER_ADDRESS, FB12_BIT_OFFSET, FB12_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 12)
	pub fn set_fb12(value: u8) { ::write(REGISTER_ADDRESS, FB12_BIT_OFFSET, FB12_BIT_WIDTH, value as u32); }

	const FB13_BIT_OFFSET: u8 = 13;
	const FB13_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 13)
	pub fn get_fb13() -> u8 { ::read(REGISTER_ADDRESS, FB13_BIT_OFFSET, FB13_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 13)
	pub fn set_fb13(value: u8) { ::write(REGISTER_ADDRESS, FB13_BIT_OFFSET, FB13_BIT_WIDTH, value as u32); }

	const FB14_BIT_OFFSET: u8 = 14;
	const FB14_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 14)
	pub fn get_fb14() -> u8 { ::read(REGISTER_ADDRESS, FB14_BIT_OFFSET, FB14_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 14)
	pub fn set_fb14(value: u8) { ::write(REGISTER_ADDRESS, FB14_BIT_OFFSET, FB14_BIT_WIDTH, value as u32); }

	const FB15_BIT_OFFSET: u8 = 15;
	const FB15_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 15)
	pub fn get_fb15() -> u8 { ::read(REGISTER_ADDRESS, FB15_BIT_OFFSET, FB15_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 15)
	pub fn set_fb15(value: u8) { ::write(REGISTER_ADDRESS, FB15_BIT_OFFSET, FB15_BIT_WIDTH, value as u32); }

	const FB16_BIT_OFFSET: u8 = 16;
	const FB16_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 16)
	pub fn get_fb16() -> u8 { ::read(REGISTER_ADDRESS, FB16_BIT_OFFSET, FB16_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 16)
	pub fn set_fb16(value: u8) { ::write(REGISTER_ADDRESS, FB16_BIT_OFFSET, FB16_BIT_WIDTH, value as u32); }

	const FB17_BIT_OFFSET: u8 = 17;
	const FB17_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 17)
	pub fn get_fb17() -> u8 { ::read(REGISTER_ADDRESS, FB17_BIT_OFFSET, FB17_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 17)
	pub fn set_fb17(value: u8) { ::write(REGISTER_ADDRESS, FB17_BIT_OFFSET, FB17_BIT_WIDTH, value as u32); }

	const FB18_BIT_OFFSET: u8 = 18;
	const FB18_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 18)
	pub fn get_fb18() -> u8 { ::read(REGISTER_ADDRESS, FB18_BIT_OFFSET, FB18_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 18)
	pub fn set_fb18(value: u8) { ::write(REGISTER_ADDRESS, FB18_BIT_OFFSET, FB18_BIT_WIDTH, value as u32); }

	const FB19_BIT_OFFSET: u8 = 19;
	const FB19_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 19)
	pub fn get_fb19() -> u8 { ::read(REGISTER_ADDRESS, FB19_BIT_OFFSET, FB19_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 19)
	pub fn set_fb19(value: u8) { ::write(REGISTER_ADDRESS, FB19_BIT_OFFSET, FB19_BIT_WIDTH, value as u32); }

	const FB20_BIT_OFFSET: u8 = 20;
	const FB20_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 20)
	pub fn get_fb20() -> u8 { ::read(REGISTER_ADDRESS, FB20_BIT_OFFSET, FB20_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 20)
	pub fn set_fb20(value: u8) { ::write(REGISTER_ADDRESS, FB20_BIT_OFFSET, FB20_BIT_WIDTH, value as u32); }

	const FB21_BIT_OFFSET: u8 = 21;
	const FB21_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 21)
	pub fn get_fb21() -> u8 { ::read(REGISTER_ADDRESS, FB21_BIT_OFFSET, FB21_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 21)
	pub fn set_fb21(value: u8) { ::write(REGISTER_ADDRESS, FB21_BIT_OFFSET, FB21_BIT_WIDTH, value as u32); }

	const FB22_BIT_OFFSET: u8 = 22;
	const FB22_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 22)
	pub fn get_fb22() -> u8 { ::read(REGISTER_ADDRESS, FB22_BIT_OFFSET, FB22_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 22)
	pub fn set_fb22(value: u8) { ::write(REGISTER_ADDRESS, FB22_BIT_OFFSET, FB22_BIT_WIDTH, value as u32); }

	const FB23_BIT_OFFSET: u8 = 23;
	const FB23_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 23)
	pub fn get_fb23() -> u8 { ::read(REGISTER_ADDRESS, FB23_BIT_OFFSET, FB23_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 23)
	pub fn set_fb23(value: u8) { ::write(REGISTER_ADDRESS, FB23_BIT_OFFSET, FB23_BIT_WIDTH, value as u32); }

	const FB24_BIT_OFFSET: u8 = 24;
	const FB24_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 24)
	pub fn get_fb24() -> u8 { ::read(REGISTER_ADDRESS, FB24_BIT_OFFSET, FB24_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 24)
	pub fn set_fb24(value: u8) { ::write(REGISTER_ADDRESS, FB24_BIT_OFFSET, FB24_BIT_WIDTH, value as u32); }

	const FB25_BIT_OFFSET: u8 = 25;
	const FB25_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 25)
	pub fn get_fb25() -> u8 { ::read(REGISTER_ADDRESS, FB25_BIT_OFFSET, FB25_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 25)
	pub fn set_fb25(value: u8) { ::write(REGISTER_ADDRESS, FB25_BIT_OFFSET, FB25_BIT_WIDTH, value as u32); }

	const FB26_BIT_OFFSET: u8 = 26;
	const FB26_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 26)
	pub fn get_fb26() -> u8 { ::read(REGISTER_ADDRESS, FB26_BIT_OFFSET, FB26_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 26)
	pub fn set_fb26(value: u8) { ::write(REGISTER_ADDRESS, FB26_BIT_OFFSET, FB26_BIT_WIDTH, value as u32); }

	const FB27_BIT_OFFSET: u8 = 27;
	const FB27_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 27)
	pub fn get_fb27() -> u8 { ::read(REGISTER_ADDRESS, FB27_BIT_OFFSET, FB27_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 27)
	pub fn set_fb27(value: u8) { ::write(REGISTER_ADDRESS, FB27_BIT_OFFSET, FB27_BIT_WIDTH, value as u32); }

	const FB28_BIT_OFFSET: u8 = 28;
	const FB28_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 28)
	pub fn get_fb28() -> u8 { ::read(REGISTER_ADDRESS, FB28_BIT_OFFSET, FB28_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 28)
	pub fn set_fb28(value: u8) { ::write(REGISTER_ADDRESS, FB28_BIT_OFFSET, FB28_BIT_WIDTH, value as u32); }

	const FB29_BIT_OFFSET: u8 = 29;
	const FB29_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 29)
	pub fn get_fb29() -> u8 { ::read(REGISTER_ADDRESS, FB29_BIT_OFFSET, FB29_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 29)
	pub fn set_fb29(value: u8) { ::write(REGISTER_ADDRESS, FB29_BIT_OFFSET, FB29_BIT_WIDTH, value as u32); }

	const FB30_BIT_OFFSET: u8 = 30;
	const FB30_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 30)
	pub fn get_fb30() -> u8 { ::read(REGISTER_ADDRESS, FB30_BIT_OFFSET, FB30_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 30)
	pub fn set_fb30(value: u8) { ::write(REGISTER_ADDRESS, FB30_BIT_OFFSET, FB30_BIT_WIDTH, value as u32); }

	const FB31_BIT_OFFSET: u8 = 31;
	const FB31_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 31)
	pub fn get_fb31() -> u8 { ::read(REGISTER_ADDRESS, FB31_BIT_OFFSET, FB31_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 31)
	pub fn set_fb31(value: u8) { ::write(REGISTER_ADDRESS, FB31_BIT_OFFSET, FB31_BIT_WIDTH, value as u32); }
}
/// Filter bank 13 register 1
/// Size: 0x20 bits
pub mod f13r1 {
	const REGISTER_ADDRESS_OFFSET: u32 = 0x2A8;
	const REGISTER_ADDRESS: u32 = super::BASE_ADDRESS + REGISTER_ADDRESS_OFFSET;

	const FB0_BIT_OFFSET: u8 = 0;
	const FB0_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 0)
	pub fn get_fb0() -> u8 { ::read(REGISTER_ADDRESS, FB0_BIT_OFFSET, FB0_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 0)
	pub fn set_fb0(value: u8) { ::write(REGISTER_ADDRESS, FB0_BIT_OFFSET, FB0_BIT_WIDTH, value as u32); }

	const FB1_BIT_OFFSET: u8 = 1;
	const FB1_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 1)
	pub fn get_fb1() -> u8 { ::read(REGISTER_ADDRESS, FB1_BIT_OFFSET, FB1_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 1)
	pub fn set_fb1(value: u8) { ::write(REGISTER_ADDRESS, FB1_BIT_OFFSET, FB1_BIT_WIDTH, value as u32); }

	const FB2_BIT_OFFSET: u8 = 2;
	const FB2_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 2)
	pub fn get_fb2() -> u8 { ::read(REGISTER_ADDRESS, FB2_BIT_OFFSET, FB2_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 2)
	pub fn set_fb2(value: u8) { ::write(REGISTER_ADDRESS, FB2_BIT_OFFSET, FB2_BIT_WIDTH, value as u32); }

	const FB3_BIT_OFFSET: u8 = 3;
	const FB3_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 3)
	pub fn get_fb3() -> u8 { ::read(REGISTER_ADDRESS, FB3_BIT_OFFSET, FB3_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 3)
	pub fn set_fb3(value: u8) { ::write(REGISTER_ADDRESS, FB3_BIT_OFFSET, FB3_BIT_WIDTH, value as u32); }

	const FB4_BIT_OFFSET: u8 = 4;
	const FB4_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 4)
	pub fn get_fb4() -> u8 { ::read(REGISTER_ADDRESS, FB4_BIT_OFFSET, FB4_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 4)
	pub fn set_fb4(value: u8) { ::write(REGISTER_ADDRESS, FB4_BIT_OFFSET, FB4_BIT_WIDTH, value as u32); }

	const FB5_BIT_OFFSET: u8 = 5;
	const FB5_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 5)
	pub fn get_fb5() -> u8 { ::read(REGISTER_ADDRESS, FB5_BIT_OFFSET, FB5_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 5)
	pub fn set_fb5(value: u8) { ::write(REGISTER_ADDRESS, FB5_BIT_OFFSET, FB5_BIT_WIDTH, value as u32); }

	const FB6_BIT_OFFSET: u8 = 6;
	const FB6_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 6)
	pub fn get_fb6() -> u8 { ::read(REGISTER_ADDRESS, FB6_BIT_OFFSET, FB6_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 6)
	pub fn set_fb6(value: u8) { ::write(REGISTER_ADDRESS, FB6_BIT_OFFSET, FB6_BIT_WIDTH, value as u32); }

	const FB7_BIT_OFFSET: u8 = 7;
	const FB7_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 7)
	pub fn get_fb7() -> u8 { ::read(REGISTER_ADDRESS, FB7_BIT_OFFSET, FB7_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 7)
	pub fn set_fb7(value: u8) { ::write(REGISTER_ADDRESS, FB7_BIT_OFFSET, FB7_BIT_WIDTH, value as u32); }

	const FB8_BIT_OFFSET: u8 = 8;
	const FB8_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 8)
	pub fn get_fb8() -> u8 { ::read(REGISTER_ADDRESS, FB8_BIT_OFFSET, FB8_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 8)
	pub fn set_fb8(value: u8) { ::write(REGISTER_ADDRESS, FB8_BIT_OFFSET, FB8_BIT_WIDTH, value as u32); }

	const FB9_BIT_OFFSET: u8 = 9;
	const FB9_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 9)
	pub fn get_fb9() -> u8 { ::read(REGISTER_ADDRESS, FB9_BIT_OFFSET, FB9_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 9)
	pub fn set_fb9(value: u8) { ::write(REGISTER_ADDRESS, FB9_BIT_OFFSET, FB9_BIT_WIDTH, value as u32); }

	const FB10_BIT_OFFSET: u8 = 10;
	const FB10_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 10)
	pub fn get_fb10() -> u8 { ::read(REGISTER_ADDRESS, FB10_BIT_OFFSET, FB10_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 10)
	pub fn set_fb10(value: u8) { ::write(REGISTER_ADDRESS, FB10_BIT_OFFSET, FB10_BIT_WIDTH, value as u32); }

	const FB11_BIT_OFFSET: u8 = 11;
	const FB11_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 11)
	pub fn get_fb11() -> u8 { ::read(REGISTER_ADDRESS, FB11_BIT_OFFSET, FB11_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 11)
	pub fn set_fb11(value: u8) { ::write(REGISTER_ADDRESS, FB11_BIT_OFFSET, FB11_BIT_WIDTH, value as u32); }

	const FB12_BIT_OFFSET: u8 = 12;
	const FB12_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 12)
	pub fn get_fb12() -> u8 { ::read(REGISTER_ADDRESS, FB12_BIT_OFFSET, FB12_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 12)
	pub fn set_fb12(value: u8) { ::write(REGISTER_ADDRESS, FB12_BIT_OFFSET, FB12_BIT_WIDTH, value as u32); }

	const FB13_BIT_OFFSET: u8 = 13;
	const FB13_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 13)
	pub fn get_fb13() -> u8 { ::read(REGISTER_ADDRESS, FB13_BIT_OFFSET, FB13_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 13)
	pub fn set_fb13(value: u8) { ::write(REGISTER_ADDRESS, FB13_BIT_OFFSET, FB13_BIT_WIDTH, value as u32); }

	const FB14_BIT_OFFSET: u8 = 14;
	const FB14_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 14)
	pub fn get_fb14() -> u8 { ::read(REGISTER_ADDRESS, FB14_BIT_OFFSET, FB14_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 14)
	pub fn set_fb14(value: u8) { ::write(REGISTER_ADDRESS, FB14_BIT_OFFSET, FB14_BIT_WIDTH, value as u32); }

	const FB15_BIT_OFFSET: u8 = 15;
	const FB15_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 15)
	pub fn get_fb15() -> u8 { ::read(REGISTER_ADDRESS, FB15_BIT_OFFSET, FB15_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 15)
	pub fn set_fb15(value: u8) { ::write(REGISTER_ADDRESS, FB15_BIT_OFFSET, FB15_BIT_WIDTH, value as u32); }

	const FB16_BIT_OFFSET: u8 = 16;
	const FB16_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 16)
	pub fn get_fb16() -> u8 { ::read(REGISTER_ADDRESS, FB16_BIT_OFFSET, FB16_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 16)
	pub fn set_fb16(value: u8) { ::write(REGISTER_ADDRESS, FB16_BIT_OFFSET, FB16_BIT_WIDTH, value as u32); }

	const FB17_BIT_OFFSET: u8 = 17;
	const FB17_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 17)
	pub fn get_fb17() -> u8 { ::read(REGISTER_ADDRESS, FB17_BIT_OFFSET, FB17_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 17)
	pub fn set_fb17(value: u8) { ::write(REGISTER_ADDRESS, FB17_BIT_OFFSET, FB17_BIT_WIDTH, value as u32); }

	const FB18_BIT_OFFSET: u8 = 18;
	const FB18_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 18)
	pub fn get_fb18() -> u8 { ::read(REGISTER_ADDRESS, FB18_BIT_OFFSET, FB18_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 18)
	pub fn set_fb18(value: u8) { ::write(REGISTER_ADDRESS, FB18_BIT_OFFSET, FB18_BIT_WIDTH, value as u32); }

	const FB19_BIT_OFFSET: u8 = 19;
	const FB19_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 19)
	pub fn get_fb19() -> u8 { ::read(REGISTER_ADDRESS, FB19_BIT_OFFSET, FB19_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 19)
	pub fn set_fb19(value: u8) { ::write(REGISTER_ADDRESS, FB19_BIT_OFFSET, FB19_BIT_WIDTH, value as u32); }

	const FB20_BIT_OFFSET: u8 = 20;
	const FB20_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 20)
	pub fn get_fb20() -> u8 { ::read(REGISTER_ADDRESS, FB20_BIT_OFFSET, FB20_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 20)
	pub fn set_fb20(value: u8) { ::write(REGISTER_ADDRESS, FB20_BIT_OFFSET, FB20_BIT_WIDTH, value as u32); }

	const FB21_BIT_OFFSET: u8 = 21;
	const FB21_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 21)
	pub fn get_fb21() -> u8 { ::read(REGISTER_ADDRESS, FB21_BIT_OFFSET, FB21_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 21)
	pub fn set_fb21(value: u8) { ::write(REGISTER_ADDRESS, FB21_BIT_OFFSET, FB21_BIT_WIDTH, value as u32); }

	const FB22_BIT_OFFSET: u8 = 22;
	const FB22_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 22)
	pub fn get_fb22() -> u8 { ::read(REGISTER_ADDRESS, FB22_BIT_OFFSET, FB22_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 22)
	pub fn set_fb22(value: u8) { ::write(REGISTER_ADDRESS, FB22_BIT_OFFSET, FB22_BIT_WIDTH, value as u32); }

	const FB23_BIT_OFFSET: u8 = 23;
	const FB23_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 23)
	pub fn get_fb23() -> u8 { ::read(REGISTER_ADDRESS, FB23_BIT_OFFSET, FB23_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 23)
	pub fn set_fb23(value: u8) { ::write(REGISTER_ADDRESS, FB23_BIT_OFFSET, FB23_BIT_WIDTH, value as u32); }

	const FB24_BIT_OFFSET: u8 = 24;
	const FB24_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 24)
	pub fn get_fb24() -> u8 { ::read(REGISTER_ADDRESS, FB24_BIT_OFFSET, FB24_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 24)
	pub fn set_fb24(value: u8) { ::write(REGISTER_ADDRESS, FB24_BIT_OFFSET, FB24_BIT_WIDTH, value as u32); }

	const FB25_BIT_OFFSET: u8 = 25;
	const FB25_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 25)
	pub fn get_fb25() -> u8 { ::read(REGISTER_ADDRESS, FB25_BIT_OFFSET, FB25_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 25)
	pub fn set_fb25(value: u8) { ::write(REGISTER_ADDRESS, FB25_BIT_OFFSET, FB25_BIT_WIDTH, value as u32); }

	const FB26_BIT_OFFSET: u8 = 26;
	const FB26_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 26)
	pub fn get_fb26() -> u8 { ::read(REGISTER_ADDRESS, FB26_BIT_OFFSET, FB26_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 26)
	pub fn set_fb26(value: u8) { ::write(REGISTER_ADDRESS, FB26_BIT_OFFSET, FB26_BIT_WIDTH, value as u32); }

	const FB27_BIT_OFFSET: u8 = 27;
	const FB27_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 27)
	pub fn get_fb27() -> u8 { ::read(REGISTER_ADDRESS, FB27_BIT_OFFSET, FB27_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 27)
	pub fn set_fb27(value: u8) { ::write(REGISTER_ADDRESS, FB27_BIT_OFFSET, FB27_BIT_WIDTH, value as u32); }

	const FB28_BIT_OFFSET: u8 = 28;
	const FB28_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 28)
	pub fn get_fb28() -> u8 { ::read(REGISTER_ADDRESS, FB28_BIT_OFFSET, FB28_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 28)
	pub fn set_fb28(value: u8) { ::write(REGISTER_ADDRESS, FB28_BIT_OFFSET, FB28_BIT_WIDTH, value as u32); }

	const FB29_BIT_OFFSET: u8 = 29;
	const FB29_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 29)
	pub fn get_fb29() -> u8 { ::read(REGISTER_ADDRESS, FB29_BIT_OFFSET, FB29_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 29)
	pub fn set_fb29(value: u8) { ::write(REGISTER_ADDRESS, FB29_BIT_OFFSET, FB29_BIT_WIDTH, value as u32); }

	const FB30_BIT_OFFSET: u8 = 30;
	const FB30_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 30)
	pub fn get_fb30() -> u8 { ::read(REGISTER_ADDRESS, FB30_BIT_OFFSET, FB30_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 30)
	pub fn set_fb30(value: u8) { ::write(REGISTER_ADDRESS, FB30_BIT_OFFSET, FB30_BIT_WIDTH, value as u32); }

	const FB31_BIT_OFFSET: u8 = 31;
	const FB31_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 31)
	pub fn get_fb31() -> u8 { ::read(REGISTER_ADDRESS, FB31_BIT_OFFSET, FB31_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 31)
	pub fn set_fb31(value: u8) { ::write(REGISTER_ADDRESS, FB31_BIT_OFFSET, FB31_BIT_WIDTH, value as u32); }
}
/// Filter bank 13 register 2
/// Size: 0x20 bits
pub mod f13r2 {
	const REGISTER_ADDRESS_OFFSET: u32 = 0x2AC;
	const REGISTER_ADDRESS: u32 = super::BASE_ADDRESS + REGISTER_ADDRESS_OFFSET;

	const FB0_BIT_OFFSET: u8 = 0;
	const FB0_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 0)
	pub fn get_fb0() -> u8 { ::read(REGISTER_ADDRESS, FB0_BIT_OFFSET, FB0_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 0)
	pub fn set_fb0(value: u8) { ::write(REGISTER_ADDRESS, FB0_BIT_OFFSET, FB0_BIT_WIDTH, value as u32); }

	const FB1_BIT_OFFSET: u8 = 1;
	const FB1_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 1)
	pub fn get_fb1() -> u8 { ::read(REGISTER_ADDRESS, FB1_BIT_OFFSET, FB1_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 1)
	pub fn set_fb1(value: u8) { ::write(REGISTER_ADDRESS, FB1_BIT_OFFSET, FB1_BIT_WIDTH, value as u32); }

	const FB2_BIT_OFFSET: u8 = 2;
	const FB2_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 2)
	pub fn get_fb2() -> u8 { ::read(REGISTER_ADDRESS, FB2_BIT_OFFSET, FB2_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 2)
	pub fn set_fb2(value: u8) { ::write(REGISTER_ADDRESS, FB2_BIT_OFFSET, FB2_BIT_WIDTH, value as u32); }

	const FB3_BIT_OFFSET: u8 = 3;
	const FB3_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 3)
	pub fn get_fb3() -> u8 { ::read(REGISTER_ADDRESS, FB3_BIT_OFFSET, FB3_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 3)
	pub fn set_fb3(value: u8) { ::write(REGISTER_ADDRESS, FB3_BIT_OFFSET, FB3_BIT_WIDTH, value as u32); }

	const FB4_BIT_OFFSET: u8 = 4;
	const FB4_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 4)
	pub fn get_fb4() -> u8 { ::read(REGISTER_ADDRESS, FB4_BIT_OFFSET, FB4_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 4)
	pub fn set_fb4(value: u8) { ::write(REGISTER_ADDRESS, FB4_BIT_OFFSET, FB4_BIT_WIDTH, value as u32); }

	const FB5_BIT_OFFSET: u8 = 5;
	const FB5_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 5)
	pub fn get_fb5() -> u8 { ::read(REGISTER_ADDRESS, FB5_BIT_OFFSET, FB5_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 5)
	pub fn set_fb5(value: u8) { ::write(REGISTER_ADDRESS, FB5_BIT_OFFSET, FB5_BIT_WIDTH, value as u32); }

	const FB6_BIT_OFFSET: u8 = 6;
	const FB6_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 6)
	pub fn get_fb6() -> u8 { ::read(REGISTER_ADDRESS, FB6_BIT_OFFSET, FB6_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 6)
	pub fn set_fb6(value: u8) { ::write(REGISTER_ADDRESS, FB6_BIT_OFFSET, FB6_BIT_WIDTH, value as u32); }

	const FB7_BIT_OFFSET: u8 = 7;
	const FB7_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 7)
	pub fn get_fb7() -> u8 { ::read(REGISTER_ADDRESS, FB7_BIT_OFFSET, FB7_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 7)
	pub fn set_fb7(value: u8) { ::write(REGISTER_ADDRESS, FB7_BIT_OFFSET, FB7_BIT_WIDTH, value as u32); }

	const FB8_BIT_OFFSET: u8 = 8;
	const FB8_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 8)
	pub fn get_fb8() -> u8 { ::read(REGISTER_ADDRESS, FB8_BIT_OFFSET, FB8_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 8)
	pub fn set_fb8(value: u8) { ::write(REGISTER_ADDRESS, FB8_BIT_OFFSET, FB8_BIT_WIDTH, value as u32); }

	const FB9_BIT_OFFSET: u8 = 9;
	const FB9_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 9)
	pub fn get_fb9() -> u8 { ::read(REGISTER_ADDRESS, FB9_BIT_OFFSET, FB9_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 9)
	pub fn set_fb9(value: u8) { ::write(REGISTER_ADDRESS, FB9_BIT_OFFSET, FB9_BIT_WIDTH, value as u32); }

	const FB10_BIT_OFFSET: u8 = 10;
	const FB10_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 10)
	pub fn get_fb10() -> u8 { ::read(REGISTER_ADDRESS, FB10_BIT_OFFSET, FB10_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 10)
	pub fn set_fb10(value: u8) { ::write(REGISTER_ADDRESS, FB10_BIT_OFFSET, FB10_BIT_WIDTH, value as u32); }

	const FB11_BIT_OFFSET: u8 = 11;
	const FB11_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 11)
	pub fn get_fb11() -> u8 { ::read(REGISTER_ADDRESS, FB11_BIT_OFFSET, FB11_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 11)
	pub fn set_fb11(value: u8) { ::write(REGISTER_ADDRESS, FB11_BIT_OFFSET, FB11_BIT_WIDTH, value as u32); }

	const FB12_BIT_OFFSET: u8 = 12;
	const FB12_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 12)
	pub fn get_fb12() -> u8 { ::read(REGISTER_ADDRESS, FB12_BIT_OFFSET, FB12_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 12)
	pub fn set_fb12(value: u8) { ::write(REGISTER_ADDRESS, FB12_BIT_OFFSET, FB12_BIT_WIDTH, value as u32); }

	const FB13_BIT_OFFSET: u8 = 13;
	const FB13_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 13)
	pub fn get_fb13() -> u8 { ::read(REGISTER_ADDRESS, FB13_BIT_OFFSET, FB13_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 13)
	pub fn set_fb13(value: u8) { ::write(REGISTER_ADDRESS, FB13_BIT_OFFSET, FB13_BIT_WIDTH, value as u32); }

	const FB14_BIT_OFFSET: u8 = 14;
	const FB14_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 14)
	pub fn get_fb14() -> u8 { ::read(REGISTER_ADDRESS, FB14_BIT_OFFSET, FB14_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 14)
	pub fn set_fb14(value: u8) { ::write(REGISTER_ADDRESS, FB14_BIT_OFFSET, FB14_BIT_WIDTH, value as u32); }

	const FB15_BIT_OFFSET: u8 = 15;
	const FB15_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 15)
	pub fn get_fb15() -> u8 { ::read(REGISTER_ADDRESS, FB15_BIT_OFFSET, FB15_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 15)
	pub fn set_fb15(value: u8) { ::write(REGISTER_ADDRESS, FB15_BIT_OFFSET, FB15_BIT_WIDTH, value as u32); }

	const FB16_BIT_OFFSET: u8 = 16;
	const FB16_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 16)
	pub fn get_fb16() -> u8 { ::read(REGISTER_ADDRESS, FB16_BIT_OFFSET, FB16_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 16)
	pub fn set_fb16(value: u8) { ::write(REGISTER_ADDRESS, FB16_BIT_OFFSET, FB16_BIT_WIDTH, value as u32); }

	const FB17_BIT_OFFSET: u8 = 17;
	const FB17_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 17)
	pub fn get_fb17() -> u8 { ::read(REGISTER_ADDRESS, FB17_BIT_OFFSET, FB17_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 17)
	pub fn set_fb17(value: u8) { ::write(REGISTER_ADDRESS, FB17_BIT_OFFSET, FB17_BIT_WIDTH, value as u32); }

	const FB18_BIT_OFFSET: u8 = 18;
	const FB18_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 18)
	pub fn get_fb18() -> u8 { ::read(REGISTER_ADDRESS, FB18_BIT_OFFSET, FB18_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 18)
	pub fn set_fb18(value: u8) { ::write(REGISTER_ADDRESS, FB18_BIT_OFFSET, FB18_BIT_WIDTH, value as u32); }

	const FB19_BIT_OFFSET: u8 = 19;
	const FB19_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 19)
	pub fn get_fb19() -> u8 { ::read(REGISTER_ADDRESS, FB19_BIT_OFFSET, FB19_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 19)
	pub fn set_fb19(value: u8) { ::write(REGISTER_ADDRESS, FB19_BIT_OFFSET, FB19_BIT_WIDTH, value as u32); }

	const FB20_BIT_OFFSET: u8 = 20;
	const FB20_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 20)
	pub fn get_fb20() -> u8 { ::read(REGISTER_ADDRESS, FB20_BIT_OFFSET, FB20_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 20)
	pub fn set_fb20(value: u8) { ::write(REGISTER_ADDRESS, FB20_BIT_OFFSET, FB20_BIT_WIDTH, value as u32); }

	const FB21_BIT_OFFSET: u8 = 21;
	const FB21_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 21)
	pub fn get_fb21() -> u8 { ::read(REGISTER_ADDRESS, FB21_BIT_OFFSET, FB21_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 21)
	pub fn set_fb21(value: u8) { ::write(REGISTER_ADDRESS, FB21_BIT_OFFSET, FB21_BIT_WIDTH, value as u32); }

	const FB22_BIT_OFFSET: u8 = 22;
	const FB22_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 22)
	pub fn get_fb22() -> u8 { ::read(REGISTER_ADDRESS, FB22_BIT_OFFSET, FB22_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 22)
	pub fn set_fb22(value: u8) { ::write(REGISTER_ADDRESS, FB22_BIT_OFFSET, FB22_BIT_WIDTH, value as u32); }

	const FB23_BIT_OFFSET: u8 = 23;
	const FB23_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 23)
	pub fn get_fb23() -> u8 { ::read(REGISTER_ADDRESS, FB23_BIT_OFFSET, FB23_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 23)
	pub fn set_fb23(value: u8) { ::write(REGISTER_ADDRESS, FB23_BIT_OFFSET, FB23_BIT_WIDTH, value as u32); }

	const FB24_BIT_OFFSET: u8 = 24;
	const FB24_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 24)
	pub fn get_fb24() -> u8 { ::read(REGISTER_ADDRESS, FB24_BIT_OFFSET, FB24_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 24)
	pub fn set_fb24(value: u8) { ::write(REGISTER_ADDRESS, FB24_BIT_OFFSET, FB24_BIT_WIDTH, value as u32); }

	const FB25_BIT_OFFSET: u8 = 25;
	const FB25_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 25)
	pub fn get_fb25() -> u8 { ::read(REGISTER_ADDRESS, FB25_BIT_OFFSET, FB25_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 25)
	pub fn set_fb25(value: u8) { ::write(REGISTER_ADDRESS, FB25_BIT_OFFSET, FB25_BIT_WIDTH, value as u32); }

	const FB26_BIT_OFFSET: u8 = 26;
	const FB26_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 26)
	pub fn get_fb26() -> u8 { ::read(REGISTER_ADDRESS, FB26_BIT_OFFSET, FB26_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 26)
	pub fn set_fb26(value: u8) { ::write(REGISTER_ADDRESS, FB26_BIT_OFFSET, FB26_BIT_WIDTH, value as u32); }

	const FB27_BIT_OFFSET: u8 = 27;
	const FB27_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 27)
	pub fn get_fb27() -> u8 { ::read(REGISTER_ADDRESS, FB27_BIT_OFFSET, FB27_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 27)
	pub fn set_fb27(value: u8) { ::write(REGISTER_ADDRESS, FB27_BIT_OFFSET, FB27_BIT_WIDTH, value as u32); }

	const FB28_BIT_OFFSET: u8 = 28;
	const FB28_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 28)
	pub fn get_fb28() -> u8 { ::read(REGISTER_ADDRESS, FB28_BIT_OFFSET, FB28_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 28)
	pub fn set_fb28(value: u8) { ::write(REGISTER_ADDRESS, FB28_BIT_OFFSET, FB28_BIT_WIDTH, value as u32); }

	const FB29_BIT_OFFSET: u8 = 29;
	const FB29_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 29)
	pub fn get_fb29() -> u8 { ::read(REGISTER_ADDRESS, FB29_BIT_OFFSET, FB29_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 29)
	pub fn set_fb29(value: u8) { ::write(REGISTER_ADDRESS, FB29_BIT_OFFSET, FB29_BIT_WIDTH, value as u32); }

	const FB30_BIT_OFFSET: u8 = 30;
	const FB30_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 30)
	pub fn get_fb30() -> u8 { ::read(REGISTER_ADDRESS, FB30_BIT_OFFSET, FB30_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 30)
	pub fn set_fb30(value: u8) { ::write(REGISTER_ADDRESS, FB30_BIT_OFFSET, FB30_BIT_WIDTH, value as u32); }

	const FB31_BIT_OFFSET: u8 = 31;
	const FB31_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 31)
	pub fn get_fb31() -> u8 { ::read(REGISTER_ADDRESS, FB31_BIT_OFFSET, FB31_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 31)
	pub fn set_fb31(value: u8) { ::write(REGISTER_ADDRESS, FB31_BIT_OFFSET, FB31_BIT_WIDTH, value as u32); }
}
/// Filter bank 14 register 1
/// Size: 0x20 bits
pub mod f14r1 {
	const REGISTER_ADDRESS_OFFSET: u32 = 0x2B0;
	const REGISTER_ADDRESS: u32 = super::BASE_ADDRESS + REGISTER_ADDRESS_OFFSET;

	const FB0_BIT_OFFSET: u8 = 0;
	const FB0_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 0)
	pub fn get_fb0() -> u8 { ::read(REGISTER_ADDRESS, FB0_BIT_OFFSET, FB0_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 0)
	pub fn set_fb0(value: u8) { ::write(REGISTER_ADDRESS, FB0_BIT_OFFSET, FB0_BIT_WIDTH, value as u32); }

	const FB1_BIT_OFFSET: u8 = 1;
	const FB1_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 1)
	pub fn get_fb1() -> u8 { ::read(REGISTER_ADDRESS, FB1_BIT_OFFSET, FB1_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 1)
	pub fn set_fb1(value: u8) { ::write(REGISTER_ADDRESS, FB1_BIT_OFFSET, FB1_BIT_WIDTH, value as u32); }

	const FB2_BIT_OFFSET: u8 = 2;
	const FB2_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 2)
	pub fn get_fb2() -> u8 { ::read(REGISTER_ADDRESS, FB2_BIT_OFFSET, FB2_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 2)
	pub fn set_fb2(value: u8) { ::write(REGISTER_ADDRESS, FB2_BIT_OFFSET, FB2_BIT_WIDTH, value as u32); }

	const FB3_BIT_OFFSET: u8 = 3;
	const FB3_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 3)
	pub fn get_fb3() -> u8 { ::read(REGISTER_ADDRESS, FB3_BIT_OFFSET, FB3_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 3)
	pub fn set_fb3(value: u8) { ::write(REGISTER_ADDRESS, FB3_BIT_OFFSET, FB3_BIT_WIDTH, value as u32); }

	const FB4_BIT_OFFSET: u8 = 4;
	const FB4_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 4)
	pub fn get_fb4() -> u8 { ::read(REGISTER_ADDRESS, FB4_BIT_OFFSET, FB4_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 4)
	pub fn set_fb4(value: u8) { ::write(REGISTER_ADDRESS, FB4_BIT_OFFSET, FB4_BIT_WIDTH, value as u32); }

	const FB5_BIT_OFFSET: u8 = 5;
	const FB5_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 5)
	pub fn get_fb5() -> u8 { ::read(REGISTER_ADDRESS, FB5_BIT_OFFSET, FB5_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 5)
	pub fn set_fb5(value: u8) { ::write(REGISTER_ADDRESS, FB5_BIT_OFFSET, FB5_BIT_WIDTH, value as u32); }

	const FB6_BIT_OFFSET: u8 = 6;
	const FB6_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 6)
	pub fn get_fb6() -> u8 { ::read(REGISTER_ADDRESS, FB6_BIT_OFFSET, FB6_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 6)
	pub fn set_fb6(value: u8) { ::write(REGISTER_ADDRESS, FB6_BIT_OFFSET, FB6_BIT_WIDTH, value as u32); }

	const FB7_BIT_OFFSET: u8 = 7;
	const FB7_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 7)
	pub fn get_fb7() -> u8 { ::read(REGISTER_ADDRESS, FB7_BIT_OFFSET, FB7_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 7)
	pub fn set_fb7(value: u8) { ::write(REGISTER_ADDRESS, FB7_BIT_OFFSET, FB7_BIT_WIDTH, value as u32); }

	const FB8_BIT_OFFSET: u8 = 8;
	const FB8_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 8)
	pub fn get_fb8() -> u8 { ::read(REGISTER_ADDRESS, FB8_BIT_OFFSET, FB8_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 8)
	pub fn set_fb8(value: u8) { ::write(REGISTER_ADDRESS, FB8_BIT_OFFSET, FB8_BIT_WIDTH, value as u32); }

	const FB9_BIT_OFFSET: u8 = 9;
	const FB9_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 9)
	pub fn get_fb9() -> u8 { ::read(REGISTER_ADDRESS, FB9_BIT_OFFSET, FB9_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 9)
	pub fn set_fb9(value: u8) { ::write(REGISTER_ADDRESS, FB9_BIT_OFFSET, FB9_BIT_WIDTH, value as u32); }

	const FB10_BIT_OFFSET: u8 = 10;
	const FB10_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 10)
	pub fn get_fb10() -> u8 { ::read(REGISTER_ADDRESS, FB10_BIT_OFFSET, FB10_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 10)
	pub fn set_fb10(value: u8) { ::write(REGISTER_ADDRESS, FB10_BIT_OFFSET, FB10_BIT_WIDTH, value as u32); }

	const FB11_BIT_OFFSET: u8 = 11;
	const FB11_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 11)
	pub fn get_fb11() -> u8 { ::read(REGISTER_ADDRESS, FB11_BIT_OFFSET, FB11_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 11)
	pub fn set_fb11(value: u8) { ::write(REGISTER_ADDRESS, FB11_BIT_OFFSET, FB11_BIT_WIDTH, value as u32); }

	const FB12_BIT_OFFSET: u8 = 12;
	const FB12_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 12)
	pub fn get_fb12() -> u8 { ::read(REGISTER_ADDRESS, FB12_BIT_OFFSET, FB12_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 12)
	pub fn set_fb12(value: u8) { ::write(REGISTER_ADDRESS, FB12_BIT_OFFSET, FB12_BIT_WIDTH, value as u32); }

	const FB13_BIT_OFFSET: u8 = 13;
	const FB13_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 13)
	pub fn get_fb13() -> u8 { ::read(REGISTER_ADDRESS, FB13_BIT_OFFSET, FB13_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 13)
	pub fn set_fb13(value: u8) { ::write(REGISTER_ADDRESS, FB13_BIT_OFFSET, FB13_BIT_WIDTH, value as u32); }

	const FB14_BIT_OFFSET: u8 = 14;
	const FB14_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 14)
	pub fn get_fb14() -> u8 { ::read(REGISTER_ADDRESS, FB14_BIT_OFFSET, FB14_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 14)
	pub fn set_fb14(value: u8) { ::write(REGISTER_ADDRESS, FB14_BIT_OFFSET, FB14_BIT_WIDTH, value as u32); }

	const FB15_BIT_OFFSET: u8 = 15;
	const FB15_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 15)
	pub fn get_fb15() -> u8 { ::read(REGISTER_ADDRESS, FB15_BIT_OFFSET, FB15_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 15)
	pub fn set_fb15(value: u8) { ::write(REGISTER_ADDRESS, FB15_BIT_OFFSET, FB15_BIT_WIDTH, value as u32); }

	const FB16_BIT_OFFSET: u8 = 16;
	const FB16_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 16)
	pub fn get_fb16() -> u8 { ::read(REGISTER_ADDRESS, FB16_BIT_OFFSET, FB16_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 16)
	pub fn set_fb16(value: u8) { ::write(REGISTER_ADDRESS, FB16_BIT_OFFSET, FB16_BIT_WIDTH, value as u32); }

	const FB17_BIT_OFFSET: u8 = 17;
	const FB17_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 17)
	pub fn get_fb17() -> u8 { ::read(REGISTER_ADDRESS, FB17_BIT_OFFSET, FB17_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 17)
	pub fn set_fb17(value: u8) { ::write(REGISTER_ADDRESS, FB17_BIT_OFFSET, FB17_BIT_WIDTH, value as u32); }

	const FB18_BIT_OFFSET: u8 = 18;
	const FB18_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 18)
	pub fn get_fb18() -> u8 { ::read(REGISTER_ADDRESS, FB18_BIT_OFFSET, FB18_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 18)
	pub fn set_fb18(value: u8) { ::write(REGISTER_ADDRESS, FB18_BIT_OFFSET, FB18_BIT_WIDTH, value as u32); }

	const FB19_BIT_OFFSET: u8 = 19;
	const FB19_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 19)
	pub fn get_fb19() -> u8 { ::read(REGISTER_ADDRESS, FB19_BIT_OFFSET, FB19_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 19)
	pub fn set_fb19(value: u8) { ::write(REGISTER_ADDRESS, FB19_BIT_OFFSET, FB19_BIT_WIDTH, value as u32); }

	const FB20_BIT_OFFSET: u8 = 20;
	const FB20_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 20)
	pub fn get_fb20() -> u8 { ::read(REGISTER_ADDRESS, FB20_BIT_OFFSET, FB20_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 20)
	pub fn set_fb20(value: u8) { ::write(REGISTER_ADDRESS, FB20_BIT_OFFSET, FB20_BIT_WIDTH, value as u32); }

	const FB21_BIT_OFFSET: u8 = 21;
	const FB21_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 21)
	pub fn get_fb21() -> u8 { ::read(REGISTER_ADDRESS, FB21_BIT_OFFSET, FB21_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 21)
	pub fn set_fb21(value: u8) { ::write(REGISTER_ADDRESS, FB21_BIT_OFFSET, FB21_BIT_WIDTH, value as u32); }

	const FB22_BIT_OFFSET: u8 = 22;
	const FB22_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 22)
	pub fn get_fb22() -> u8 { ::read(REGISTER_ADDRESS, FB22_BIT_OFFSET, FB22_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 22)
	pub fn set_fb22(value: u8) { ::write(REGISTER_ADDRESS, FB22_BIT_OFFSET, FB22_BIT_WIDTH, value as u32); }

	const FB23_BIT_OFFSET: u8 = 23;
	const FB23_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 23)
	pub fn get_fb23() -> u8 { ::read(REGISTER_ADDRESS, FB23_BIT_OFFSET, FB23_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 23)
	pub fn set_fb23(value: u8) { ::write(REGISTER_ADDRESS, FB23_BIT_OFFSET, FB23_BIT_WIDTH, value as u32); }

	const FB24_BIT_OFFSET: u8 = 24;
	const FB24_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 24)
	pub fn get_fb24() -> u8 { ::read(REGISTER_ADDRESS, FB24_BIT_OFFSET, FB24_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 24)
	pub fn set_fb24(value: u8) { ::write(REGISTER_ADDRESS, FB24_BIT_OFFSET, FB24_BIT_WIDTH, value as u32); }

	const FB25_BIT_OFFSET: u8 = 25;
	const FB25_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 25)
	pub fn get_fb25() -> u8 { ::read(REGISTER_ADDRESS, FB25_BIT_OFFSET, FB25_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 25)
	pub fn set_fb25(value: u8) { ::write(REGISTER_ADDRESS, FB25_BIT_OFFSET, FB25_BIT_WIDTH, value as u32); }

	const FB26_BIT_OFFSET: u8 = 26;
	const FB26_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 26)
	pub fn get_fb26() -> u8 { ::read(REGISTER_ADDRESS, FB26_BIT_OFFSET, FB26_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 26)
	pub fn set_fb26(value: u8) { ::write(REGISTER_ADDRESS, FB26_BIT_OFFSET, FB26_BIT_WIDTH, value as u32); }

	const FB27_BIT_OFFSET: u8 = 27;
	const FB27_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 27)
	pub fn get_fb27() -> u8 { ::read(REGISTER_ADDRESS, FB27_BIT_OFFSET, FB27_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 27)
	pub fn set_fb27(value: u8) { ::write(REGISTER_ADDRESS, FB27_BIT_OFFSET, FB27_BIT_WIDTH, value as u32); }

	const FB28_BIT_OFFSET: u8 = 28;
	const FB28_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 28)
	pub fn get_fb28() -> u8 { ::read(REGISTER_ADDRESS, FB28_BIT_OFFSET, FB28_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 28)
	pub fn set_fb28(value: u8) { ::write(REGISTER_ADDRESS, FB28_BIT_OFFSET, FB28_BIT_WIDTH, value as u32); }

	const FB29_BIT_OFFSET: u8 = 29;
	const FB29_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 29)
	pub fn get_fb29() -> u8 { ::read(REGISTER_ADDRESS, FB29_BIT_OFFSET, FB29_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 29)
	pub fn set_fb29(value: u8) { ::write(REGISTER_ADDRESS, FB29_BIT_OFFSET, FB29_BIT_WIDTH, value as u32); }

	const FB30_BIT_OFFSET: u8 = 30;
	const FB30_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 30)
	pub fn get_fb30() -> u8 { ::read(REGISTER_ADDRESS, FB30_BIT_OFFSET, FB30_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 30)
	pub fn set_fb30(value: u8) { ::write(REGISTER_ADDRESS, FB30_BIT_OFFSET, FB30_BIT_WIDTH, value as u32); }

	const FB31_BIT_OFFSET: u8 = 31;
	const FB31_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 31)
	pub fn get_fb31() -> u8 { ::read(REGISTER_ADDRESS, FB31_BIT_OFFSET, FB31_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 31)
	pub fn set_fb31(value: u8) { ::write(REGISTER_ADDRESS, FB31_BIT_OFFSET, FB31_BIT_WIDTH, value as u32); }
}
/// Filter bank 14 register 2
/// Size: 0x20 bits
pub mod f14r2 {
	const REGISTER_ADDRESS_OFFSET: u32 = 0x2B4;
	const REGISTER_ADDRESS: u32 = super::BASE_ADDRESS + REGISTER_ADDRESS_OFFSET;

	const FB0_BIT_OFFSET: u8 = 0;
	const FB0_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 0)
	pub fn get_fb0() -> u8 { ::read(REGISTER_ADDRESS, FB0_BIT_OFFSET, FB0_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 0)
	pub fn set_fb0(value: u8) { ::write(REGISTER_ADDRESS, FB0_BIT_OFFSET, FB0_BIT_WIDTH, value as u32); }

	const FB1_BIT_OFFSET: u8 = 1;
	const FB1_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 1)
	pub fn get_fb1() -> u8 { ::read(REGISTER_ADDRESS, FB1_BIT_OFFSET, FB1_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 1)
	pub fn set_fb1(value: u8) { ::write(REGISTER_ADDRESS, FB1_BIT_OFFSET, FB1_BIT_WIDTH, value as u32); }

	const FB2_BIT_OFFSET: u8 = 2;
	const FB2_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 2)
	pub fn get_fb2() -> u8 { ::read(REGISTER_ADDRESS, FB2_BIT_OFFSET, FB2_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 2)
	pub fn set_fb2(value: u8) { ::write(REGISTER_ADDRESS, FB2_BIT_OFFSET, FB2_BIT_WIDTH, value as u32); }

	const FB3_BIT_OFFSET: u8 = 3;
	const FB3_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 3)
	pub fn get_fb3() -> u8 { ::read(REGISTER_ADDRESS, FB3_BIT_OFFSET, FB3_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 3)
	pub fn set_fb3(value: u8) { ::write(REGISTER_ADDRESS, FB3_BIT_OFFSET, FB3_BIT_WIDTH, value as u32); }

	const FB4_BIT_OFFSET: u8 = 4;
	const FB4_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 4)
	pub fn get_fb4() -> u8 { ::read(REGISTER_ADDRESS, FB4_BIT_OFFSET, FB4_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 4)
	pub fn set_fb4(value: u8) { ::write(REGISTER_ADDRESS, FB4_BIT_OFFSET, FB4_BIT_WIDTH, value as u32); }

	const FB5_BIT_OFFSET: u8 = 5;
	const FB5_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 5)
	pub fn get_fb5() -> u8 { ::read(REGISTER_ADDRESS, FB5_BIT_OFFSET, FB5_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 5)
	pub fn set_fb5(value: u8) { ::write(REGISTER_ADDRESS, FB5_BIT_OFFSET, FB5_BIT_WIDTH, value as u32); }

	const FB6_BIT_OFFSET: u8 = 6;
	const FB6_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 6)
	pub fn get_fb6() -> u8 { ::read(REGISTER_ADDRESS, FB6_BIT_OFFSET, FB6_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 6)
	pub fn set_fb6(value: u8) { ::write(REGISTER_ADDRESS, FB6_BIT_OFFSET, FB6_BIT_WIDTH, value as u32); }

	const FB7_BIT_OFFSET: u8 = 7;
	const FB7_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 7)
	pub fn get_fb7() -> u8 { ::read(REGISTER_ADDRESS, FB7_BIT_OFFSET, FB7_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 7)
	pub fn set_fb7(value: u8) { ::write(REGISTER_ADDRESS, FB7_BIT_OFFSET, FB7_BIT_WIDTH, value as u32); }

	const FB8_BIT_OFFSET: u8 = 8;
	const FB8_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 8)
	pub fn get_fb8() -> u8 { ::read(REGISTER_ADDRESS, FB8_BIT_OFFSET, FB8_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 8)
	pub fn set_fb8(value: u8) { ::write(REGISTER_ADDRESS, FB8_BIT_OFFSET, FB8_BIT_WIDTH, value as u32); }

	const FB9_BIT_OFFSET: u8 = 9;
	const FB9_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 9)
	pub fn get_fb9() -> u8 { ::read(REGISTER_ADDRESS, FB9_BIT_OFFSET, FB9_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 9)
	pub fn set_fb9(value: u8) { ::write(REGISTER_ADDRESS, FB9_BIT_OFFSET, FB9_BIT_WIDTH, value as u32); }

	const FB10_BIT_OFFSET: u8 = 10;
	const FB10_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 10)
	pub fn get_fb10() -> u8 { ::read(REGISTER_ADDRESS, FB10_BIT_OFFSET, FB10_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 10)
	pub fn set_fb10(value: u8) { ::write(REGISTER_ADDRESS, FB10_BIT_OFFSET, FB10_BIT_WIDTH, value as u32); }

	const FB11_BIT_OFFSET: u8 = 11;
	const FB11_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 11)
	pub fn get_fb11() -> u8 { ::read(REGISTER_ADDRESS, FB11_BIT_OFFSET, FB11_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 11)
	pub fn set_fb11(value: u8) { ::write(REGISTER_ADDRESS, FB11_BIT_OFFSET, FB11_BIT_WIDTH, value as u32); }

	const FB12_BIT_OFFSET: u8 = 12;
	const FB12_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 12)
	pub fn get_fb12() -> u8 { ::read(REGISTER_ADDRESS, FB12_BIT_OFFSET, FB12_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 12)
	pub fn set_fb12(value: u8) { ::write(REGISTER_ADDRESS, FB12_BIT_OFFSET, FB12_BIT_WIDTH, value as u32); }

	const FB13_BIT_OFFSET: u8 = 13;
	const FB13_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 13)
	pub fn get_fb13() -> u8 { ::read(REGISTER_ADDRESS, FB13_BIT_OFFSET, FB13_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 13)
	pub fn set_fb13(value: u8) { ::write(REGISTER_ADDRESS, FB13_BIT_OFFSET, FB13_BIT_WIDTH, value as u32); }

	const FB14_BIT_OFFSET: u8 = 14;
	const FB14_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 14)
	pub fn get_fb14() -> u8 { ::read(REGISTER_ADDRESS, FB14_BIT_OFFSET, FB14_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 14)
	pub fn set_fb14(value: u8) { ::write(REGISTER_ADDRESS, FB14_BIT_OFFSET, FB14_BIT_WIDTH, value as u32); }

	const FB15_BIT_OFFSET: u8 = 15;
	const FB15_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 15)
	pub fn get_fb15() -> u8 { ::read(REGISTER_ADDRESS, FB15_BIT_OFFSET, FB15_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 15)
	pub fn set_fb15(value: u8) { ::write(REGISTER_ADDRESS, FB15_BIT_OFFSET, FB15_BIT_WIDTH, value as u32); }

	const FB16_BIT_OFFSET: u8 = 16;
	const FB16_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 16)
	pub fn get_fb16() -> u8 { ::read(REGISTER_ADDRESS, FB16_BIT_OFFSET, FB16_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 16)
	pub fn set_fb16(value: u8) { ::write(REGISTER_ADDRESS, FB16_BIT_OFFSET, FB16_BIT_WIDTH, value as u32); }

	const FB17_BIT_OFFSET: u8 = 17;
	const FB17_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 17)
	pub fn get_fb17() -> u8 { ::read(REGISTER_ADDRESS, FB17_BIT_OFFSET, FB17_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 17)
	pub fn set_fb17(value: u8) { ::write(REGISTER_ADDRESS, FB17_BIT_OFFSET, FB17_BIT_WIDTH, value as u32); }

	const FB18_BIT_OFFSET: u8 = 18;
	const FB18_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 18)
	pub fn get_fb18() -> u8 { ::read(REGISTER_ADDRESS, FB18_BIT_OFFSET, FB18_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 18)
	pub fn set_fb18(value: u8) { ::write(REGISTER_ADDRESS, FB18_BIT_OFFSET, FB18_BIT_WIDTH, value as u32); }

	const FB19_BIT_OFFSET: u8 = 19;
	const FB19_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 19)
	pub fn get_fb19() -> u8 { ::read(REGISTER_ADDRESS, FB19_BIT_OFFSET, FB19_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 19)
	pub fn set_fb19(value: u8) { ::write(REGISTER_ADDRESS, FB19_BIT_OFFSET, FB19_BIT_WIDTH, value as u32); }

	const FB20_BIT_OFFSET: u8 = 20;
	const FB20_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 20)
	pub fn get_fb20() -> u8 { ::read(REGISTER_ADDRESS, FB20_BIT_OFFSET, FB20_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 20)
	pub fn set_fb20(value: u8) { ::write(REGISTER_ADDRESS, FB20_BIT_OFFSET, FB20_BIT_WIDTH, value as u32); }

	const FB21_BIT_OFFSET: u8 = 21;
	const FB21_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 21)
	pub fn get_fb21() -> u8 { ::read(REGISTER_ADDRESS, FB21_BIT_OFFSET, FB21_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 21)
	pub fn set_fb21(value: u8) { ::write(REGISTER_ADDRESS, FB21_BIT_OFFSET, FB21_BIT_WIDTH, value as u32); }

	const FB22_BIT_OFFSET: u8 = 22;
	const FB22_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 22)
	pub fn get_fb22() -> u8 { ::read(REGISTER_ADDRESS, FB22_BIT_OFFSET, FB22_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 22)
	pub fn set_fb22(value: u8) { ::write(REGISTER_ADDRESS, FB22_BIT_OFFSET, FB22_BIT_WIDTH, value as u32); }

	const FB23_BIT_OFFSET: u8 = 23;
	const FB23_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 23)
	pub fn get_fb23() -> u8 { ::read(REGISTER_ADDRESS, FB23_BIT_OFFSET, FB23_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 23)
	pub fn set_fb23(value: u8) { ::write(REGISTER_ADDRESS, FB23_BIT_OFFSET, FB23_BIT_WIDTH, value as u32); }

	const FB24_BIT_OFFSET: u8 = 24;
	const FB24_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 24)
	pub fn get_fb24() -> u8 { ::read(REGISTER_ADDRESS, FB24_BIT_OFFSET, FB24_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 24)
	pub fn set_fb24(value: u8) { ::write(REGISTER_ADDRESS, FB24_BIT_OFFSET, FB24_BIT_WIDTH, value as u32); }

	const FB25_BIT_OFFSET: u8 = 25;
	const FB25_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 25)
	pub fn get_fb25() -> u8 { ::read(REGISTER_ADDRESS, FB25_BIT_OFFSET, FB25_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 25)
	pub fn set_fb25(value: u8) { ::write(REGISTER_ADDRESS, FB25_BIT_OFFSET, FB25_BIT_WIDTH, value as u32); }

	const FB26_BIT_OFFSET: u8 = 26;
	const FB26_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 26)
	pub fn get_fb26() -> u8 { ::read(REGISTER_ADDRESS, FB26_BIT_OFFSET, FB26_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 26)
	pub fn set_fb26(value: u8) { ::write(REGISTER_ADDRESS, FB26_BIT_OFFSET, FB26_BIT_WIDTH, value as u32); }

	const FB27_BIT_OFFSET: u8 = 27;
	const FB27_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 27)
	pub fn get_fb27() -> u8 { ::read(REGISTER_ADDRESS, FB27_BIT_OFFSET, FB27_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 27)
	pub fn set_fb27(value: u8) { ::write(REGISTER_ADDRESS, FB27_BIT_OFFSET, FB27_BIT_WIDTH, value as u32); }

	const FB28_BIT_OFFSET: u8 = 28;
	const FB28_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 28)
	pub fn get_fb28() -> u8 { ::read(REGISTER_ADDRESS, FB28_BIT_OFFSET, FB28_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 28)
	pub fn set_fb28(value: u8) { ::write(REGISTER_ADDRESS, FB28_BIT_OFFSET, FB28_BIT_WIDTH, value as u32); }

	const FB29_BIT_OFFSET: u8 = 29;
	const FB29_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 29)
	pub fn get_fb29() -> u8 { ::read(REGISTER_ADDRESS, FB29_BIT_OFFSET, FB29_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 29)
	pub fn set_fb29(value: u8) { ::write(REGISTER_ADDRESS, FB29_BIT_OFFSET, FB29_BIT_WIDTH, value as u32); }

	const FB30_BIT_OFFSET: u8 = 30;
	const FB30_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 30)
	pub fn get_fb30() -> u8 { ::read(REGISTER_ADDRESS, FB30_BIT_OFFSET, FB30_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 30)
	pub fn set_fb30(value: u8) { ::write(REGISTER_ADDRESS, FB30_BIT_OFFSET, FB30_BIT_WIDTH, value as u32); }

	const FB31_BIT_OFFSET: u8 = 31;
	const FB31_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 31)
	pub fn get_fb31() -> u8 { ::read(REGISTER_ADDRESS, FB31_BIT_OFFSET, FB31_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 31)
	pub fn set_fb31(value: u8) { ::write(REGISTER_ADDRESS, FB31_BIT_OFFSET, FB31_BIT_WIDTH, value as u32); }
}
/// Filter bank 15 register 1
/// Size: 0x20 bits
pub mod f15r1 {
	const REGISTER_ADDRESS_OFFSET: u32 = 0x2B8;
	const REGISTER_ADDRESS: u32 = super::BASE_ADDRESS + REGISTER_ADDRESS_OFFSET;

	const FB0_BIT_OFFSET: u8 = 0;
	const FB0_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 0)
	pub fn get_fb0() -> u8 { ::read(REGISTER_ADDRESS, FB0_BIT_OFFSET, FB0_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 0)
	pub fn set_fb0(value: u8) { ::write(REGISTER_ADDRESS, FB0_BIT_OFFSET, FB0_BIT_WIDTH, value as u32); }

	const FB1_BIT_OFFSET: u8 = 1;
	const FB1_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 1)
	pub fn get_fb1() -> u8 { ::read(REGISTER_ADDRESS, FB1_BIT_OFFSET, FB1_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 1)
	pub fn set_fb1(value: u8) { ::write(REGISTER_ADDRESS, FB1_BIT_OFFSET, FB1_BIT_WIDTH, value as u32); }

	const FB2_BIT_OFFSET: u8 = 2;
	const FB2_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 2)
	pub fn get_fb2() -> u8 { ::read(REGISTER_ADDRESS, FB2_BIT_OFFSET, FB2_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 2)
	pub fn set_fb2(value: u8) { ::write(REGISTER_ADDRESS, FB2_BIT_OFFSET, FB2_BIT_WIDTH, value as u32); }

	const FB3_BIT_OFFSET: u8 = 3;
	const FB3_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 3)
	pub fn get_fb3() -> u8 { ::read(REGISTER_ADDRESS, FB3_BIT_OFFSET, FB3_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 3)
	pub fn set_fb3(value: u8) { ::write(REGISTER_ADDRESS, FB3_BIT_OFFSET, FB3_BIT_WIDTH, value as u32); }

	const FB4_BIT_OFFSET: u8 = 4;
	const FB4_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 4)
	pub fn get_fb4() -> u8 { ::read(REGISTER_ADDRESS, FB4_BIT_OFFSET, FB4_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 4)
	pub fn set_fb4(value: u8) { ::write(REGISTER_ADDRESS, FB4_BIT_OFFSET, FB4_BIT_WIDTH, value as u32); }

	const FB5_BIT_OFFSET: u8 = 5;
	const FB5_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 5)
	pub fn get_fb5() -> u8 { ::read(REGISTER_ADDRESS, FB5_BIT_OFFSET, FB5_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 5)
	pub fn set_fb5(value: u8) { ::write(REGISTER_ADDRESS, FB5_BIT_OFFSET, FB5_BIT_WIDTH, value as u32); }

	const FB6_BIT_OFFSET: u8 = 6;
	const FB6_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 6)
	pub fn get_fb6() -> u8 { ::read(REGISTER_ADDRESS, FB6_BIT_OFFSET, FB6_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 6)
	pub fn set_fb6(value: u8) { ::write(REGISTER_ADDRESS, FB6_BIT_OFFSET, FB6_BIT_WIDTH, value as u32); }

	const FB7_BIT_OFFSET: u8 = 7;
	const FB7_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 7)
	pub fn get_fb7() -> u8 { ::read(REGISTER_ADDRESS, FB7_BIT_OFFSET, FB7_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 7)
	pub fn set_fb7(value: u8) { ::write(REGISTER_ADDRESS, FB7_BIT_OFFSET, FB7_BIT_WIDTH, value as u32); }

	const FB8_BIT_OFFSET: u8 = 8;
	const FB8_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 8)
	pub fn get_fb8() -> u8 { ::read(REGISTER_ADDRESS, FB8_BIT_OFFSET, FB8_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 8)
	pub fn set_fb8(value: u8) { ::write(REGISTER_ADDRESS, FB8_BIT_OFFSET, FB8_BIT_WIDTH, value as u32); }

	const FB9_BIT_OFFSET: u8 = 9;
	const FB9_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 9)
	pub fn get_fb9() -> u8 { ::read(REGISTER_ADDRESS, FB9_BIT_OFFSET, FB9_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 9)
	pub fn set_fb9(value: u8) { ::write(REGISTER_ADDRESS, FB9_BIT_OFFSET, FB9_BIT_WIDTH, value as u32); }

	const FB10_BIT_OFFSET: u8 = 10;
	const FB10_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 10)
	pub fn get_fb10() -> u8 { ::read(REGISTER_ADDRESS, FB10_BIT_OFFSET, FB10_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 10)
	pub fn set_fb10(value: u8) { ::write(REGISTER_ADDRESS, FB10_BIT_OFFSET, FB10_BIT_WIDTH, value as u32); }

	const FB11_BIT_OFFSET: u8 = 11;
	const FB11_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 11)
	pub fn get_fb11() -> u8 { ::read(REGISTER_ADDRESS, FB11_BIT_OFFSET, FB11_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 11)
	pub fn set_fb11(value: u8) { ::write(REGISTER_ADDRESS, FB11_BIT_OFFSET, FB11_BIT_WIDTH, value as u32); }

	const FB12_BIT_OFFSET: u8 = 12;
	const FB12_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 12)
	pub fn get_fb12() -> u8 { ::read(REGISTER_ADDRESS, FB12_BIT_OFFSET, FB12_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 12)
	pub fn set_fb12(value: u8) { ::write(REGISTER_ADDRESS, FB12_BIT_OFFSET, FB12_BIT_WIDTH, value as u32); }

	const FB13_BIT_OFFSET: u8 = 13;
	const FB13_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 13)
	pub fn get_fb13() -> u8 { ::read(REGISTER_ADDRESS, FB13_BIT_OFFSET, FB13_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 13)
	pub fn set_fb13(value: u8) { ::write(REGISTER_ADDRESS, FB13_BIT_OFFSET, FB13_BIT_WIDTH, value as u32); }

	const FB14_BIT_OFFSET: u8 = 14;
	const FB14_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 14)
	pub fn get_fb14() -> u8 { ::read(REGISTER_ADDRESS, FB14_BIT_OFFSET, FB14_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 14)
	pub fn set_fb14(value: u8) { ::write(REGISTER_ADDRESS, FB14_BIT_OFFSET, FB14_BIT_WIDTH, value as u32); }

	const FB15_BIT_OFFSET: u8 = 15;
	const FB15_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 15)
	pub fn get_fb15() -> u8 { ::read(REGISTER_ADDRESS, FB15_BIT_OFFSET, FB15_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 15)
	pub fn set_fb15(value: u8) { ::write(REGISTER_ADDRESS, FB15_BIT_OFFSET, FB15_BIT_WIDTH, value as u32); }

	const FB16_BIT_OFFSET: u8 = 16;
	const FB16_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 16)
	pub fn get_fb16() -> u8 { ::read(REGISTER_ADDRESS, FB16_BIT_OFFSET, FB16_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 16)
	pub fn set_fb16(value: u8) { ::write(REGISTER_ADDRESS, FB16_BIT_OFFSET, FB16_BIT_WIDTH, value as u32); }

	const FB17_BIT_OFFSET: u8 = 17;
	const FB17_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 17)
	pub fn get_fb17() -> u8 { ::read(REGISTER_ADDRESS, FB17_BIT_OFFSET, FB17_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 17)
	pub fn set_fb17(value: u8) { ::write(REGISTER_ADDRESS, FB17_BIT_OFFSET, FB17_BIT_WIDTH, value as u32); }

	const FB18_BIT_OFFSET: u8 = 18;
	const FB18_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 18)
	pub fn get_fb18() -> u8 { ::read(REGISTER_ADDRESS, FB18_BIT_OFFSET, FB18_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 18)
	pub fn set_fb18(value: u8) { ::write(REGISTER_ADDRESS, FB18_BIT_OFFSET, FB18_BIT_WIDTH, value as u32); }

	const FB19_BIT_OFFSET: u8 = 19;
	const FB19_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 19)
	pub fn get_fb19() -> u8 { ::read(REGISTER_ADDRESS, FB19_BIT_OFFSET, FB19_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 19)
	pub fn set_fb19(value: u8) { ::write(REGISTER_ADDRESS, FB19_BIT_OFFSET, FB19_BIT_WIDTH, value as u32); }

	const FB20_BIT_OFFSET: u8 = 20;
	const FB20_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 20)
	pub fn get_fb20() -> u8 { ::read(REGISTER_ADDRESS, FB20_BIT_OFFSET, FB20_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 20)
	pub fn set_fb20(value: u8) { ::write(REGISTER_ADDRESS, FB20_BIT_OFFSET, FB20_BIT_WIDTH, value as u32); }

	const FB21_BIT_OFFSET: u8 = 21;
	const FB21_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 21)
	pub fn get_fb21() -> u8 { ::read(REGISTER_ADDRESS, FB21_BIT_OFFSET, FB21_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 21)
	pub fn set_fb21(value: u8) { ::write(REGISTER_ADDRESS, FB21_BIT_OFFSET, FB21_BIT_WIDTH, value as u32); }

	const FB22_BIT_OFFSET: u8 = 22;
	const FB22_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 22)
	pub fn get_fb22() -> u8 { ::read(REGISTER_ADDRESS, FB22_BIT_OFFSET, FB22_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 22)
	pub fn set_fb22(value: u8) { ::write(REGISTER_ADDRESS, FB22_BIT_OFFSET, FB22_BIT_WIDTH, value as u32); }

	const FB23_BIT_OFFSET: u8 = 23;
	const FB23_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 23)
	pub fn get_fb23() -> u8 { ::read(REGISTER_ADDRESS, FB23_BIT_OFFSET, FB23_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 23)
	pub fn set_fb23(value: u8) { ::write(REGISTER_ADDRESS, FB23_BIT_OFFSET, FB23_BIT_WIDTH, value as u32); }

	const FB24_BIT_OFFSET: u8 = 24;
	const FB24_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 24)
	pub fn get_fb24() -> u8 { ::read(REGISTER_ADDRESS, FB24_BIT_OFFSET, FB24_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 24)
	pub fn set_fb24(value: u8) { ::write(REGISTER_ADDRESS, FB24_BIT_OFFSET, FB24_BIT_WIDTH, value as u32); }

	const FB25_BIT_OFFSET: u8 = 25;
	const FB25_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 25)
	pub fn get_fb25() -> u8 { ::read(REGISTER_ADDRESS, FB25_BIT_OFFSET, FB25_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 25)
	pub fn set_fb25(value: u8) { ::write(REGISTER_ADDRESS, FB25_BIT_OFFSET, FB25_BIT_WIDTH, value as u32); }

	const FB26_BIT_OFFSET: u8 = 26;
	const FB26_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 26)
	pub fn get_fb26() -> u8 { ::read(REGISTER_ADDRESS, FB26_BIT_OFFSET, FB26_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 26)
	pub fn set_fb26(value: u8) { ::write(REGISTER_ADDRESS, FB26_BIT_OFFSET, FB26_BIT_WIDTH, value as u32); }

	const FB27_BIT_OFFSET: u8 = 27;
	const FB27_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 27)
	pub fn get_fb27() -> u8 { ::read(REGISTER_ADDRESS, FB27_BIT_OFFSET, FB27_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 27)
	pub fn set_fb27(value: u8) { ::write(REGISTER_ADDRESS, FB27_BIT_OFFSET, FB27_BIT_WIDTH, value as u32); }

	const FB28_BIT_OFFSET: u8 = 28;
	const FB28_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 28)
	pub fn get_fb28() -> u8 { ::read(REGISTER_ADDRESS, FB28_BIT_OFFSET, FB28_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 28)
	pub fn set_fb28(value: u8) { ::write(REGISTER_ADDRESS, FB28_BIT_OFFSET, FB28_BIT_WIDTH, value as u32); }

	const FB29_BIT_OFFSET: u8 = 29;
	const FB29_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 29)
	pub fn get_fb29() -> u8 { ::read(REGISTER_ADDRESS, FB29_BIT_OFFSET, FB29_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 29)
	pub fn set_fb29(value: u8) { ::write(REGISTER_ADDRESS, FB29_BIT_OFFSET, FB29_BIT_WIDTH, value as u32); }

	const FB30_BIT_OFFSET: u8 = 30;
	const FB30_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 30)
	pub fn get_fb30() -> u8 { ::read(REGISTER_ADDRESS, FB30_BIT_OFFSET, FB30_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 30)
	pub fn set_fb30(value: u8) { ::write(REGISTER_ADDRESS, FB30_BIT_OFFSET, FB30_BIT_WIDTH, value as u32); }

	const FB31_BIT_OFFSET: u8 = 31;
	const FB31_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 31)
	pub fn get_fb31() -> u8 { ::read(REGISTER_ADDRESS, FB31_BIT_OFFSET, FB31_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 31)
	pub fn set_fb31(value: u8) { ::write(REGISTER_ADDRESS, FB31_BIT_OFFSET, FB31_BIT_WIDTH, value as u32); }
}
/// Filter bank 15 register 2
/// Size: 0x20 bits
pub mod f15r2 {
	const REGISTER_ADDRESS_OFFSET: u32 = 0x2BC;
	const REGISTER_ADDRESS: u32 = super::BASE_ADDRESS + REGISTER_ADDRESS_OFFSET;

	const FB0_BIT_OFFSET: u8 = 0;
	const FB0_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 0)
	pub fn get_fb0() -> u8 { ::read(REGISTER_ADDRESS, FB0_BIT_OFFSET, FB0_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 0)
	pub fn set_fb0(value: u8) { ::write(REGISTER_ADDRESS, FB0_BIT_OFFSET, FB0_BIT_WIDTH, value as u32); }

	const FB1_BIT_OFFSET: u8 = 1;
	const FB1_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 1)
	pub fn get_fb1() -> u8 { ::read(REGISTER_ADDRESS, FB1_BIT_OFFSET, FB1_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 1)
	pub fn set_fb1(value: u8) { ::write(REGISTER_ADDRESS, FB1_BIT_OFFSET, FB1_BIT_WIDTH, value as u32); }

	const FB2_BIT_OFFSET: u8 = 2;
	const FB2_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 2)
	pub fn get_fb2() -> u8 { ::read(REGISTER_ADDRESS, FB2_BIT_OFFSET, FB2_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 2)
	pub fn set_fb2(value: u8) { ::write(REGISTER_ADDRESS, FB2_BIT_OFFSET, FB2_BIT_WIDTH, value as u32); }

	const FB3_BIT_OFFSET: u8 = 3;
	const FB3_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 3)
	pub fn get_fb3() -> u8 { ::read(REGISTER_ADDRESS, FB3_BIT_OFFSET, FB3_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 3)
	pub fn set_fb3(value: u8) { ::write(REGISTER_ADDRESS, FB3_BIT_OFFSET, FB3_BIT_WIDTH, value as u32); }

	const FB4_BIT_OFFSET: u8 = 4;
	const FB4_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 4)
	pub fn get_fb4() -> u8 { ::read(REGISTER_ADDRESS, FB4_BIT_OFFSET, FB4_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 4)
	pub fn set_fb4(value: u8) { ::write(REGISTER_ADDRESS, FB4_BIT_OFFSET, FB4_BIT_WIDTH, value as u32); }

	const FB5_BIT_OFFSET: u8 = 5;
	const FB5_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 5)
	pub fn get_fb5() -> u8 { ::read(REGISTER_ADDRESS, FB5_BIT_OFFSET, FB5_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 5)
	pub fn set_fb5(value: u8) { ::write(REGISTER_ADDRESS, FB5_BIT_OFFSET, FB5_BIT_WIDTH, value as u32); }

	const FB6_BIT_OFFSET: u8 = 6;
	const FB6_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 6)
	pub fn get_fb6() -> u8 { ::read(REGISTER_ADDRESS, FB6_BIT_OFFSET, FB6_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 6)
	pub fn set_fb6(value: u8) { ::write(REGISTER_ADDRESS, FB6_BIT_OFFSET, FB6_BIT_WIDTH, value as u32); }

	const FB7_BIT_OFFSET: u8 = 7;
	const FB7_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 7)
	pub fn get_fb7() -> u8 { ::read(REGISTER_ADDRESS, FB7_BIT_OFFSET, FB7_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 7)
	pub fn set_fb7(value: u8) { ::write(REGISTER_ADDRESS, FB7_BIT_OFFSET, FB7_BIT_WIDTH, value as u32); }

	const FB8_BIT_OFFSET: u8 = 8;
	const FB8_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 8)
	pub fn get_fb8() -> u8 { ::read(REGISTER_ADDRESS, FB8_BIT_OFFSET, FB8_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 8)
	pub fn set_fb8(value: u8) { ::write(REGISTER_ADDRESS, FB8_BIT_OFFSET, FB8_BIT_WIDTH, value as u32); }

	const FB9_BIT_OFFSET: u8 = 9;
	const FB9_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 9)
	pub fn get_fb9() -> u8 { ::read(REGISTER_ADDRESS, FB9_BIT_OFFSET, FB9_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 9)
	pub fn set_fb9(value: u8) { ::write(REGISTER_ADDRESS, FB9_BIT_OFFSET, FB9_BIT_WIDTH, value as u32); }

	const FB10_BIT_OFFSET: u8 = 10;
	const FB10_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 10)
	pub fn get_fb10() -> u8 { ::read(REGISTER_ADDRESS, FB10_BIT_OFFSET, FB10_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 10)
	pub fn set_fb10(value: u8) { ::write(REGISTER_ADDRESS, FB10_BIT_OFFSET, FB10_BIT_WIDTH, value as u32); }

	const FB11_BIT_OFFSET: u8 = 11;
	const FB11_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 11)
	pub fn get_fb11() -> u8 { ::read(REGISTER_ADDRESS, FB11_BIT_OFFSET, FB11_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 11)
	pub fn set_fb11(value: u8) { ::write(REGISTER_ADDRESS, FB11_BIT_OFFSET, FB11_BIT_WIDTH, value as u32); }

	const FB12_BIT_OFFSET: u8 = 12;
	const FB12_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 12)
	pub fn get_fb12() -> u8 { ::read(REGISTER_ADDRESS, FB12_BIT_OFFSET, FB12_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 12)
	pub fn set_fb12(value: u8) { ::write(REGISTER_ADDRESS, FB12_BIT_OFFSET, FB12_BIT_WIDTH, value as u32); }

	const FB13_BIT_OFFSET: u8 = 13;
	const FB13_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 13)
	pub fn get_fb13() -> u8 { ::read(REGISTER_ADDRESS, FB13_BIT_OFFSET, FB13_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 13)
	pub fn set_fb13(value: u8) { ::write(REGISTER_ADDRESS, FB13_BIT_OFFSET, FB13_BIT_WIDTH, value as u32); }

	const FB14_BIT_OFFSET: u8 = 14;
	const FB14_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 14)
	pub fn get_fb14() -> u8 { ::read(REGISTER_ADDRESS, FB14_BIT_OFFSET, FB14_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 14)
	pub fn set_fb14(value: u8) { ::write(REGISTER_ADDRESS, FB14_BIT_OFFSET, FB14_BIT_WIDTH, value as u32); }

	const FB15_BIT_OFFSET: u8 = 15;
	const FB15_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 15)
	pub fn get_fb15() -> u8 { ::read(REGISTER_ADDRESS, FB15_BIT_OFFSET, FB15_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 15)
	pub fn set_fb15(value: u8) { ::write(REGISTER_ADDRESS, FB15_BIT_OFFSET, FB15_BIT_WIDTH, value as u32); }

	const FB16_BIT_OFFSET: u8 = 16;
	const FB16_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 16)
	pub fn get_fb16() -> u8 { ::read(REGISTER_ADDRESS, FB16_BIT_OFFSET, FB16_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 16)
	pub fn set_fb16(value: u8) { ::write(REGISTER_ADDRESS, FB16_BIT_OFFSET, FB16_BIT_WIDTH, value as u32); }

	const FB17_BIT_OFFSET: u8 = 17;
	const FB17_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 17)
	pub fn get_fb17() -> u8 { ::read(REGISTER_ADDRESS, FB17_BIT_OFFSET, FB17_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 17)
	pub fn set_fb17(value: u8) { ::write(REGISTER_ADDRESS, FB17_BIT_OFFSET, FB17_BIT_WIDTH, value as u32); }

	const FB18_BIT_OFFSET: u8 = 18;
	const FB18_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 18)
	pub fn get_fb18() -> u8 { ::read(REGISTER_ADDRESS, FB18_BIT_OFFSET, FB18_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 18)
	pub fn set_fb18(value: u8) { ::write(REGISTER_ADDRESS, FB18_BIT_OFFSET, FB18_BIT_WIDTH, value as u32); }

	const FB19_BIT_OFFSET: u8 = 19;
	const FB19_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 19)
	pub fn get_fb19() -> u8 { ::read(REGISTER_ADDRESS, FB19_BIT_OFFSET, FB19_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 19)
	pub fn set_fb19(value: u8) { ::write(REGISTER_ADDRESS, FB19_BIT_OFFSET, FB19_BIT_WIDTH, value as u32); }

	const FB20_BIT_OFFSET: u8 = 20;
	const FB20_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 20)
	pub fn get_fb20() -> u8 { ::read(REGISTER_ADDRESS, FB20_BIT_OFFSET, FB20_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 20)
	pub fn set_fb20(value: u8) { ::write(REGISTER_ADDRESS, FB20_BIT_OFFSET, FB20_BIT_WIDTH, value as u32); }

	const FB21_BIT_OFFSET: u8 = 21;
	const FB21_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 21)
	pub fn get_fb21() -> u8 { ::read(REGISTER_ADDRESS, FB21_BIT_OFFSET, FB21_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 21)
	pub fn set_fb21(value: u8) { ::write(REGISTER_ADDRESS, FB21_BIT_OFFSET, FB21_BIT_WIDTH, value as u32); }

	const FB22_BIT_OFFSET: u8 = 22;
	const FB22_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 22)
	pub fn get_fb22() -> u8 { ::read(REGISTER_ADDRESS, FB22_BIT_OFFSET, FB22_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 22)
	pub fn set_fb22(value: u8) { ::write(REGISTER_ADDRESS, FB22_BIT_OFFSET, FB22_BIT_WIDTH, value as u32); }

	const FB23_BIT_OFFSET: u8 = 23;
	const FB23_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 23)
	pub fn get_fb23() -> u8 { ::read(REGISTER_ADDRESS, FB23_BIT_OFFSET, FB23_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 23)
	pub fn set_fb23(value: u8) { ::write(REGISTER_ADDRESS, FB23_BIT_OFFSET, FB23_BIT_WIDTH, value as u32); }

	const FB24_BIT_OFFSET: u8 = 24;
	const FB24_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 24)
	pub fn get_fb24() -> u8 { ::read(REGISTER_ADDRESS, FB24_BIT_OFFSET, FB24_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 24)
	pub fn set_fb24(value: u8) { ::write(REGISTER_ADDRESS, FB24_BIT_OFFSET, FB24_BIT_WIDTH, value as u32); }

	const FB25_BIT_OFFSET: u8 = 25;
	const FB25_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 25)
	pub fn get_fb25() -> u8 { ::read(REGISTER_ADDRESS, FB25_BIT_OFFSET, FB25_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 25)
	pub fn set_fb25(value: u8) { ::write(REGISTER_ADDRESS, FB25_BIT_OFFSET, FB25_BIT_WIDTH, value as u32); }

	const FB26_BIT_OFFSET: u8 = 26;
	const FB26_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 26)
	pub fn get_fb26() -> u8 { ::read(REGISTER_ADDRESS, FB26_BIT_OFFSET, FB26_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 26)
	pub fn set_fb26(value: u8) { ::write(REGISTER_ADDRESS, FB26_BIT_OFFSET, FB26_BIT_WIDTH, value as u32); }

	const FB27_BIT_OFFSET: u8 = 27;
	const FB27_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 27)
	pub fn get_fb27() -> u8 { ::read(REGISTER_ADDRESS, FB27_BIT_OFFSET, FB27_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 27)
	pub fn set_fb27(value: u8) { ::write(REGISTER_ADDRESS, FB27_BIT_OFFSET, FB27_BIT_WIDTH, value as u32); }

	const FB28_BIT_OFFSET: u8 = 28;
	const FB28_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 28)
	pub fn get_fb28() -> u8 { ::read(REGISTER_ADDRESS, FB28_BIT_OFFSET, FB28_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 28)
	pub fn set_fb28(value: u8) { ::write(REGISTER_ADDRESS, FB28_BIT_OFFSET, FB28_BIT_WIDTH, value as u32); }

	const FB29_BIT_OFFSET: u8 = 29;
	const FB29_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 29)
	pub fn get_fb29() -> u8 { ::read(REGISTER_ADDRESS, FB29_BIT_OFFSET, FB29_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 29)
	pub fn set_fb29(value: u8) { ::write(REGISTER_ADDRESS, FB29_BIT_OFFSET, FB29_BIT_WIDTH, value as u32); }

	const FB30_BIT_OFFSET: u8 = 30;
	const FB30_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 30)
	pub fn get_fb30() -> u8 { ::read(REGISTER_ADDRESS, FB30_BIT_OFFSET, FB30_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 30)
	pub fn set_fb30(value: u8) { ::write(REGISTER_ADDRESS, FB30_BIT_OFFSET, FB30_BIT_WIDTH, value as u32); }

	const FB31_BIT_OFFSET: u8 = 31;
	const FB31_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 31)
	pub fn get_fb31() -> u8 { ::read(REGISTER_ADDRESS, FB31_BIT_OFFSET, FB31_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 31)
	pub fn set_fb31(value: u8) { ::write(REGISTER_ADDRESS, FB31_BIT_OFFSET, FB31_BIT_WIDTH, value as u32); }
}
/// Filter bank 16 register 1
/// Size: 0x20 bits
pub mod f16r1 {
	const REGISTER_ADDRESS_OFFSET: u32 = 0x2C0;
	const REGISTER_ADDRESS: u32 = super::BASE_ADDRESS + REGISTER_ADDRESS_OFFSET;

	const FB0_BIT_OFFSET: u8 = 0;
	const FB0_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 0)
	pub fn get_fb0() -> u8 { ::read(REGISTER_ADDRESS, FB0_BIT_OFFSET, FB0_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 0)
	pub fn set_fb0(value: u8) { ::write(REGISTER_ADDRESS, FB0_BIT_OFFSET, FB0_BIT_WIDTH, value as u32); }

	const FB1_BIT_OFFSET: u8 = 1;
	const FB1_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 1)
	pub fn get_fb1() -> u8 { ::read(REGISTER_ADDRESS, FB1_BIT_OFFSET, FB1_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 1)
	pub fn set_fb1(value: u8) { ::write(REGISTER_ADDRESS, FB1_BIT_OFFSET, FB1_BIT_WIDTH, value as u32); }

	const FB2_BIT_OFFSET: u8 = 2;
	const FB2_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 2)
	pub fn get_fb2() -> u8 { ::read(REGISTER_ADDRESS, FB2_BIT_OFFSET, FB2_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 2)
	pub fn set_fb2(value: u8) { ::write(REGISTER_ADDRESS, FB2_BIT_OFFSET, FB2_BIT_WIDTH, value as u32); }

	const FB3_BIT_OFFSET: u8 = 3;
	const FB3_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 3)
	pub fn get_fb3() -> u8 { ::read(REGISTER_ADDRESS, FB3_BIT_OFFSET, FB3_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 3)
	pub fn set_fb3(value: u8) { ::write(REGISTER_ADDRESS, FB3_BIT_OFFSET, FB3_BIT_WIDTH, value as u32); }

	const FB4_BIT_OFFSET: u8 = 4;
	const FB4_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 4)
	pub fn get_fb4() -> u8 { ::read(REGISTER_ADDRESS, FB4_BIT_OFFSET, FB4_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 4)
	pub fn set_fb4(value: u8) { ::write(REGISTER_ADDRESS, FB4_BIT_OFFSET, FB4_BIT_WIDTH, value as u32); }

	const FB5_BIT_OFFSET: u8 = 5;
	const FB5_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 5)
	pub fn get_fb5() -> u8 { ::read(REGISTER_ADDRESS, FB5_BIT_OFFSET, FB5_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 5)
	pub fn set_fb5(value: u8) { ::write(REGISTER_ADDRESS, FB5_BIT_OFFSET, FB5_BIT_WIDTH, value as u32); }

	const FB6_BIT_OFFSET: u8 = 6;
	const FB6_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 6)
	pub fn get_fb6() -> u8 { ::read(REGISTER_ADDRESS, FB6_BIT_OFFSET, FB6_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 6)
	pub fn set_fb6(value: u8) { ::write(REGISTER_ADDRESS, FB6_BIT_OFFSET, FB6_BIT_WIDTH, value as u32); }

	const FB7_BIT_OFFSET: u8 = 7;
	const FB7_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 7)
	pub fn get_fb7() -> u8 { ::read(REGISTER_ADDRESS, FB7_BIT_OFFSET, FB7_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 7)
	pub fn set_fb7(value: u8) { ::write(REGISTER_ADDRESS, FB7_BIT_OFFSET, FB7_BIT_WIDTH, value as u32); }

	const FB8_BIT_OFFSET: u8 = 8;
	const FB8_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 8)
	pub fn get_fb8() -> u8 { ::read(REGISTER_ADDRESS, FB8_BIT_OFFSET, FB8_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 8)
	pub fn set_fb8(value: u8) { ::write(REGISTER_ADDRESS, FB8_BIT_OFFSET, FB8_BIT_WIDTH, value as u32); }

	const FB9_BIT_OFFSET: u8 = 9;
	const FB9_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 9)
	pub fn get_fb9() -> u8 { ::read(REGISTER_ADDRESS, FB9_BIT_OFFSET, FB9_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 9)
	pub fn set_fb9(value: u8) { ::write(REGISTER_ADDRESS, FB9_BIT_OFFSET, FB9_BIT_WIDTH, value as u32); }

	const FB10_BIT_OFFSET: u8 = 10;
	const FB10_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 10)
	pub fn get_fb10() -> u8 { ::read(REGISTER_ADDRESS, FB10_BIT_OFFSET, FB10_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 10)
	pub fn set_fb10(value: u8) { ::write(REGISTER_ADDRESS, FB10_BIT_OFFSET, FB10_BIT_WIDTH, value as u32); }

	const FB11_BIT_OFFSET: u8 = 11;
	const FB11_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 11)
	pub fn get_fb11() -> u8 { ::read(REGISTER_ADDRESS, FB11_BIT_OFFSET, FB11_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 11)
	pub fn set_fb11(value: u8) { ::write(REGISTER_ADDRESS, FB11_BIT_OFFSET, FB11_BIT_WIDTH, value as u32); }

	const FB12_BIT_OFFSET: u8 = 12;
	const FB12_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 12)
	pub fn get_fb12() -> u8 { ::read(REGISTER_ADDRESS, FB12_BIT_OFFSET, FB12_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 12)
	pub fn set_fb12(value: u8) { ::write(REGISTER_ADDRESS, FB12_BIT_OFFSET, FB12_BIT_WIDTH, value as u32); }

	const FB13_BIT_OFFSET: u8 = 13;
	const FB13_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 13)
	pub fn get_fb13() -> u8 { ::read(REGISTER_ADDRESS, FB13_BIT_OFFSET, FB13_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 13)
	pub fn set_fb13(value: u8) { ::write(REGISTER_ADDRESS, FB13_BIT_OFFSET, FB13_BIT_WIDTH, value as u32); }

	const FB14_BIT_OFFSET: u8 = 14;
	const FB14_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 14)
	pub fn get_fb14() -> u8 { ::read(REGISTER_ADDRESS, FB14_BIT_OFFSET, FB14_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 14)
	pub fn set_fb14(value: u8) { ::write(REGISTER_ADDRESS, FB14_BIT_OFFSET, FB14_BIT_WIDTH, value as u32); }

	const FB15_BIT_OFFSET: u8 = 15;
	const FB15_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 15)
	pub fn get_fb15() -> u8 { ::read(REGISTER_ADDRESS, FB15_BIT_OFFSET, FB15_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 15)
	pub fn set_fb15(value: u8) { ::write(REGISTER_ADDRESS, FB15_BIT_OFFSET, FB15_BIT_WIDTH, value as u32); }

	const FB16_BIT_OFFSET: u8 = 16;
	const FB16_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 16)
	pub fn get_fb16() -> u8 { ::read(REGISTER_ADDRESS, FB16_BIT_OFFSET, FB16_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 16)
	pub fn set_fb16(value: u8) { ::write(REGISTER_ADDRESS, FB16_BIT_OFFSET, FB16_BIT_WIDTH, value as u32); }

	const FB17_BIT_OFFSET: u8 = 17;
	const FB17_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 17)
	pub fn get_fb17() -> u8 { ::read(REGISTER_ADDRESS, FB17_BIT_OFFSET, FB17_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 17)
	pub fn set_fb17(value: u8) { ::write(REGISTER_ADDRESS, FB17_BIT_OFFSET, FB17_BIT_WIDTH, value as u32); }

	const FB18_BIT_OFFSET: u8 = 18;
	const FB18_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 18)
	pub fn get_fb18() -> u8 { ::read(REGISTER_ADDRESS, FB18_BIT_OFFSET, FB18_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 18)
	pub fn set_fb18(value: u8) { ::write(REGISTER_ADDRESS, FB18_BIT_OFFSET, FB18_BIT_WIDTH, value as u32); }

	const FB19_BIT_OFFSET: u8 = 19;
	const FB19_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 19)
	pub fn get_fb19() -> u8 { ::read(REGISTER_ADDRESS, FB19_BIT_OFFSET, FB19_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 19)
	pub fn set_fb19(value: u8) { ::write(REGISTER_ADDRESS, FB19_BIT_OFFSET, FB19_BIT_WIDTH, value as u32); }

	const FB20_BIT_OFFSET: u8 = 20;
	const FB20_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 20)
	pub fn get_fb20() -> u8 { ::read(REGISTER_ADDRESS, FB20_BIT_OFFSET, FB20_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 20)
	pub fn set_fb20(value: u8) { ::write(REGISTER_ADDRESS, FB20_BIT_OFFSET, FB20_BIT_WIDTH, value as u32); }

	const FB21_BIT_OFFSET: u8 = 21;
	const FB21_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 21)
	pub fn get_fb21() -> u8 { ::read(REGISTER_ADDRESS, FB21_BIT_OFFSET, FB21_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 21)
	pub fn set_fb21(value: u8) { ::write(REGISTER_ADDRESS, FB21_BIT_OFFSET, FB21_BIT_WIDTH, value as u32); }

	const FB22_BIT_OFFSET: u8 = 22;
	const FB22_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 22)
	pub fn get_fb22() -> u8 { ::read(REGISTER_ADDRESS, FB22_BIT_OFFSET, FB22_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 22)
	pub fn set_fb22(value: u8) { ::write(REGISTER_ADDRESS, FB22_BIT_OFFSET, FB22_BIT_WIDTH, value as u32); }

	const FB23_BIT_OFFSET: u8 = 23;
	const FB23_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 23)
	pub fn get_fb23() -> u8 { ::read(REGISTER_ADDRESS, FB23_BIT_OFFSET, FB23_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 23)
	pub fn set_fb23(value: u8) { ::write(REGISTER_ADDRESS, FB23_BIT_OFFSET, FB23_BIT_WIDTH, value as u32); }

	const FB24_BIT_OFFSET: u8 = 24;
	const FB24_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 24)
	pub fn get_fb24() -> u8 { ::read(REGISTER_ADDRESS, FB24_BIT_OFFSET, FB24_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 24)
	pub fn set_fb24(value: u8) { ::write(REGISTER_ADDRESS, FB24_BIT_OFFSET, FB24_BIT_WIDTH, value as u32); }

	const FB25_BIT_OFFSET: u8 = 25;
	const FB25_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 25)
	pub fn get_fb25() -> u8 { ::read(REGISTER_ADDRESS, FB25_BIT_OFFSET, FB25_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 25)
	pub fn set_fb25(value: u8) { ::write(REGISTER_ADDRESS, FB25_BIT_OFFSET, FB25_BIT_WIDTH, value as u32); }

	const FB26_BIT_OFFSET: u8 = 26;
	const FB26_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 26)
	pub fn get_fb26() -> u8 { ::read(REGISTER_ADDRESS, FB26_BIT_OFFSET, FB26_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 26)
	pub fn set_fb26(value: u8) { ::write(REGISTER_ADDRESS, FB26_BIT_OFFSET, FB26_BIT_WIDTH, value as u32); }

	const FB27_BIT_OFFSET: u8 = 27;
	const FB27_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 27)
	pub fn get_fb27() -> u8 { ::read(REGISTER_ADDRESS, FB27_BIT_OFFSET, FB27_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 27)
	pub fn set_fb27(value: u8) { ::write(REGISTER_ADDRESS, FB27_BIT_OFFSET, FB27_BIT_WIDTH, value as u32); }

	const FB28_BIT_OFFSET: u8 = 28;
	const FB28_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 28)
	pub fn get_fb28() -> u8 { ::read(REGISTER_ADDRESS, FB28_BIT_OFFSET, FB28_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 28)
	pub fn set_fb28(value: u8) { ::write(REGISTER_ADDRESS, FB28_BIT_OFFSET, FB28_BIT_WIDTH, value as u32); }

	const FB29_BIT_OFFSET: u8 = 29;
	const FB29_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 29)
	pub fn get_fb29() -> u8 { ::read(REGISTER_ADDRESS, FB29_BIT_OFFSET, FB29_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 29)
	pub fn set_fb29(value: u8) { ::write(REGISTER_ADDRESS, FB29_BIT_OFFSET, FB29_BIT_WIDTH, value as u32); }

	const FB30_BIT_OFFSET: u8 = 30;
	const FB30_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 30)
	pub fn get_fb30() -> u8 { ::read(REGISTER_ADDRESS, FB30_BIT_OFFSET, FB30_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 30)
	pub fn set_fb30(value: u8) { ::write(REGISTER_ADDRESS, FB30_BIT_OFFSET, FB30_BIT_WIDTH, value as u32); }

	const FB31_BIT_OFFSET: u8 = 31;
	const FB31_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 31)
	pub fn get_fb31() -> u8 { ::read(REGISTER_ADDRESS, FB31_BIT_OFFSET, FB31_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 31)
	pub fn set_fb31(value: u8) { ::write(REGISTER_ADDRESS, FB31_BIT_OFFSET, FB31_BIT_WIDTH, value as u32); }
}
/// Filter bank 16 register 2
/// Size: 0x20 bits
pub mod f16r2 {
	const REGISTER_ADDRESS_OFFSET: u32 = 0x2C4;
	const REGISTER_ADDRESS: u32 = super::BASE_ADDRESS + REGISTER_ADDRESS_OFFSET;

	const FB0_BIT_OFFSET: u8 = 0;
	const FB0_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 0)
	pub fn get_fb0() -> u8 { ::read(REGISTER_ADDRESS, FB0_BIT_OFFSET, FB0_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 0)
	pub fn set_fb0(value: u8) { ::write(REGISTER_ADDRESS, FB0_BIT_OFFSET, FB0_BIT_WIDTH, value as u32); }

	const FB1_BIT_OFFSET: u8 = 1;
	const FB1_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 1)
	pub fn get_fb1() -> u8 { ::read(REGISTER_ADDRESS, FB1_BIT_OFFSET, FB1_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 1)
	pub fn set_fb1(value: u8) { ::write(REGISTER_ADDRESS, FB1_BIT_OFFSET, FB1_BIT_WIDTH, value as u32); }

	const FB2_BIT_OFFSET: u8 = 2;
	const FB2_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 2)
	pub fn get_fb2() -> u8 { ::read(REGISTER_ADDRESS, FB2_BIT_OFFSET, FB2_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 2)
	pub fn set_fb2(value: u8) { ::write(REGISTER_ADDRESS, FB2_BIT_OFFSET, FB2_BIT_WIDTH, value as u32); }

	const FB3_BIT_OFFSET: u8 = 3;
	const FB3_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 3)
	pub fn get_fb3() -> u8 { ::read(REGISTER_ADDRESS, FB3_BIT_OFFSET, FB3_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 3)
	pub fn set_fb3(value: u8) { ::write(REGISTER_ADDRESS, FB3_BIT_OFFSET, FB3_BIT_WIDTH, value as u32); }

	const FB4_BIT_OFFSET: u8 = 4;
	const FB4_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 4)
	pub fn get_fb4() -> u8 { ::read(REGISTER_ADDRESS, FB4_BIT_OFFSET, FB4_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 4)
	pub fn set_fb4(value: u8) { ::write(REGISTER_ADDRESS, FB4_BIT_OFFSET, FB4_BIT_WIDTH, value as u32); }

	const FB5_BIT_OFFSET: u8 = 5;
	const FB5_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 5)
	pub fn get_fb5() -> u8 { ::read(REGISTER_ADDRESS, FB5_BIT_OFFSET, FB5_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 5)
	pub fn set_fb5(value: u8) { ::write(REGISTER_ADDRESS, FB5_BIT_OFFSET, FB5_BIT_WIDTH, value as u32); }

	const FB6_BIT_OFFSET: u8 = 6;
	const FB6_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 6)
	pub fn get_fb6() -> u8 { ::read(REGISTER_ADDRESS, FB6_BIT_OFFSET, FB6_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 6)
	pub fn set_fb6(value: u8) { ::write(REGISTER_ADDRESS, FB6_BIT_OFFSET, FB6_BIT_WIDTH, value as u32); }

	const FB7_BIT_OFFSET: u8 = 7;
	const FB7_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 7)
	pub fn get_fb7() -> u8 { ::read(REGISTER_ADDRESS, FB7_BIT_OFFSET, FB7_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 7)
	pub fn set_fb7(value: u8) { ::write(REGISTER_ADDRESS, FB7_BIT_OFFSET, FB7_BIT_WIDTH, value as u32); }

	const FB8_BIT_OFFSET: u8 = 8;
	const FB8_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 8)
	pub fn get_fb8() -> u8 { ::read(REGISTER_ADDRESS, FB8_BIT_OFFSET, FB8_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 8)
	pub fn set_fb8(value: u8) { ::write(REGISTER_ADDRESS, FB8_BIT_OFFSET, FB8_BIT_WIDTH, value as u32); }

	const FB9_BIT_OFFSET: u8 = 9;
	const FB9_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 9)
	pub fn get_fb9() -> u8 { ::read(REGISTER_ADDRESS, FB9_BIT_OFFSET, FB9_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 9)
	pub fn set_fb9(value: u8) { ::write(REGISTER_ADDRESS, FB9_BIT_OFFSET, FB9_BIT_WIDTH, value as u32); }

	const FB10_BIT_OFFSET: u8 = 10;
	const FB10_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 10)
	pub fn get_fb10() -> u8 { ::read(REGISTER_ADDRESS, FB10_BIT_OFFSET, FB10_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 10)
	pub fn set_fb10(value: u8) { ::write(REGISTER_ADDRESS, FB10_BIT_OFFSET, FB10_BIT_WIDTH, value as u32); }

	const FB11_BIT_OFFSET: u8 = 11;
	const FB11_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 11)
	pub fn get_fb11() -> u8 { ::read(REGISTER_ADDRESS, FB11_BIT_OFFSET, FB11_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 11)
	pub fn set_fb11(value: u8) { ::write(REGISTER_ADDRESS, FB11_BIT_OFFSET, FB11_BIT_WIDTH, value as u32); }

	const FB12_BIT_OFFSET: u8 = 12;
	const FB12_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 12)
	pub fn get_fb12() -> u8 { ::read(REGISTER_ADDRESS, FB12_BIT_OFFSET, FB12_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 12)
	pub fn set_fb12(value: u8) { ::write(REGISTER_ADDRESS, FB12_BIT_OFFSET, FB12_BIT_WIDTH, value as u32); }

	const FB13_BIT_OFFSET: u8 = 13;
	const FB13_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 13)
	pub fn get_fb13() -> u8 { ::read(REGISTER_ADDRESS, FB13_BIT_OFFSET, FB13_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 13)
	pub fn set_fb13(value: u8) { ::write(REGISTER_ADDRESS, FB13_BIT_OFFSET, FB13_BIT_WIDTH, value as u32); }

	const FB14_BIT_OFFSET: u8 = 14;
	const FB14_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 14)
	pub fn get_fb14() -> u8 { ::read(REGISTER_ADDRESS, FB14_BIT_OFFSET, FB14_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 14)
	pub fn set_fb14(value: u8) { ::write(REGISTER_ADDRESS, FB14_BIT_OFFSET, FB14_BIT_WIDTH, value as u32); }

	const FB15_BIT_OFFSET: u8 = 15;
	const FB15_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 15)
	pub fn get_fb15() -> u8 { ::read(REGISTER_ADDRESS, FB15_BIT_OFFSET, FB15_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 15)
	pub fn set_fb15(value: u8) { ::write(REGISTER_ADDRESS, FB15_BIT_OFFSET, FB15_BIT_WIDTH, value as u32); }

	const FB16_BIT_OFFSET: u8 = 16;
	const FB16_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 16)
	pub fn get_fb16() -> u8 { ::read(REGISTER_ADDRESS, FB16_BIT_OFFSET, FB16_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 16)
	pub fn set_fb16(value: u8) { ::write(REGISTER_ADDRESS, FB16_BIT_OFFSET, FB16_BIT_WIDTH, value as u32); }

	const FB17_BIT_OFFSET: u8 = 17;
	const FB17_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 17)
	pub fn get_fb17() -> u8 { ::read(REGISTER_ADDRESS, FB17_BIT_OFFSET, FB17_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 17)
	pub fn set_fb17(value: u8) { ::write(REGISTER_ADDRESS, FB17_BIT_OFFSET, FB17_BIT_WIDTH, value as u32); }

	const FB18_BIT_OFFSET: u8 = 18;
	const FB18_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 18)
	pub fn get_fb18() -> u8 { ::read(REGISTER_ADDRESS, FB18_BIT_OFFSET, FB18_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 18)
	pub fn set_fb18(value: u8) { ::write(REGISTER_ADDRESS, FB18_BIT_OFFSET, FB18_BIT_WIDTH, value as u32); }

	const FB19_BIT_OFFSET: u8 = 19;
	const FB19_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 19)
	pub fn get_fb19() -> u8 { ::read(REGISTER_ADDRESS, FB19_BIT_OFFSET, FB19_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 19)
	pub fn set_fb19(value: u8) { ::write(REGISTER_ADDRESS, FB19_BIT_OFFSET, FB19_BIT_WIDTH, value as u32); }

	const FB20_BIT_OFFSET: u8 = 20;
	const FB20_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 20)
	pub fn get_fb20() -> u8 { ::read(REGISTER_ADDRESS, FB20_BIT_OFFSET, FB20_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 20)
	pub fn set_fb20(value: u8) { ::write(REGISTER_ADDRESS, FB20_BIT_OFFSET, FB20_BIT_WIDTH, value as u32); }

	const FB21_BIT_OFFSET: u8 = 21;
	const FB21_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 21)
	pub fn get_fb21() -> u8 { ::read(REGISTER_ADDRESS, FB21_BIT_OFFSET, FB21_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 21)
	pub fn set_fb21(value: u8) { ::write(REGISTER_ADDRESS, FB21_BIT_OFFSET, FB21_BIT_WIDTH, value as u32); }

	const FB22_BIT_OFFSET: u8 = 22;
	const FB22_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 22)
	pub fn get_fb22() -> u8 { ::read(REGISTER_ADDRESS, FB22_BIT_OFFSET, FB22_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 22)
	pub fn set_fb22(value: u8) { ::write(REGISTER_ADDRESS, FB22_BIT_OFFSET, FB22_BIT_WIDTH, value as u32); }

	const FB23_BIT_OFFSET: u8 = 23;
	const FB23_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 23)
	pub fn get_fb23() -> u8 { ::read(REGISTER_ADDRESS, FB23_BIT_OFFSET, FB23_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 23)
	pub fn set_fb23(value: u8) { ::write(REGISTER_ADDRESS, FB23_BIT_OFFSET, FB23_BIT_WIDTH, value as u32); }

	const FB24_BIT_OFFSET: u8 = 24;
	const FB24_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 24)
	pub fn get_fb24() -> u8 { ::read(REGISTER_ADDRESS, FB24_BIT_OFFSET, FB24_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 24)
	pub fn set_fb24(value: u8) { ::write(REGISTER_ADDRESS, FB24_BIT_OFFSET, FB24_BIT_WIDTH, value as u32); }

	const FB25_BIT_OFFSET: u8 = 25;
	const FB25_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 25)
	pub fn get_fb25() -> u8 { ::read(REGISTER_ADDRESS, FB25_BIT_OFFSET, FB25_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 25)
	pub fn set_fb25(value: u8) { ::write(REGISTER_ADDRESS, FB25_BIT_OFFSET, FB25_BIT_WIDTH, value as u32); }

	const FB26_BIT_OFFSET: u8 = 26;
	const FB26_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 26)
	pub fn get_fb26() -> u8 { ::read(REGISTER_ADDRESS, FB26_BIT_OFFSET, FB26_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 26)
	pub fn set_fb26(value: u8) { ::write(REGISTER_ADDRESS, FB26_BIT_OFFSET, FB26_BIT_WIDTH, value as u32); }

	const FB27_BIT_OFFSET: u8 = 27;
	const FB27_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 27)
	pub fn get_fb27() -> u8 { ::read(REGISTER_ADDRESS, FB27_BIT_OFFSET, FB27_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 27)
	pub fn set_fb27(value: u8) { ::write(REGISTER_ADDRESS, FB27_BIT_OFFSET, FB27_BIT_WIDTH, value as u32); }

	const FB28_BIT_OFFSET: u8 = 28;
	const FB28_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 28)
	pub fn get_fb28() -> u8 { ::read(REGISTER_ADDRESS, FB28_BIT_OFFSET, FB28_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 28)
	pub fn set_fb28(value: u8) { ::write(REGISTER_ADDRESS, FB28_BIT_OFFSET, FB28_BIT_WIDTH, value as u32); }

	const FB29_BIT_OFFSET: u8 = 29;
	const FB29_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 29)
	pub fn get_fb29() -> u8 { ::read(REGISTER_ADDRESS, FB29_BIT_OFFSET, FB29_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 29)
	pub fn set_fb29(value: u8) { ::write(REGISTER_ADDRESS, FB29_BIT_OFFSET, FB29_BIT_WIDTH, value as u32); }

	const FB30_BIT_OFFSET: u8 = 30;
	const FB30_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 30)
	pub fn get_fb30() -> u8 { ::read(REGISTER_ADDRESS, FB30_BIT_OFFSET, FB30_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 30)
	pub fn set_fb30(value: u8) { ::write(REGISTER_ADDRESS, FB30_BIT_OFFSET, FB30_BIT_WIDTH, value as u32); }

	const FB31_BIT_OFFSET: u8 = 31;
	const FB31_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 31)
	pub fn get_fb31() -> u8 { ::read(REGISTER_ADDRESS, FB31_BIT_OFFSET, FB31_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 31)
	pub fn set_fb31(value: u8) { ::write(REGISTER_ADDRESS, FB31_BIT_OFFSET, FB31_BIT_WIDTH, value as u32); }
}
/// Filter bank 17 register 1
/// Size: 0x20 bits
pub mod f17r1 {
	const REGISTER_ADDRESS_OFFSET: u32 = 0x2C8;
	const REGISTER_ADDRESS: u32 = super::BASE_ADDRESS + REGISTER_ADDRESS_OFFSET;

	const FB0_BIT_OFFSET: u8 = 0;
	const FB0_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 0)
	pub fn get_fb0() -> u8 { ::read(REGISTER_ADDRESS, FB0_BIT_OFFSET, FB0_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 0)
	pub fn set_fb0(value: u8) { ::write(REGISTER_ADDRESS, FB0_BIT_OFFSET, FB0_BIT_WIDTH, value as u32); }

	const FB1_BIT_OFFSET: u8 = 1;
	const FB1_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 1)
	pub fn get_fb1() -> u8 { ::read(REGISTER_ADDRESS, FB1_BIT_OFFSET, FB1_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 1)
	pub fn set_fb1(value: u8) { ::write(REGISTER_ADDRESS, FB1_BIT_OFFSET, FB1_BIT_WIDTH, value as u32); }

	const FB2_BIT_OFFSET: u8 = 2;
	const FB2_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 2)
	pub fn get_fb2() -> u8 { ::read(REGISTER_ADDRESS, FB2_BIT_OFFSET, FB2_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 2)
	pub fn set_fb2(value: u8) { ::write(REGISTER_ADDRESS, FB2_BIT_OFFSET, FB2_BIT_WIDTH, value as u32); }

	const FB3_BIT_OFFSET: u8 = 3;
	const FB3_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 3)
	pub fn get_fb3() -> u8 { ::read(REGISTER_ADDRESS, FB3_BIT_OFFSET, FB3_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 3)
	pub fn set_fb3(value: u8) { ::write(REGISTER_ADDRESS, FB3_BIT_OFFSET, FB3_BIT_WIDTH, value as u32); }

	const FB4_BIT_OFFSET: u8 = 4;
	const FB4_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 4)
	pub fn get_fb4() -> u8 { ::read(REGISTER_ADDRESS, FB4_BIT_OFFSET, FB4_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 4)
	pub fn set_fb4(value: u8) { ::write(REGISTER_ADDRESS, FB4_BIT_OFFSET, FB4_BIT_WIDTH, value as u32); }

	const FB5_BIT_OFFSET: u8 = 5;
	const FB5_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 5)
	pub fn get_fb5() -> u8 { ::read(REGISTER_ADDRESS, FB5_BIT_OFFSET, FB5_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 5)
	pub fn set_fb5(value: u8) { ::write(REGISTER_ADDRESS, FB5_BIT_OFFSET, FB5_BIT_WIDTH, value as u32); }

	const FB6_BIT_OFFSET: u8 = 6;
	const FB6_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 6)
	pub fn get_fb6() -> u8 { ::read(REGISTER_ADDRESS, FB6_BIT_OFFSET, FB6_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 6)
	pub fn set_fb6(value: u8) { ::write(REGISTER_ADDRESS, FB6_BIT_OFFSET, FB6_BIT_WIDTH, value as u32); }

	const FB7_BIT_OFFSET: u8 = 7;
	const FB7_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 7)
	pub fn get_fb7() -> u8 { ::read(REGISTER_ADDRESS, FB7_BIT_OFFSET, FB7_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 7)
	pub fn set_fb7(value: u8) { ::write(REGISTER_ADDRESS, FB7_BIT_OFFSET, FB7_BIT_WIDTH, value as u32); }

	const FB8_BIT_OFFSET: u8 = 8;
	const FB8_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 8)
	pub fn get_fb8() -> u8 { ::read(REGISTER_ADDRESS, FB8_BIT_OFFSET, FB8_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 8)
	pub fn set_fb8(value: u8) { ::write(REGISTER_ADDRESS, FB8_BIT_OFFSET, FB8_BIT_WIDTH, value as u32); }

	const FB9_BIT_OFFSET: u8 = 9;
	const FB9_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 9)
	pub fn get_fb9() -> u8 { ::read(REGISTER_ADDRESS, FB9_BIT_OFFSET, FB9_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 9)
	pub fn set_fb9(value: u8) { ::write(REGISTER_ADDRESS, FB9_BIT_OFFSET, FB9_BIT_WIDTH, value as u32); }

	const FB10_BIT_OFFSET: u8 = 10;
	const FB10_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 10)
	pub fn get_fb10() -> u8 { ::read(REGISTER_ADDRESS, FB10_BIT_OFFSET, FB10_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 10)
	pub fn set_fb10(value: u8) { ::write(REGISTER_ADDRESS, FB10_BIT_OFFSET, FB10_BIT_WIDTH, value as u32); }

	const FB11_BIT_OFFSET: u8 = 11;
	const FB11_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 11)
	pub fn get_fb11() -> u8 { ::read(REGISTER_ADDRESS, FB11_BIT_OFFSET, FB11_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 11)
	pub fn set_fb11(value: u8) { ::write(REGISTER_ADDRESS, FB11_BIT_OFFSET, FB11_BIT_WIDTH, value as u32); }

	const FB12_BIT_OFFSET: u8 = 12;
	const FB12_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 12)
	pub fn get_fb12() -> u8 { ::read(REGISTER_ADDRESS, FB12_BIT_OFFSET, FB12_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 12)
	pub fn set_fb12(value: u8) { ::write(REGISTER_ADDRESS, FB12_BIT_OFFSET, FB12_BIT_WIDTH, value as u32); }

	const FB13_BIT_OFFSET: u8 = 13;
	const FB13_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 13)
	pub fn get_fb13() -> u8 { ::read(REGISTER_ADDRESS, FB13_BIT_OFFSET, FB13_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 13)
	pub fn set_fb13(value: u8) { ::write(REGISTER_ADDRESS, FB13_BIT_OFFSET, FB13_BIT_WIDTH, value as u32); }

	const FB14_BIT_OFFSET: u8 = 14;
	const FB14_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 14)
	pub fn get_fb14() -> u8 { ::read(REGISTER_ADDRESS, FB14_BIT_OFFSET, FB14_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 14)
	pub fn set_fb14(value: u8) { ::write(REGISTER_ADDRESS, FB14_BIT_OFFSET, FB14_BIT_WIDTH, value as u32); }

	const FB15_BIT_OFFSET: u8 = 15;
	const FB15_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 15)
	pub fn get_fb15() -> u8 { ::read(REGISTER_ADDRESS, FB15_BIT_OFFSET, FB15_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 15)
	pub fn set_fb15(value: u8) { ::write(REGISTER_ADDRESS, FB15_BIT_OFFSET, FB15_BIT_WIDTH, value as u32); }

	const FB16_BIT_OFFSET: u8 = 16;
	const FB16_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 16)
	pub fn get_fb16() -> u8 { ::read(REGISTER_ADDRESS, FB16_BIT_OFFSET, FB16_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 16)
	pub fn set_fb16(value: u8) { ::write(REGISTER_ADDRESS, FB16_BIT_OFFSET, FB16_BIT_WIDTH, value as u32); }

	const FB17_BIT_OFFSET: u8 = 17;
	const FB17_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 17)
	pub fn get_fb17() -> u8 { ::read(REGISTER_ADDRESS, FB17_BIT_OFFSET, FB17_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 17)
	pub fn set_fb17(value: u8) { ::write(REGISTER_ADDRESS, FB17_BIT_OFFSET, FB17_BIT_WIDTH, value as u32); }

	const FB18_BIT_OFFSET: u8 = 18;
	const FB18_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 18)
	pub fn get_fb18() -> u8 { ::read(REGISTER_ADDRESS, FB18_BIT_OFFSET, FB18_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 18)
	pub fn set_fb18(value: u8) { ::write(REGISTER_ADDRESS, FB18_BIT_OFFSET, FB18_BIT_WIDTH, value as u32); }

	const FB19_BIT_OFFSET: u8 = 19;
	const FB19_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 19)
	pub fn get_fb19() -> u8 { ::read(REGISTER_ADDRESS, FB19_BIT_OFFSET, FB19_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 19)
	pub fn set_fb19(value: u8) { ::write(REGISTER_ADDRESS, FB19_BIT_OFFSET, FB19_BIT_WIDTH, value as u32); }

	const FB20_BIT_OFFSET: u8 = 20;
	const FB20_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 20)
	pub fn get_fb20() -> u8 { ::read(REGISTER_ADDRESS, FB20_BIT_OFFSET, FB20_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 20)
	pub fn set_fb20(value: u8) { ::write(REGISTER_ADDRESS, FB20_BIT_OFFSET, FB20_BIT_WIDTH, value as u32); }

	const FB21_BIT_OFFSET: u8 = 21;
	const FB21_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 21)
	pub fn get_fb21() -> u8 { ::read(REGISTER_ADDRESS, FB21_BIT_OFFSET, FB21_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 21)
	pub fn set_fb21(value: u8) { ::write(REGISTER_ADDRESS, FB21_BIT_OFFSET, FB21_BIT_WIDTH, value as u32); }

	const FB22_BIT_OFFSET: u8 = 22;
	const FB22_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 22)
	pub fn get_fb22() -> u8 { ::read(REGISTER_ADDRESS, FB22_BIT_OFFSET, FB22_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 22)
	pub fn set_fb22(value: u8) { ::write(REGISTER_ADDRESS, FB22_BIT_OFFSET, FB22_BIT_WIDTH, value as u32); }

	const FB23_BIT_OFFSET: u8 = 23;
	const FB23_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 23)
	pub fn get_fb23() -> u8 { ::read(REGISTER_ADDRESS, FB23_BIT_OFFSET, FB23_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 23)
	pub fn set_fb23(value: u8) { ::write(REGISTER_ADDRESS, FB23_BIT_OFFSET, FB23_BIT_WIDTH, value as u32); }

	const FB24_BIT_OFFSET: u8 = 24;
	const FB24_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 24)
	pub fn get_fb24() -> u8 { ::read(REGISTER_ADDRESS, FB24_BIT_OFFSET, FB24_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 24)
	pub fn set_fb24(value: u8) { ::write(REGISTER_ADDRESS, FB24_BIT_OFFSET, FB24_BIT_WIDTH, value as u32); }

	const FB25_BIT_OFFSET: u8 = 25;
	const FB25_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 25)
	pub fn get_fb25() -> u8 { ::read(REGISTER_ADDRESS, FB25_BIT_OFFSET, FB25_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 25)
	pub fn set_fb25(value: u8) { ::write(REGISTER_ADDRESS, FB25_BIT_OFFSET, FB25_BIT_WIDTH, value as u32); }

	const FB26_BIT_OFFSET: u8 = 26;
	const FB26_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 26)
	pub fn get_fb26() -> u8 { ::read(REGISTER_ADDRESS, FB26_BIT_OFFSET, FB26_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 26)
	pub fn set_fb26(value: u8) { ::write(REGISTER_ADDRESS, FB26_BIT_OFFSET, FB26_BIT_WIDTH, value as u32); }

	const FB27_BIT_OFFSET: u8 = 27;
	const FB27_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 27)
	pub fn get_fb27() -> u8 { ::read(REGISTER_ADDRESS, FB27_BIT_OFFSET, FB27_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 27)
	pub fn set_fb27(value: u8) { ::write(REGISTER_ADDRESS, FB27_BIT_OFFSET, FB27_BIT_WIDTH, value as u32); }

	const FB28_BIT_OFFSET: u8 = 28;
	const FB28_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 28)
	pub fn get_fb28() -> u8 { ::read(REGISTER_ADDRESS, FB28_BIT_OFFSET, FB28_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 28)
	pub fn set_fb28(value: u8) { ::write(REGISTER_ADDRESS, FB28_BIT_OFFSET, FB28_BIT_WIDTH, value as u32); }

	const FB29_BIT_OFFSET: u8 = 29;
	const FB29_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 29)
	pub fn get_fb29() -> u8 { ::read(REGISTER_ADDRESS, FB29_BIT_OFFSET, FB29_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 29)
	pub fn set_fb29(value: u8) { ::write(REGISTER_ADDRESS, FB29_BIT_OFFSET, FB29_BIT_WIDTH, value as u32); }

	const FB30_BIT_OFFSET: u8 = 30;
	const FB30_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 30)
	pub fn get_fb30() -> u8 { ::read(REGISTER_ADDRESS, FB30_BIT_OFFSET, FB30_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 30)
	pub fn set_fb30(value: u8) { ::write(REGISTER_ADDRESS, FB30_BIT_OFFSET, FB30_BIT_WIDTH, value as u32); }

	const FB31_BIT_OFFSET: u8 = 31;
	const FB31_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 31)
	pub fn get_fb31() -> u8 { ::read(REGISTER_ADDRESS, FB31_BIT_OFFSET, FB31_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 31)
	pub fn set_fb31(value: u8) { ::write(REGISTER_ADDRESS, FB31_BIT_OFFSET, FB31_BIT_WIDTH, value as u32); }
}
/// Filter bank 17 register 2
/// Size: 0x20 bits
pub mod f17r2 {
	const REGISTER_ADDRESS_OFFSET: u32 = 0x2CC;
	const REGISTER_ADDRESS: u32 = super::BASE_ADDRESS + REGISTER_ADDRESS_OFFSET;

	const FB0_BIT_OFFSET: u8 = 0;
	const FB0_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 0)
	pub fn get_fb0() -> u8 { ::read(REGISTER_ADDRESS, FB0_BIT_OFFSET, FB0_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 0)
	pub fn set_fb0(value: u8) { ::write(REGISTER_ADDRESS, FB0_BIT_OFFSET, FB0_BIT_WIDTH, value as u32); }

	const FB1_BIT_OFFSET: u8 = 1;
	const FB1_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 1)
	pub fn get_fb1() -> u8 { ::read(REGISTER_ADDRESS, FB1_BIT_OFFSET, FB1_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 1)
	pub fn set_fb1(value: u8) { ::write(REGISTER_ADDRESS, FB1_BIT_OFFSET, FB1_BIT_WIDTH, value as u32); }

	const FB2_BIT_OFFSET: u8 = 2;
	const FB2_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 2)
	pub fn get_fb2() -> u8 { ::read(REGISTER_ADDRESS, FB2_BIT_OFFSET, FB2_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 2)
	pub fn set_fb2(value: u8) { ::write(REGISTER_ADDRESS, FB2_BIT_OFFSET, FB2_BIT_WIDTH, value as u32); }

	const FB3_BIT_OFFSET: u8 = 3;
	const FB3_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 3)
	pub fn get_fb3() -> u8 { ::read(REGISTER_ADDRESS, FB3_BIT_OFFSET, FB3_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 3)
	pub fn set_fb3(value: u8) { ::write(REGISTER_ADDRESS, FB3_BIT_OFFSET, FB3_BIT_WIDTH, value as u32); }

	const FB4_BIT_OFFSET: u8 = 4;
	const FB4_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 4)
	pub fn get_fb4() -> u8 { ::read(REGISTER_ADDRESS, FB4_BIT_OFFSET, FB4_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 4)
	pub fn set_fb4(value: u8) { ::write(REGISTER_ADDRESS, FB4_BIT_OFFSET, FB4_BIT_WIDTH, value as u32); }

	const FB5_BIT_OFFSET: u8 = 5;
	const FB5_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 5)
	pub fn get_fb5() -> u8 { ::read(REGISTER_ADDRESS, FB5_BIT_OFFSET, FB5_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 5)
	pub fn set_fb5(value: u8) { ::write(REGISTER_ADDRESS, FB5_BIT_OFFSET, FB5_BIT_WIDTH, value as u32); }

	const FB6_BIT_OFFSET: u8 = 6;
	const FB6_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 6)
	pub fn get_fb6() -> u8 { ::read(REGISTER_ADDRESS, FB6_BIT_OFFSET, FB6_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 6)
	pub fn set_fb6(value: u8) { ::write(REGISTER_ADDRESS, FB6_BIT_OFFSET, FB6_BIT_WIDTH, value as u32); }

	const FB7_BIT_OFFSET: u8 = 7;
	const FB7_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 7)
	pub fn get_fb7() -> u8 { ::read(REGISTER_ADDRESS, FB7_BIT_OFFSET, FB7_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 7)
	pub fn set_fb7(value: u8) { ::write(REGISTER_ADDRESS, FB7_BIT_OFFSET, FB7_BIT_WIDTH, value as u32); }

	const FB8_BIT_OFFSET: u8 = 8;
	const FB8_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 8)
	pub fn get_fb8() -> u8 { ::read(REGISTER_ADDRESS, FB8_BIT_OFFSET, FB8_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 8)
	pub fn set_fb8(value: u8) { ::write(REGISTER_ADDRESS, FB8_BIT_OFFSET, FB8_BIT_WIDTH, value as u32); }

	const FB9_BIT_OFFSET: u8 = 9;
	const FB9_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 9)
	pub fn get_fb9() -> u8 { ::read(REGISTER_ADDRESS, FB9_BIT_OFFSET, FB9_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 9)
	pub fn set_fb9(value: u8) { ::write(REGISTER_ADDRESS, FB9_BIT_OFFSET, FB9_BIT_WIDTH, value as u32); }

	const FB10_BIT_OFFSET: u8 = 10;
	const FB10_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 10)
	pub fn get_fb10() -> u8 { ::read(REGISTER_ADDRESS, FB10_BIT_OFFSET, FB10_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 10)
	pub fn set_fb10(value: u8) { ::write(REGISTER_ADDRESS, FB10_BIT_OFFSET, FB10_BIT_WIDTH, value as u32); }

	const FB11_BIT_OFFSET: u8 = 11;
	const FB11_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 11)
	pub fn get_fb11() -> u8 { ::read(REGISTER_ADDRESS, FB11_BIT_OFFSET, FB11_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 11)
	pub fn set_fb11(value: u8) { ::write(REGISTER_ADDRESS, FB11_BIT_OFFSET, FB11_BIT_WIDTH, value as u32); }

	const FB12_BIT_OFFSET: u8 = 12;
	const FB12_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 12)
	pub fn get_fb12() -> u8 { ::read(REGISTER_ADDRESS, FB12_BIT_OFFSET, FB12_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 12)
	pub fn set_fb12(value: u8) { ::write(REGISTER_ADDRESS, FB12_BIT_OFFSET, FB12_BIT_WIDTH, value as u32); }

	const FB13_BIT_OFFSET: u8 = 13;
	const FB13_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 13)
	pub fn get_fb13() -> u8 { ::read(REGISTER_ADDRESS, FB13_BIT_OFFSET, FB13_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 13)
	pub fn set_fb13(value: u8) { ::write(REGISTER_ADDRESS, FB13_BIT_OFFSET, FB13_BIT_WIDTH, value as u32); }

	const FB14_BIT_OFFSET: u8 = 14;
	const FB14_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 14)
	pub fn get_fb14() -> u8 { ::read(REGISTER_ADDRESS, FB14_BIT_OFFSET, FB14_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 14)
	pub fn set_fb14(value: u8) { ::write(REGISTER_ADDRESS, FB14_BIT_OFFSET, FB14_BIT_WIDTH, value as u32); }

	const FB15_BIT_OFFSET: u8 = 15;
	const FB15_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 15)
	pub fn get_fb15() -> u8 { ::read(REGISTER_ADDRESS, FB15_BIT_OFFSET, FB15_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 15)
	pub fn set_fb15(value: u8) { ::write(REGISTER_ADDRESS, FB15_BIT_OFFSET, FB15_BIT_WIDTH, value as u32); }

	const FB16_BIT_OFFSET: u8 = 16;
	const FB16_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 16)
	pub fn get_fb16() -> u8 { ::read(REGISTER_ADDRESS, FB16_BIT_OFFSET, FB16_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 16)
	pub fn set_fb16(value: u8) { ::write(REGISTER_ADDRESS, FB16_BIT_OFFSET, FB16_BIT_WIDTH, value as u32); }

	const FB17_BIT_OFFSET: u8 = 17;
	const FB17_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 17)
	pub fn get_fb17() -> u8 { ::read(REGISTER_ADDRESS, FB17_BIT_OFFSET, FB17_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 17)
	pub fn set_fb17(value: u8) { ::write(REGISTER_ADDRESS, FB17_BIT_OFFSET, FB17_BIT_WIDTH, value as u32); }

	const FB18_BIT_OFFSET: u8 = 18;
	const FB18_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 18)
	pub fn get_fb18() -> u8 { ::read(REGISTER_ADDRESS, FB18_BIT_OFFSET, FB18_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 18)
	pub fn set_fb18(value: u8) { ::write(REGISTER_ADDRESS, FB18_BIT_OFFSET, FB18_BIT_WIDTH, value as u32); }

	const FB19_BIT_OFFSET: u8 = 19;
	const FB19_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 19)
	pub fn get_fb19() -> u8 { ::read(REGISTER_ADDRESS, FB19_BIT_OFFSET, FB19_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 19)
	pub fn set_fb19(value: u8) { ::write(REGISTER_ADDRESS, FB19_BIT_OFFSET, FB19_BIT_WIDTH, value as u32); }

	const FB20_BIT_OFFSET: u8 = 20;
	const FB20_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 20)
	pub fn get_fb20() -> u8 { ::read(REGISTER_ADDRESS, FB20_BIT_OFFSET, FB20_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 20)
	pub fn set_fb20(value: u8) { ::write(REGISTER_ADDRESS, FB20_BIT_OFFSET, FB20_BIT_WIDTH, value as u32); }

	const FB21_BIT_OFFSET: u8 = 21;
	const FB21_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 21)
	pub fn get_fb21() -> u8 { ::read(REGISTER_ADDRESS, FB21_BIT_OFFSET, FB21_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 21)
	pub fn set_fb21(value: u8) { ::write(REGISTER_ADDRESS, FB21_BIT_OFFSET, FB21_BIT_WIDTH, value as u32); }

	const FB22_BIT_OFFSET: u8 = 22;
	const FB22_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 22)
	pub fn get_fb22() -> u8 { ::read(REGISTER_ADDRESS, FB22_BIT_OFFSET, FB22_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 22)
	pub fn set_fb22(value: u8) { ::write(REGISTER_ADDRESS, FB22_BIT_OFFSET, FB22_BIT_WIDTH, value as u32); }

	const FB23_BIT_OFFSET: u8 = 23;
	const FB23_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 23)
	pub fn get_fb23() -> u8 { ::read(REGISTER_ADDRESS, FB23_BIT_OFFSET, FB23_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 23)
	pub fn set_fb23(value: u8) { ::write(REGISTER_ADDRESS, FB23_BIT_OFFSET, FB23_BIT_WIDTH, value as u32); }

	const FB24_BIT_OFFSET: u8 = 24;
	const FB24_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 24)
	pub fn get_fb24() -> u8 { ::read(REGISTER_ADDRESS, FB24_BIT_OFFSET, FB24_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 24)
	pub fn set_fb24(value: u8) { ::write(REGISTER_ADDRESS, FB24_BIT_OFFSET, FB24_BIT_WIDTH, value as u32); }

	const FB25_BIT_OFFSET: u8 = 25;
	const FB25_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 25)
	pub fn get_fb25() -> u8 { ::read(REGISTER_ADDRESS, FB25_BIT_OFFSET, FB25_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 25)
	pub fn set_fb25(value: u8) { ::write(REGISTER_ADDRESS, FB25_BIT_OFFSET, FB25_BIT_WIDTH, value as u32); }

	const FB26_BIT_OFFSET: u8 = 26;
	const FB26_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 26)
	pub fn get_fb26() -> u8 { ::read(REGISTER_ADDRESS, FB26_BIT_OFFSET, FB26_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 26)
	pub fn set_fb26(value: u8) { ::write(REGISTER_ADDRESS, FB26_BIT_OFFSET, FB26_BIT_WIDTH, value as u32); }

	const FB27_BIT_OFFSET: u8 = 27;
	const FB27_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 27)
	pub fn get_fb27() -> u8 { ::read(REGISTER_ADDRESS, FB27_BIT_OFFSET, FB27_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 27)
	pub fn set_fb27(value: u8) { ::write(REGISTER_ADDRESS, FB27_BIT_OFFSET, FB27_BIT_WIDTH, value as u32); }

	const FB28_BIT_OFFSET: u8 = 28;
	const FB28_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 28)
	pub fn get_fb28() -> u8 { ::read(REGISTER_ADDRESS, FB28_BIT_OFFSET, FB28_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 28)
	pub fn set_fb28(value: u8) { ::write(REGISTER_ADDRESS, FB28_BIT_OFFSET, FB28_BIT_WIDTH, value as u32); }

	const FB29_BIT_OFFSET: u8 = 29;
	const FB29_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 29)
	pub fn get_fb29() -> u8 { ::read(REGISTER_ADDRESS, FB29_BIT_OFFSET, FB29_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 29)
	pub fn set_fb29(value: u8) { ::write(REGISTER_ADDRESS, FB29_BIT_OFFSET, FB29_BIT_WIDTH, value as u32); }

	const FB30_BIT_OFFSET: u8 = 30;
	const FB30_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 30)
	pub fn get_fb30() -> u8 { ::read(REGISTER_ADDRESS, FB30_BIT_OFFSET, FB30_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 30)
	pub fn set_fb30(value: u8) { ::write(REGISTER_ADDRESS, FB30_BIT_OFFSET, FB30_BIT_WIDTH, value as u32); }

	const FB31_BIT_OFFSET: u8 = 31;
	const FB31_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 31)
	pub fn get_fb31() -> u8 { ::read(REGISTER_ADDRESS, FB31_BIT_OFFSET, FB31_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 31)
	pub fn set_fb31(value: u8) { ::write(REGISTER_ADDRESS, FB31_BIT_OFFSET, FB31_BIT_WIDTH, value as u32); }
}
/// Filter bank 18 register 1
/// Size: 0x20 bits
pub mod f18r1 {
	const REGISTER_ADDRESS_OFFSET: u32 = 0x2D0;
	const REGISTER_ADDRESS: u32 = super::BASE_ADDRESS + REGISTER_ADDRESS_OFFSET;

	const FB0_BIT_OFFSET: u8 = 0;
	const FB0_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 0)
	pub fn get_fb0() -> u8 { ::read(REGISTER_ADDRESS, FB0_BIT_OFFSET, FB0_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 0)
	pub fn set_fb0(value: u8) { ::write(REGISTER_ADDRESS, FB0_BIT_OFFSET, FB0_BIT_WIDTH, value as u32); }

	const FB1_BIT_OFFSET: u8 = 1;
	const FB1_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 1)
	pub fn get_fb1() -> u8 { ::read(REGISTER_ADDRESS, FB1_BIT_OFFSET, FB1_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 1)
	pub fn set_fb1(value: u8) { ::write(REGISTER_ADDRESS, FB1_BIT_OFFSET, FB1_BIT_WIDTH, value as u32); }

	const FB2_BIT_OFFSET: u8 = 2;
	const FB2_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 2)
	pub fn get_fb2() -> u8 { ::read(REGISTER_ADDRESS, FB2_BIT_OFFSET, FB2_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 2)
	pub fn set_fb2(value: u8) { ::write(REGISTER_ADDRESS, FB2_BIT_OFFSET, FB2_BIT_WIDTH, value as u32); }

	const FB3_BIT_OFFSET: u8 = 3;
	const FB3_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 3)
	pub fn get_fb3() -> u8 { ::read(REGISTER_ADDRESS, FB3_BIT_OFFSET, FB3_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 3)
	pub fn set_fb3(value: u8) { ::write(REGISTER_ADDRESS, FB3_BIT_OFFSET, FB3_BIT_WIDTH, value as u32); }

	const FB4_BIT_OFFSET: u8 = 4;
	const FB4_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 4)
	pub fn get_fb4() -> u8 { ::read(REGISTER_ADDRESS, FB4_BIT_OFFSET, FB4_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 4)
	pub fn set_fb4(value: u8) { ::write(REGISTER_ADDRESS, FB4_BIT_OFFSET, FB4_BIT_WIDTH, value as u32); }

	const FB5_BIT_OFFSET: u8 = 5;
	const FB5_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 5)
	pub fn get_fb5() -> u8 { ::read(REGISTER_ADDRESS, FB5_BIT_OFFSET, FB5_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 5)
	pub fn set_fb5(value: u8) { ::write(REGISTER_ADDRESS, FB5_BIT_OFFSET, FB5_BIT_WIDTH, value as u32); }

	const FB6_BIT_OFFSET: u8 = 6;
	const FB6_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 6)
	pub fn get_fb6() -> u8 { ::read(REGISTER_ADDRESS, FB6_BIT_OFFSET, FB6_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 6)
	pub fn set_fb6(value: u8) { ::write(REGISTER_ADDRESS, FB6_BIT_OFFSET, FB6_BIT_WIDTH, value as u32); }

	const FB7_BIT_OFFSET: u8 = 7;
	const FB7_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 7)
	pub fn get_fb7() -> u8 { ::read(REGISTER_ADDRESS, FB7_BIT_OFFSET, FB7_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 7)
	pub fn set_fb7(value: u8) { ::write(REGISTER_ADDRESS, FB7_BIT_OFFSET, FB7_BIT_WIDTH, value as u32); }

	const FB8_BIT_OFFSET: u8 = 8;
	const FB8_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 8)
	pub fn get_fb8() -> u8 { ::read(REGISTER_ADDRESS, FB8_BIT_OFFSET, FB8_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 8)
	pub fn set_fb8(value: u8) { ::write(REGISTER_ADDRESS, FB8_BIT_OFFSET, FB8_BIT_WIDTH, value as u32); }

	const FB9_BIT_OFFSET: u8 = 9;
	const FB9_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 9)
	pub fn get_fb9() -> u8 { ::read(REGISTER_ADDRESS, FB9_BIT_OFFSET, FB9_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 9)
	pub fn set_fb9(value: u8) { ::write(REGISTER_ADDRESS, FB9_BIT_OFFSET, FB9_BIT_WIDTH, value as u32); }

	const FB10_BIT_OFFSET: u8 = 10;
	const FB10_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 10)
	pub fn get_fb10() -> u8 { ::read(REGISTER_ADDRESS, FB10_BIT_OFFSET, FB10_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 10)
	pub fn set_fb10(value: u8) { ::write(REGISTER_ADDRESS, FB10_BIT_OFFSET, FB10_BIT_WIDTH, value as u32); }

	const FB11_BIT_OFFSET: u8 = 11;
	const FB11_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 11)
	pub fn get_fb11() -> u8 { ::read(REGISTER_ADDRESS, FB11_BIT_OFFSET, FB11_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 11)
	pub fn set_fb11(value: u8) { ::write(REGISTER_ADDRESS, FB11_BIT_OFFSET, FB11_BIT_WIDTH, value as u32); }

	const FB12_BIT_OFFSET: u8 = 12;
	const FB12_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 12)
	pub fn get_fb12() -> u8 { ::read(REGISTER_ADDRESS, FB12_BIT_OFFSET, FB12_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 12)
	pub fn set_fb12(value: u8) { ::write(REGISTER_ADDRESS, FB12_BIT_OFFSET, FB12_BIT_WIDTH, value as u32); }

	const FB13_BIT_OFFSET: u8 = 13;
	const FB13_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 13)
	pub fn get_fb13() -> u8 { ::read(REGISTER_ADDRESS, FB13_BIT_OFFSET, FB13_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 13)
	pub fn set_fb13(value: u8) { ::write(REGISTER_ADDRESS, FB13_BIT_OFFSET, FB13_BIT_WIDTH, value as u32); }

	const FB14_BIT_OFFSET: u8 = 14;
	const FB14_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 14)
	pub fn get_fb14() -> u8 { ::read(REGISTER_ADDRESS, FB14_BIT_OFFSET, FB14_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 14)
	pub fn set_fb14(value: u8) { ::write(REGISTER_ADDRESS, FB14_BIT_OFFSET, FB14_BIT_WIDTH, value as u32); }

	const FB15_BIT_OFFSET: u8 = 15;
	const FB15_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 15)
	pub fn get_fb15() -> u8 { ::read(REGISTER_ADDRESS, FB15_BIT_OFFSET, FB15_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 15)
	pub fn set_fb15(value: u8) { ::write(REGISTER_ADDRESS, FB15_BIT_OFFSET, FB15_BIT_WIDTH, value as u32); }

	const FB16_BIT_OFFSET: u8 = 16;
	const FB16_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 16)
	pub fn get_fb16() -> u8 { ::read(REGISTER_ADDRESS, FB16_BIT_OFFSET, FB16_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 16)
	pub fn set_fb16(value: u8) { ::write(REGISTER_ADDRESS, FB16_BIT_OFFSET, FB16_BIT_WIDTH, value as u32); }

	const FB17_BIT_OFFSET: u8 = 17;
	const FB17_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 17)
	pub fn get_fb17() -> u8 { ::read(REGISTER_ADDRESS, FB17_BIT_OFFSET, FB17_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 17)
	pub fn set_fb17(value: u8) { ::write(REGISTER_ADDRESS, FB17_BIT_OFFSET, FB17_BIT_WIDTH, value as u32); }

	const FB18_BIT_OFFSET: u8 = 18;
	const FB18_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 18)
	pub fn get_fb18() -> u8 { ::read(REGISTER_ADDRESS, FB18_BIT_OFFSET, FB18_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 18)
	pub fn set_fb18(value: u8) { ::write(REGISTER_ADDRESS, FB18_BIT_OFFSET, FB18_BIT_WIDTH, value as u32); }

	const FB19_BIT_OFFSET: u8 = 19;
	const FB19_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 19)
	pub fn get_fb19() -> u8 { ::read(REGISTER_ADDRESS, FB19_BIT_OFFSET, FB19_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 19)
	pub fn set_fb19(value: u8) { ::write(REGISTER_ADDRESS, FB19_BIT_OFFSET, FB19_BIT_WIDTH, value as u32); }

	const FB20_BIT_OFFSET: u8 = 20;
	const FB20_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 20)
	pub fn get_fb20() -> u8 { ::read(REGISTER_ADDRESS, FB20_BIT_OFFSET, FB20_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 20)
	pub fn set_fb20(value: u8) { ::write(REGISTER_ADDRESS, FB20_BIT_OFFSET, FB20_BIT_WIDTH, value as u32); }

	const FB21_BIT_OFFSET: u8 = 21;
	const FB21_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 21)
	pub fn get_fb21() -> u8 { ::read(REGISTER_ADDRESS, FB21_BIT_OFFSET, FB21_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 21)
	pub fn set_fb21(value: u8) { ::write(REGISTER_ADDRESS, FB21_BIT_OFFSET, FB21_BIT_WIDTH, value as u32); }

	const FB22_BIT_OFFSET: u8 = 22;
	const FB22_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 22)
	pub fn get_fb22() -> u8 { ::read(REGISTER_ADDRESS, FB22_BIT_OFFSET, FB22_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 22)
	pub fn set_fb22(value: u8) { ::write(REGISTER_ADDRESS, FB22_BIT_OFFSET, FB22_BIT_WIDTH, value as u32); }

	const FB23_BIT_OFFSET: u8 = 23;
	const FB23_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 23)
	pub fn get_fb23() -> u8 { ::read(REGISTER_ADDRESS, FB23_BIT_OFFSET, FB23_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 23)
	pub fn set_fb23(value: u8) { ::write(REGISTER_ADDRESS, FB23_BIT_OFFSET, FB23_BIT_WIDTH, value as u32); }

	const FB24_BIT_OFFSET: u8 = 24;
	const FB24_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 24)
	pub fn get_fb24() -> u8 { ::read(REGISTER_ADDRESS, FB24_BIT_OFFSET, FB24_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 24)
	pub fn set_fb24(value: u8) { ::write(REGISTER_ADDRESS, FB24_BIT_OFFSET, FB24_BIT_WIDTH, value as u32); }

	const FB25_BIT_OFFSET: u8 = 25;
	const FB25_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 25)
	pub fn get_fb25() -> u8 { ::read(REGISTER_ADDRESS, FB25_BIT_OFFSET, FB25_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 25)
	pub fn set_fb25(value: u8) { ::write(REGISTER_ADDRESS, FB25_BIT_OFFSET, FB25_BIT_WIDTH, value as u32); }

	const FB26_BIT_OFFSET: u8 = 26;
	const FB26_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 26)
	pub fn get_fb26() -> u8 { ::read(REGISTER_ADDRESS, FB26_BIT_OFFSET, FB26_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 26)
	pub fn set_fb26(value: u8) { ::write(REGISTER_ADDRESS, FB26_BIT_OFFSET, FB26_BIT_WIDTH, value as u32); }

	const FB27_BIT_OFFSET: u8 = 27;
	const FB27_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 27)
	pub fn get_fb27() -> u8 { ::read(REGISTER_ADDRESS, FB27_BIT_OFFSET, FB27_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 27)
	pub fn set_fb27(value: u8) { ::write(REGISTER_ADDRESS, FB27_BIT_OFFSET, FB27_BIT_WIDTH, value as u32); }

	const FB28_BIT_OFFSET: u8 = 28;
	const FB28_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 28)
	pub fn get_fb28() -> u8 { ::read(REGISTER_ADDRESS, FB28_BIT_OFFSET, FB28_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 28)
	pub fn set_fb28(value: u8) { ::write(REGISTER_ADDRESS, FB28_BIT_OFFSET, FB28_BIT_WIDTH, value as u32); }

	const FB29_BIT_OFFSET: u8 = 29;
	const FB29_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 29)
	pub fn get_fb29() -> u8 { ::read(REGISTER_ADDRESS, FB29_BIT_OFFSET, FB29_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 29)
	pub fn set_fb29(value: u8) { ::write(REGISTER_ADDRESS, FB29_BIT_OFFSET, FB29_BIT_WIDTH, value as u32); }

	const FB30_BIT_OFFSET: u8 = 30;
	const FB30_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 30)
	pub fn get_fb30() -> u8 { ::read(REGISTER_ADDRESS, FB30_BIT_OFFSET, FB30_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 30)
	pub fn set_fb30(value: u8) { ::write(REGISTER_ADDRESS, FB30_BIT_OFFSET, FB30_BIT_WIDTH, value as u32); }

	const FB31_BIT_OFFSET: u8 = 31;
	const FB31_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 31)
	pub fn get_fb31() -> u8 { ::read(REGISTER_ADDRESS, FB31_BIT_OFFSET, FB31_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 31)
	pub fn set_fb31(value: u8) { ::write(REGISTER_ADDRESS, FB31_BIT_OFFSET, FB31_BIT_WIDTH, value as u32); }
}
/// Filter bank 18 register 2
/// Size: 0x20 bits
pub mod f18r2 {
	const REGISTER_ADDRESS_OFFSET: u32 = 0x2D4;
	const REGISTER_ADDRESS: u32 = super::BASE_ADDRESS + REGISTER_ADDRESS_OFFSET;

	const FB0_BIT_OFFSET: u8 = 0;
	const FB0_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 0)
	pub fn get_fb0() -> u8 { ::read(REGISTER_ADDRESS, FB0_BIT_OFFSET, FB0_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 0)
	pub fn set_fb0(value: u8) { ::write(REGISTER_ADDRESS, FB0_BIT_OFFSET, FB0_BIT_WIDTH, value as u32); }

	const FB1_BIT_OFFSET: u8 = 1;
	const FB1_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 1)
	pub fn get_fb1() -> u8 { ::read(REGISTER_ADDRESS, FB1_BIT_OFFSET, FB1_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 1)
	pub fn set_fb1(value: u8) { ::write(REGISTER_ADDRESS, FB1_BIT_OFFSET, FB1_BIT_WIDTH, value as u32); }

	const FB2_BIT_OFFSET: u8 = 2;
	const FB2_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 2)
	pub fn get_fb2() -> u8 { ::read(REGISTER_ADDRESS, FB2_BIT_OFFSET, FB2_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 2)
	pub fn set_fb2(value: u8) { ::write(REGISTER_ADDRESS, FB2_BIT_OFFSET, FB2_BIT_WIDTH, value as u32); }

	const FB3_BIT_OFFSET: u8 = 3;
	const FB3_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 3)
	pub fn get_fb3() -> u8 { ::read(REGISTER_ADDRESS, FB3_BIT_OFFSET, FB3_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 3)
	pub fn set_fb3(value: u8) { ::write(REGISTER_ADDRESS, FB3_BIT_OFFSET, FB3_BIT_WIDTH, value as u32); }

	const FB4_BIT_OFFSET: u8 = 4;
	const FB4_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 4)
	pub fn get_fb4() -> u8 { ::read(REGISTER_ADDRESS, FB4_BIT_OFFSET, FB4_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 4)
	pub fn set_fb4(value: u8) { ::write(REGISTER_ADDRESS, FB4_BIT_OFFSET, FB4_BIT_WIDTH, value as u32); }

	const FB5_BIT_OFFSET: u8 = 5;
	const FB5_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 5)
	pub fn get_fb5() -> u8 { ::read(REGISTER_ADDRESS, FB5_BIT_OFFSET, FB5_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 5)
	pub fn set_fb5(value: u8) { ::write(REGISTER_ADDRESS, FB5_BIT_OFFSET, FB5_BIT_WIDTH, value as u32); }

	const FB6_BIT_OFFSET: u8 = 6;
	const FB6_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 6)
	pub fn get_fb6() -> u8 { ::read(REGISTER_ADDRESS, FB6_BIT_OFFSET, FB6_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 6)
	pub fn set_fb6(value: u8) { ::write(REGISTER_ADDRESS, FB6_BIT_OFFSET, FB6_BIT_WIDTH, value as u32); }

	const FB7_BIT_OFFSET: u8 = 7;
	const FB7_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 7)
	pub fn get_fb7() -> u8 { ::read(REGISTER_ADDRESS, FB7_BIT_OFFSET, FB7_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 7)
	pub fn set_fb7(value: u8) { ::write(REGISTER_ADDRESS, FB7_BIT_OFFSET, FB7_BIT_WIDTH, value as u32); }

	const FB8_BIT_OFFSET: u8 = 8;
	const FB8_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 8)
	pub fn get_fb8() -> u8 { ::read(REGISTER_ADDRESS, FB8_BIT_OFFSET, FB8_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 8)
	pub fn set_fb8(value: u8) { ::write(REGISTER_ADDRESS, FB8_BIT_OFFSET, FB8_BIT_WIDTH, value as u32); }

	const FB9_BIT_OFFSET: u8 = 9;
	const FB9_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 9)
	pub fn get_fb9() -> u8 { ::read(REGISTER_ADDRESS, FB9_BIT_OFFSET, FB9_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 9)
	pub fn set_fb9(value: u8) { ::write(REGISTER_ADDRESS, FB9_BIT_OFFSET, FB9_BIT_WIDTH, value as u32); }

	const FB10_BIT_OFFSET: u8 = 10;
	const FB10_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 10)
	pub fn get_fb10() -> u8 { ::read(REGISTER_ADDRESS, FB10_BIT_OFFSET, FB10_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 10)
	pub fn set_fb10(value: u8) { ::write(REGISTER_ADDRESS, FB10_BIT_OFFSET, FB10_BIT_WIDTH, value as u32); }

	const FB11_BIT_OFFSET: u8 = 11;
	const FB11_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 11)
	pub fn get_fb11() -> u8 { ::read(REGISTER_ADDRESS, FB11_BIT_OFFSET, FB11_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 11)
	pub fn set_fb11(value: u8) { ::write(REGISTER_ADDRESS, FB11_BIT_OFFSET, FB11_BIT_WIDTH, value as u32); }

	const FB12_BIT_OFFSET: u8 = 12;
	const FB12_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 12)
	pub fn get_fb12() -> u8 { ::read(REGISTER_ADDRESS, FB12_BIT_OFFSET, FB12_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 12)
	pub fn set_fb12(value: u8) { ::write(REGISTER_ADDRESS, FB12_BIT_OFFSET, FB12_BIT_WIDTH, value as u32); }

	const FB13_BIT_OFFSET: u8 = 13;
	const FB13_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 13)
	pub fn get_fb13() -> u8 { ::read(REGISTER_ADDRESS, FB13_BIT_OFFSET, FB13_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 13)
	pub fn set_fb13(value: u8) { ::write(REGISTER_ADDRESS, FB13_BIT_OFFSET, FB13_BIT_WIDTH, value as u32); }

	const FB14_BIT_OFFSET: u8 = 14;
	const FB14_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 14)
	pub fn get_fb14() -> u8 { ::read(REGISTER_ADDRESS, FB14_BIT_OFFSET, FB14_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 14)
	pub fn set_fb14(value: u8) { ::write(REGISTER_ADDRESS, FB14_BIT_OFFSET, FB14_BIT_WIDTH, value as u32); }

	const FB15_BIT_OFFSET: u8 = 15;
	const FB15_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 15)
	pub fn get_fb15() -> u8 { ::read(REGISTER_ADDRESS, FB15_BIT_OFFSET, FB15_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 15)
	pub fn set_fb15(value: u8) { ::write(REGISTER_ADDRESS, FB15_BIT_OFFSET, FB15_BIT_WIDTH, value as u32); }

	const FB16_BIT_OFFSET: u8 = 16;
	const FB16_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 16)
	pub fn get_fb16() -> u8 { ::read(REGISTER_ADDRESS, FB16_BIT_OFFSET, FB16_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 16)
	pub fn set_fb16(value: u8) { ::write(REGISTER_ADDRESS, FB16_BIT_OFFSET, FB16_BIT_WIDTH, value as u32); }

	const FB17_BIT_OFFSET: u8 = 17;
	const FB17_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 17)
	pub fn get_fb17() -> u8 { ::read(REGISTER_ADDRESS, FB17_BIT_OFFSET, FB17_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 17)
	pub fn set_fb17(value: u8) { ::write(REGISTER_ADDRESS, FB17_BIT_OFFSET, FB17_BIT_WIDTH, value as u32); }

	const FB18_BIT_OFFSET: u8 = 18;
	const FB18_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 18)
	pub fn get_fb18() -> u8 { ::read(REGISTER_ADDRESS, FB18_BIT_OFFSET, FB18_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 18)
	pub fn set_fb18(value: u8) { ::write(REGISTER_ADDRESS, FB18_BIT_OFFSET, FB18_BIT_WIDTH, value as u32); }

	const FB19_BIT_OFFSET: u8 = 19;
	const FB19_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 19)
	pub fn get_fb19() -> u8 { ::read(REGISTER_ADDRESS, FB19_BIT_OFFSET, FB19_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 19)
	pub fn set_fb19(value: u8) { ::write(REGISTER_ADDRESS, FB19_BIT_OFFSET, FB19_BIT_WIDTH, value as u32); }

	const FB20_BIT_OFFSET: u8 = 20;
	const FB20_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 20)
	pub fn get_fb20() -> u8 { ::read(REGISTER_ADDRESS, FB20_BIT_OFFSET, FB20_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 20)
	pub fn set_fb20(value: u8) { ::write(REGISTER_ADDRESS, FB20_BIT_OFFSET, FB20_BIT_WIDTH, value as u32); }

	const FB21_BIT_OFFSET: u8 = 21;
	const FB21_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 21)
	pub fn get_fb21() -> u8 { ::read(REGISTER_ADDRESS, FB21_BIT_OFFSET, FB21_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 21)
	pub fn set_fb21(value: u8) { ::write(REGISTER_ADDRESS, FB21_BIT_OFFSET, FB21_BIT_WIDTH, value as u32); }

	const FB22_BIT_OFFSET: u8 = 22;
	const FB22_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 22)
	pub fn get_fb22() -> u8 { ::read(REGISTER_ADDRESS, FB22_BIT_OFFSET, FB22_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 22)
	pub fn set_fb22(value: u8) { ::write(REGISTER_ADDRESS, FB22_BIT_OFFSET, FB22_BIT_WIDTH, value as u32); }

	const FB23_BIT_OFFSET: u8 = 23;
	const FB23_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 23)
	pub fn get_fb23() -> u8 { ::read(REGISTER_ADDRESS, FB23_BIT_OFFSET, FB23_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 23)
	pub fn set_fb23(value: u8) { ::write(REGISTER_ADDRESS, FB23_BIT_OFFSET, FB23_BIT_WIDTH, value as u32); }

	const FB24_BIT_OFFSET: u8 = 24;
	const FB24_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 24)
	pub fn get_fb24() -> u8 { ::read(REGISTER_ADDRESS, FB24_BIT_OFFSET, FB24_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 24)
	pub fn set_fb24(value: u8) { ::write(REGISTER_ADDRESS, FB24_BIT_OFFSET, FB24_BIT_WIDTH, value as u32); }

	const FB25_BIT_OFFSET: u8 = 25;
	const FB25_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 25)
	pub fn get_fb25() -> u8 { ::read(REGISTER_ADDRESS, FB25_BIT_OFFSET, FB25_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 25)
	pub fn set_fb25(value: u8) { ::write(REGISTER_ADDRESS, FB25_BIT_OFFSET, FB25_BIT_WIDTH, value as u32); }

	const FB26_BIT_OFFSET: u8 = 26;
	const FB26_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 26)
	pub fn get_fb26() -> u8 { ::read(REGISTER_ADDRESS, FB26_BIT_OFFSET, FB26_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 26)
	pub fn set_fb26(value: u8) { ::write(REGISTER_ADDRESS, FB26_BIT_OFFSET, FB26_BIT_WIDTH, value as u32); }

	const FB27_BIT_OFFSET: u8 = 27;
	const FB27_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 27)
	pub fn get_fb27() -> u8 { ::read(REGISTER_ADDRESS, FB27_BIT_OFFSET, FB27_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 27)
	pub fn set_fb27(value: u8) { ::write(REGISTER_ADDRESS, FB27_BIT_OFFSET, FB27_BIT_WIDTH, value as u32); }

	const FB28_BIT_OFFSET: u8 = 28;
	const FB28_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 28)
	pub fn get_fb28() -> u8 { ::read(REGISTER_ADDRESS, FB28_BIT_OFFSET, FB28_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 28)
	pub fn set_fb28(value: u8) { ::write(REGISTER_ADDRESS, FB28_BIT_OFFSET, FB28_BIT_WIDTH, value as u32); }

	const FB29_BIT_OFFSET: u8 = 29;
	const FB29_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 29)
	pub fn get_fb29() -> u8 { ::read(REGISTER_ADDRESS, FB29_BIT_OFFSET, FB29_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 29)
	pub fn set_fb29(value: u8) { ::write(REGISTER_ADDRESS, FB29_BIT_OFFSET, FB29_BIT_WIDTH, value as u32); }

	const FB30_BIT_OFFSET: u8 = 30;
	const FB30_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 30)
	pub fn get_fb30() -> u8 { ::read(REGISTER_ADDRESS, FB30_BIT_OFFSET, FB30_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 30)
	pub fn set_fb30(value: u8) { ::write(REGISTER_ADDRESS, FB30_BIT_OFFSET, FB30_BIT_WIDTH, value as u32); }

	const FB31_BIT_OFFSET: u8 = 31;
	const FB31_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 31)
	pub fn get_fb31() -> u8 { ::read(REGISTER_ADDRESS, FB31_BIT_OFFSET, FB31_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 31)
	pub fn set_fb31(value: u8) { ::write(REGISTER_ADDRESS, FB31_BIT_OFFSET, FB31_BIT_WIDTH, value as u32); }
}
/// Filter bank 19 register 1
/// Size: 0x20 bits
pub mod f19r1 {
	const REGISTER_ADDRESS_OFFSET: u32 = 0x2D8;
	const REGISTER_ADDRESS: u32 = super::BASE_ADDRESS + REGISTER_ADDRESS_OFFSET;

	const FB0_BIT_OFFSET: u8 = 0;
	const FB0_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 0)
	pub fn get_fb0() -> u8 { ::read(REGISTER_ADDRESS, FB0_BIT_OFFSET, FB0_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 0)
	pub fn set_fb0(value: u8) { ::write(REGISTER_ADDRESS, FB0_BIT_OFFSET, FB0_BIT_WIDTH, value as u32); }

	const FB1_BIT_OFFSET: u8 = 1;
	const FB1_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 1)
	pub fn get_fb1() -> u8 { ::read(REGISTER_ADDRESS, FB1_BIT_OFFSET, FB1_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 1)
	pub fn set_fb1(value: u8) { ::write(REGISTER_ADDRESS, FB1_BIT_OFFSET, FB1_BIT_WIDTH, value as u32); }

	const FB2_BIT_OFFSET: u8 = 2;
	const FB2_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 2)
	pub fn get_fb2() -> u8 { ::read(REGISTER_ADDRESS, FB2_BIT_OFFSET, FB2_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 2)
	pub fn set_fb2(value: u8) { ::write(REGISTER_ADDRESS, FB2_BIT_OFFSET, FB2_BIT_WIDTH, value as u32); }

	const FB3_BIT_OFFSET: u8 = 3;
	const FB3_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 3)
	pub fn get_fb3() -> u8 { ::read(REGISTER_ADDRESS, FB3_BIT_OFFSET, FB3_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 3)
	pub fn set_fb3(value: u8) { ::write(REGISTER_ADDRESS, FB3_BIT_OFFSET, FB3_BIT_WIDTH, value as u32); }

	const FB4_BIT_OFFSET: u8 = 4;
	const FB4_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 4)
	pub fn get_fb4() -> u8 { ::read(REGISTER_ADDRESS, FB4_BIT_OFFSET, FB4_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 4)
	pub fn set_fb4(value: u8) { ::write(REGISTER_ADDRESS, FB4_BIT_OFFSET, FB4_BIT_WIDTH, value as u32); }

	const FB5_BIT_OFFSET: u8 = 5;
	const FB5_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 5)
	pub fn get_fb5() -> u8 { ::read(REGISTER_ADDRESS, FB5_BIT_OFFSET, FB5_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 5)
	pub fn set_fb5(value: u8) { ::write(REGISTER_ADDRESS, FB5_BIT_OFFSET, FB5_BIT_WIDTH, value as u32); }

	const FB6_BIT_OFFSET: u8 = 6;
	const FB6_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 6)
	pub fn get_fb6() -> u8 { ::read(REGISTER_ADDRESS, FB6_BIT_OFFSET, FB6_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 6)
	pub fn set_fb6(value: u8) { ::write(REGISTER_ADDRESS, FB6_BIT_OFFSET, FB6_BIT_WIDTH, value as u32); }

	const FB7_BIT_OFFSET: u8 = 7;
	const FB7_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 7)
	pub fn get_fb7() -> u8 { ::read(REGISTER_ADDRESS, FB7_BIT_OFFSET, FB7_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 7)
	pub fn set_fb7(value: u8) { ::write(REGISTER_ADDRESS, FB7_BIT_OFFSET, FB7_BIT_WIDTH, value as u32); }

	const FB8_BIT_OFFSET: u8 = 8;
	const FB8_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 8)
	pub fn get_fb8() -> u8 { ::read(REGISTER_ADDRESS, FB8_BIT_OFFSET, FB8_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 8)
	pub fn set_fb8(value: u8) { ::write(REGISTER_ADDRESS, FB8_BIT_OFFSET, FB8_BIT_WIDTH, value as u32); }

	const FB9_BIT_OFFSET: u8 = 9;
	const FB9_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 9)
	pub fn get_fb9() -> u8 { ::read(REGISTER_ADDRESS, FB9_BIT_OFFSET, FB9_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 9)
	pub fn set_fb9(value: u8) { ::write(REGISTER_ADDRESS, FB9_BIT_OFFSET, FB9_BIT_WIDTH, value as u32); }

	const FB10_BIT_OFFSET: u8 = 10;
	const FB10_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 10)
	pub fn get_fb10() -> u8 { ::read(REGISTER_ADDRESS, FB10_BIT_OFFSET, FB10_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 10)
	pub fn set_fb10(value: u8) { ::write(REGISTER_ADDRESS, FB10_BIT_OFFSET, FB10_BIT_WIDTH, value as u32); }

	const FB11_BIT_OFFSET: u8 = 11;
	const FB11_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 11)
	pub fn get_fb11() -> u8 { ::read(REGISTER_ADDRESS, FB11_BIT_OFFSET, FB11_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 11)
	pub fn set_fb11(value: u8) { ::write(REGISTER_ADDRESS, FB11_BIT_OFFSET, FB11_BIT_WIDTH, value as u32); }

	const FB12_BIT_OFFSET: u8 = 12;
	const FB12_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 12)
	pub fn get_fb12() -> u8 { ::read(REGISTER_ADDRESS, FB12_BIT_OFFSET, FB12_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 12)
	pub fn set_fb12(value: u8) { ::write(REGISTER_ADDRESS, FB12_BIT_OFFSET, FB12_BIT_WIDTH, value as u32); }

	const FB13_BIT_OFFSET: u8 = 13;
	const FB13_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 13)
	pub fn get_fb13() -> u8 { ::read(REGISTER_ADDRESS, FB13_BIT_OFFSET, FB13_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 13)
	pub fn set_fb13(value: u8) { ::write(REGISTER_ADDRESS, FB13_BIT_OFFSET, FB13_BIT_WIDTH, value as u32); }

	const FB14_BIT_OFFSET: u8 = 14;
	const FB14_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 14)
	pub fn get_fb14() -> u8 { ::read(REGISTER_ADDRESS, FB14_BIT_OFFSET, FB14_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 14)
	pub fn set_fb14(value: u8) { ::write(REGISTER_ADDRESS, FB14_BIT_OFFSET, FB14_BIT_WIDTH, value as u32); }

	const FB15_BIT_OFFSET: u8 = 15;
	const FB15_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 15)
	pub fn get_fb15() -> u8 { ::read(REGISTER_ADDRESS, FB15_BIT_OFFSET, FB15_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 15)
	pub fn set_fb15(value: u8) { ::write(REGISTER_ADDRESS, FB15_BIT_OFFSET, FB15_BIT_WIDTH, value as u32); }

	const FB16_BIT_OFFSET: u8 = 16;
	const FB16_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 16)
	pub fn get_fb16() -> u8 { ::read(REGISTER_ADDRESS, FB16_BIT_OFFSET, FB16_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 16)
	pub fn set_fb16(value: u8) { ::write(REGISTER_ADDRESS, FB16_BIT_OFFSET, FB16_BIT_WIDTH, value as u32); }

	const FB17_BIT_OFFSET: u8 = 17;
	const FB17_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 17)
	pub fn get_fb17() -> u8 { ::read(REGISTER_ADDRESS, FB17_BIT_OFFSET, FB17_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 17)
	pub fn set_fb17(value: u8) { ::write(REGISTER_ADDRESS, FB17_BIT_OFFSET, FB17_BIT_WIDTH, value as u32); }

	const FB18_BIT_OFFSET: u8 = 18;
	const FB18_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 18)
	pub fn get_fb18() -> u8 { ::read(REGISTER_ADDRESS, FB18_BIT_OFFSET, FB18_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 18)
	pub fn set_fb18(value: u8) { ::write(REGISTER_ADDRESS, FB18_BIT_OFFSET, FB18_BIT_WIDTH, value as u32); }

	const FB19_BIT_OFFSET: u8 = 19;
	const FB19_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 19)
	pub fn get_fb19() -> u8 { ::read(REGISTER_ADDRESS, FB19_BIT_OFFSET, FB19_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 19)
	pub fn set_fb19(value: u8) { ::write(REGISTER_ADDRESS, FB19_BIT_OFFSET, FB19_BIT_WIDTH, value as u32); }

	const FB20_BIT_OFFSET: u8 = 20;
	const FB20_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 20)
	pub fn get_fb20() -> u8 { ::read(REGISTER_ADDRESS, FB20_BIT_OFFSET, FB20_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 20)
	pub fn set_fb20(value: u8) { ::write(REGISTER_ADDRESS, FB20_BIT_OFFSET, FB20_BIT_WIDTH, value as u32); }

	const FB21_BIT_OFFSET: u8 = 21;
	const FB21_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 21)
	pub fn get_fb21() -> u8 { ::read(REGISTER_ADDRESS, FB21_BIT_OFFSET, FB21_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 21)
	pub fn set_fb21(value: u8) { ::write(REGISTER_ADDRESS, FB21_BIT_OFFSET, FB21_BIT_WIDTH, value as u32); }

	const FB22_BIT_OFFSET: u8 = 22;
	const FB22_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 22)
	pub fn get_fb22() -> u8 { ::read(REGISTER_ADDRESS, FB22_BIT_OFFSET, FB22_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 22)
	pub fn set_fb22(value: u8) { ::write(REGISTER_ADDRESS, FB22_BIT_OFFSET, FB22_BIT_WIDTH, value as u32); }

	const FB23_BIT_OFFSET: u8 = 23;
	const FB23_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 23)
	pub fn get_fb23() -> u8 { ::read(REGISTER_ADDRESS, FB23_BIT_OFFSET, FB23_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 23)
	pub fn set_fb23(value: u8) { ::write(REGISTER_ADDRESS, FB23_BIT_OFFSET, FB23_BIT_WIDTH, value as u32); }

	const FB24_BIT_OFFSET: u8 = 24;
	const FB24_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 24)
	pub fn get_fb24() -> u8 { ::read(REGISTER_ADDRESS, FB24_BIT_OFFSET, FB24_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 24)
	pub fn set_fb24(value: u8) { ::write(REGISTER_ADDRESS, FB24_BIT_OFFSET, FB24_BIT_WIDTH, value as u32); }

	const FB25_BIT_OFFSET: u8 = 25;
	const FB25_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 25)
	pub fn get_fb25() -> u8 { ::read(REGISTER_ADDRESS, FB25_BIT_OFFSET, FB25_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 25)
	pub fn set_fb25(value: u8) { ::write(REGISTER_ADDRESS, FB25_BIT_OFFSET, FB25_BIT_WIDTH, value as u32); }

	const FB26_BIT_OFFSET: u8 = 26;
	const FB26_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 26)
	pub fn get_fb26() -> u8 { ::read(REGISTER_ADDRESS, FB26_BIT_OFFSET, FB26_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 26)
	pub fn set_fb26(value: u8) { ::write(REGISTER_ADDRESS, FB26_BIT_OFFSET, FB26_BIT_WIDTH, value as u32); }

	const FB27_BIT_OFFSET: u8 = 27;
	const FB27_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 27)
	pub fn get_fb27() -> u8 { ::read(REGISTER_ADDRESS, FB27_BIT_OFFSET, FB27_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 27)
	pub fn set_fb27(value: u8) { ::write(REGISTER_ADDRESS, FB27_BIT_OFFSET, FB27_BIT_WIDTH, value as u32); }

	const FB28_BIT_OFFSET: u8 = 28;
	const FB28_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 28)
	pub fn get_fb28() -> u8 { ::read(REGISTER_ADDRESS, FB28_BIT_OFFSET, FB28_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 28)
	pub fn set_fb28(value: u8) { ::write(REGISTER_ADDRESS, FB28_BIT_OFFSET, FB28_BIT_WIDTH, value as u32); }

	const FB29_BIT_OFFSET: u8 = 29;
	const FB29_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 29)
	pub fn get_fb29() -> u8 { ::read(REGISTER_ADDRESS, FB29_BIT_OFFSET, FB29_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 29)
	pub fn set_fb29(value: u8) { ::write(REGISTER_ADDRESS, FB29_BIT_OFFSET, FB29_BIT_WIDTH, value as u32); }

	const FB30_BIT_OFFSET: u8 = 30;
	const FB30_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 30)
	pub fn get_fb30() -> u8 { ::read(REGISTER_ADDRESS, FB30_BIT_OFFSET, FB30_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 30)
	pub fn set_fb30(value: u8) { ::write(REGISTER_ADDRESS, FB30_BIT_OFFSET, FB30_BIT_WIDTH, value as u32); }

	const FB31_BIT_OFFSET: u8 = 31;
	const FB31_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 31)
	pub fn get_fb31() -> u8 { ::read(REGISTER_ADDRESS, FB31_BIT_OFFSET, FB31_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 31)
	pub fn set_fb31(value: u8) { ::write(REGISTER_ADDRESS, FB31_BIT_OFFSET, FB31_BIT_WIDTH, value as u32); }
}
/// Filter bank 19 register 2
/// Size: 0x20 bits
pub mod f19r2 {
	const REGISTER_ADDRESS_OFFSET: u32 = 0x2DC;
	const REGISTER_ADDRESS: u32 = super::BASE_ADDRESS + REGISTER_ADDRESS_OFFSET;

	const FB0_BIT_OFFSET: u8 = 0;
	const FB0_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 0)
	pub fn get_fb0() -> u8 { ::read(REGISTER_ADDRESS, FB0_BIT_OFFSET, FB0_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 0)
	pub fn set_fb0(value: u8) { ::write(REGISTER_ADDRESS, FB0_BIT_OFFSET, FB0_BIT_WIDTH, value as u32); }

	const FB1_BIT_OFFSET: u8 = 1;
	const FB1_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 1)
	pub fn get_fb1() -> u8 { ::read(REGISTER_ADDRESS, FB1_BIT_OFFSET, FB1_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 1)
	pub fn set_fb1(value: u8) { ::write(REGISTER_ADDRESS, FB1_BIT_OFFSET, FB1_BIT_WIDTH, value as u32); }

	const FB2_BIT_OFFSET: u8 = 2;
	const FB2_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 2)
	pub fn get_fb2() -> u8 { ::read(REGISTER_ADDRESS, FB2_BIT_OFFSET, FB2_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 2)
	pub fn set_fb2(value: u8) { ::write(REGISTER_ADDRESS, FB2_BIT_OFFSET, FB2_BIT_WIDTH, value as u32); }

	const FB3_BIT_OFFSET: u8 = 3;
	const FB3_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 3)
	pub fn get_fb3() -> u8 { ::read(REGISTER_ADDRESS, FB3_BIT_OFFSET, FB3_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 3)
	pub fn set_fb3(value: u8) { ::write(REGISTER_ADDRESS, FB3_BIT_OFFSET, FB3_BIT_WIDTH, value as u32); }

	const FB4_BIT_OFFSET: u8 = 4;
	const FB4_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 4)
	pub fn get_fb4() -> u8 { ::read(REGISTER_ADDRESS, FB4_BIT_OFFSET, FB4_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 4)
	pub fn set_fb4(value: u8) { ::write(REGISTER_ADDRESS, FB4_BIT_OFFSET, FB4_BIT_WIDTH, value as u32); }

	const FB5_BIT_OFFSET: u8 = 5;
	const FB5_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 5)
	pub fn get_fb5() -> u8 { ::read(REGISTER_ADDRESS, FB5_BIT_OFFSET, FB5_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 5)
	pub fn set_fb5(value: u8) { ::write(REGISTER_ADDRESS, FB5_BIT_OFFSET, FB5_BIT_WIDTH, value as u32); }

	const FB6_BIT_OFFSET: u8 = 6;
	const FB6_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 6)
	pub fn get_fb6() -> u8 { ::read(REGISTER_ADDRESS, FB6_BIT_OFFSET, FB6_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 6)
	pub fn set_fb6(value: u8) { ::write(REGISTER_ADDRESS, FB6_BIT_OFFSET, FB6_BIT_WIDTH, value as u32); }

	const FB7_BIT_OFFSET: u8 = 7;
	const FB7_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 7)
	pub fn get_fb7() -> u8 { ::read(REGISTER_ADDRESS, FB7_BIT_OFFSET, FB7_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 7)
	pub fn set_fb7(value: u8) { ::write(REGISTER_ADDRESS, FB7_BIT_OFFSET, FB7_BIT_WIDTH, value as u32); }

	const FB8_BIT_OFFSET: u8 = 8;
	const FB8_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 8)
	pub fn get_fb8() -> u8 { ::read(REGISTER_ADDRESS, FB8_BIT_OFFSET, FB8_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 8)
	pub fn set_fb8(value: u8) { ::write(REGISTER_ADDRESS, FB8_BIT_OFFSET, FB8_BIT_WIDTH, value as u32); }

	const FB9_BIT_OFFSET: u8 = 9;
	const FB9_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 9)
	pub fn get_fb9() -> u8 { ::read(REGISTER_ADDRESS, FB9_BIT_OFFSET, FB9_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 9)
	pub fn set_fb9(value: u8) { ::write(REGISTER_ADDRESS, FB9_BIT_OFFSET, FB9_BIT_WIDTH, value as u32); }

	const FB10_BIT_OFFSET: u8 = 10;
	const FB10_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 10)
	pub fn get_fb10() -> u8 { ::read(REGISTER_ADDRESS, FB10_BIT_OFFSET, FB10_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 10)
	pub fn set_fb10(value: u8) { ::write(REGISTER_ADDRESS, FB10_BIT_OFFSET, FB10_BIT_WIDTH, value as u32); }

	const FB11_BIT_OFFSET: u8 = 11;
	const FB11_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 11)
	pub fn get_fb11() -> u8 { ::read(REGISTER_ADDRESS, FB11_BIT_OFFSET, FB11_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 11)
	pub fn set_fb11(value: u8) { ::write(REGISTER_ADDRESS, FB11_BIT_OFFSET, FB11_BIT_WIDTH, value as u32); }

	const FB12_BIT_OFFSET: u8 = 12;
	const FB12_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 12)
	pub fn get_fb12() -> u8 { ::read(REGISTER_ADDRESS, FB12_BIT_OFFSET, FB12_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 12)
	pub fn set_fb12(value: u8) { ::write(REGISTER_ADDRESS, FB12_BIT_OFFSET, FB12_BIT_WIDTH, value as u32); }

	const FB13_BIT_OFFSET: u8 = 13;
	const FB13_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 13)
	pub fn get_fb13() -> u8 { ::read(REGISTER_ADDRESS, FB13_BIT_OFFSET, FB13_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 13)
	pub fn set_fb13(value: u8) { ::write(REGISTER_ADDRESS, FB13_BIT_OFFSET, FB13_BIT_WIDTH, value as u32); }

	const FB14_BIT_OFFSET: u8 = 14;
	const FB14_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 14)
	pub fn get_fb14() -> u8 { ::read(REGISTER_ADDRESS, FB14_BIT_OFFSET, FB14_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 14)
	pub fn set_fb14(value: u8) { ::write(REGISTER_ADDRESS, FB14_BIT_OFFSET, FB14_BIT_WIDTH, value as u32); }

	const FB15_BIT_OFFSET: u8 = 15;
	const FB15_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 15)
	pub fn get_fb15() -> u8 { ::read(REGISTER_ADDRESS, FB15_BIT_OFFSET, FB15_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 15)
	pub fn set_fb15(value: u8) { ::write(REGISTER_ADDRESS, FB15_BIT_OFFSET, FB15_BIT_WIDTH, value as u32); }

	const FB16_BIT_OFFSET: u8 = 16;
	const FB16_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 16)
	pub fn get_fb16() -> u8 { ::read(REGISTER_ADDRESS, FB16_BIT_OFFSET, FB16_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 16)
	pub fn set_fb16(value: u8) { ::write(REGISTER_ADDRESS, FB16_BIT_OFFSET, FB16_BIT_WIDTH, value as u32); }

	const FB17_BIT_OFFSET: u8 = 17;
	const FB17_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 17)
	pub fn get_fb17() -> u8 { ::read(REGISTER_ADDRESS, FB17_BIT_OFFSET, FB17_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 17)
	pub fn set_fb17(value: u8) { ::write(REGISTER_ADDRESS, FB17_BIT_OFFSET, FB17_BIT_WIDTH, value as u32); }

	const FB18_BIT_OFFSET: u8 = 18;
	const FB18_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 18)
	pub fn get_fb18() -> u8 { ::read(REGISTER_ADDRESS, FB18_BIT_OFFSET, FB18_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 18)
	pub fn set_fb18(value: u8) { ::write(REGISTER_ADDRESS, FB18_BIT_OFFSET, FB18_BIT_WIDTH, value as u32); }

	const FB19_BIT_OFFSET: u8 = 19;
	const FB19_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 19)
	pub fn get_fb19() -> u8 { ::read(REGISTER_ADDRESS, FB19_BIT_OFFSET, FB19_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 19)
	pub fn set_fb19(value: u8) { ::write(REGISTER_ADDRESS, FB19_BIT_OFFSET, FB19_BIT_WIDTH, value as u32); }

	const FB20_BIT_OFFSET: u8 = 20;
	const FB20_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 20)
	pub fn get_fb20() -> u8 { ::read(REGISTER_ADDRESS, FB20_BIT_OFFSET, FB20_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 20)
	pub fn set_fb20(value: u8) { ::write(REGISTER_ADDRESS, FB20_BIT_OFFSET, FB20_BIT_WIDTH, value as u32); }

	const FB21_BIT_OFFSET: u8 = 21;
	const FB21_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 21)
	pub fn get_fb21() -> u8 { ::read(REGISTER_ADDRESS, FB21_BIT_OFFSET, FB21_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 21)
	pub fn set_fb21(value: u8) { ::write(REGISTER_ADDRESS, FB21_BIT_OFFSET, FB21_BIT_WIDTH, value as u32); }

	const FB22_BIT_OFFSET: u8 = 22;
	const FB22_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 22)
	pub fn get_fb22() -> u8 { ::read(REGISTER_ADDRESS, FB22_BIT_OFFSET, FB22_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 22)
	pub fn set_fb22(value: u8) { ::write(REGISTER_ADDRESS, FB22_BIT_OFFSET, FB22_BIT_WIDTH, value as u32); }

	const FB23_BIT_OFFSET: u8 = 23;
	const FB23_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 23)
	pub fn get_fb23() -> u8 { ::read(REGISTER_ADDRESS, FB23_BIT_OFFSET, FB23_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 23)
	pub fn set_fb23(value: u8) { ::write(REGISTER_ADDRESS, FB23_BIT_OFFSET, FB23_BIT_WIDTH, value as u32); }

	const FB24_BIT_OFFSET: u8 = 24;
	const FB24_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 24)
	pub fn get_fb24() -> u8 { ::read(REGISTER_ADDRESS, FB24_BIT_OFFSET, FB24_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 24)
	pub fn set_fb24(value: u8) { ::write(REGISTER_ADDRESS, FB24_BIT_OFFSET, FB24_BIT_WIDTH, value as u32); }

	const FB25_BIT_OFFSET: u8 = 25;
	const FB25_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 25)
	pub fn get_fb25() -> u8 { ::read(REGISTER_ADDRESS, FB25_BIT_OFFSET, FB25_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 25)
	pub fn set_fb25(value: u8) { ::write(REGISTER_ADDRESS, FB25_BIT_OFFSET, FB25_BIT_WIDTH, value as u32); }

	const FB26_BIT_OFFSET: u8 = 26;
	const FB26_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 26)
	pub fn get_fb26() -> u8 { ::read(REGISTER_ADDRESS, FB26_BIT_OFFSET, FB26_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 26)
	pub fn set_fb26(value: u8) { ::write(REGISTER_ADDRESS, FB26_BIT_OFFSET, FB26_BIT_WIDTH, value as u32); }

	const FB27_BIT_OFFSET: u8 = 27;
	const FB27_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 27)
	pub fn get_fb27() -> u8 { ::read(REGISTER_ADDRESS, FB27_BIT_OFFSET, FB27_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 27)
	pub fn set_fb27(value: u8) { ::write(REGISTER_ADDRESS, FB27_BIT_OFFSET, FB27_BIT_WIDTH, value as u32); }

	const FB28_BIT_OFFSET: u8 = 28;
	const FB28_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 28)
	pub fn get_fb28() -> u8 { ::read(REGISTER_ADDRESS, FB28_BIT_OFFSET, FB28_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 28)
	pub fn set_fb28(value: u8) { ::write(REGISTER_ADDRESS, FB28_BIT_OFFSET, FB28_BIT_WIDTH, value as u32); }

	const FB29_BIT_OFFSET: u8 = 29;
	const FB29_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 29)
	pub fn get_fb29() -> u8 { ::read(REGISTER_ADDRESS, FB29_BIT_OFFSET, FB29_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 29)
	pub fn set_fb29(value: u8) { ::write(REGISTER_ADDRESS, FB29_BIT_OFFSET, FB29_BIT_WIDTH, value as u32); }

	const FB30_BIT_OFFSET: u8 = 30;
	const FB30_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 30)
	pub fn get_fb30() -> u8 { ::read(REGISTER_ADDRESS, FB30_BIT_OFFSET, FB30_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 30)
	pub fn set_fb30(value: u8) { ::write(REGISTER_ADDRESS, FB30_BIT_OFFSET, FB30_BIT_WIDTH, value as u32); }

	const FB31_BIT_OFFSET: u8 = 31;
	const FB31_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 31)
	pub fn get_fb31() -> u8 { ::read(REGISTER_ADDRESS, FB31_BIT_OFFSET, FB31_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 31)
	pub fn set_fb31(value: u8) { ::write(REGISTER_ADDRESS, FB31_BIT_OFFSET, FB31_BIT_WIDTH, value as u32); }
}
/// Filter bank 20 register 1
/// Size: 0x20 bits
pub mod f20r1 {
	const REGISTER_ADDRESS_OFFSET: u32 = 0x2E0;
	const REGISTER_ADDRESS: u32 = super::BASE_ADDRESS + REGISTER_ADDRESS_OFFSET;

	const FB0_BIT_OFFSET: u8 = 0;
	const FB0_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 0)
	pub fn get_fb0() -> u8 { ::read(REGISTER_ADDRESS, FB0_BIT_OFFSET, FB0_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 0)
	pub fn set_fb0(value: u8) { ::write(REGISTER_ADDRESS, FB0_BIT_OFFSET, FB0_BIT_WIDTH, value as u32); }

	const FB1_BIT_OFFSET: u8 = 1;
	const FB1_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 1)
	pub fn get_fb1() -> u8 { ::read(REGISTER_ADDRESS, FB1_BIT_OFFSET, FB1_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 1)
	pub fn set_fb1(value: u8) { ::write(REGISTER_ADDRESS, FB1_BIT_OFFSET, FB1_BIT_WIDTH, value as u32); }

	const FB2_BIT_OFFSET: u8 = 2;
	const FB2_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 2)
	pub fn get_fb2() -> u8 { ::read(REGISTER_ADDRESS, FB2_BIT_OFFSET, FB2_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 2)
	pub fn set_fb2(value: u8) { ::write(REGISTER_ADDRESS, FB2_BIT_OFFSET, FB2_BIT_WIDTH, value as u32); }

	const FB3_BIT_OFFSET: u8 = 3;
	const FB3_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 3)
	pub fn get_fb3() -> u8 { ::read(REGISTER_ADDRESS, FB3_BIT_OFFSET, FB3_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 3)
	pub fn set_fb3(value: u8) { ::write(REGISTER_ADDRESS, FB3_BIT_OFFSET, FB3_BIT_WIDTH, value as u32); }

	const FB4_BIT_OFFSET: u8 = 4;
	const FB4_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 4)
	pub fn get_fb4() -> u8 { ::read(REGISTER_ADDRESS, FB4_BIT_OFFSET, FB4_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 4)
	pub fn set_fb4(value: u8) { ::write(REGISTER_ADDRESS, FB4_BIT_OFFSET, FB4_BIT_WIDTH, value as u32); }

	const FB5_BIT_OFFSET: u8 = 5;
	const FB5_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 5)
	pub fn get_fb5() -> u8 { ::read(REGISTER_ADDRESS, FB5_BIT_OFFSET, FB5_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 5)
	pub fn set_fb5(value: u8) { ::write(REGISTER_ADDRESS, FB5_BIT_OFFSET, FB5_BIT_WIDTH, value as u32); }

	const FB6_BIT_OFFSET: u8 = 6;
	const FB6_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 6)
	pub fn get_fb6() -> u8 { ::read(REGISTER_ADDRESS, FB6_BIT_OFFSET, FB6_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 6)
	pub fn set_fb6(value: u8) { ::write(REGISTER_ADDRESS, FB6_BIT_OFFSET, FB6_BIT_WIDTH, value as u32); }

	const FB7_BIT_OFFSET: u8 = 7;
	const FB7_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 7)
	pub fn get_fb7() -> u8 { ::read(REGISTER_ADDRESS, FB7_BIT_OFFSET, FB7_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 7)
	pub fn set_fb7(value: u8) { ::write(REGISTER_ADDRESS, FB7_BIT_OFFSET, FB7_BIT_WIDTH, value as u32); }

	const FB8_BIT_OFFSET: u8 = 8;
	const FB8_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 8)
	pub fn get_fb8() -> u8 { ::read(REGISTER_ADDRESS, FB8_BIT_OFFSET, FB8_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 8)
	pub fn set_fb8(value: u8) { ::write(REGISTER_ADDRESS, FB8_BIT_OFFSET, FB8_BIT_WIDTH, value as u32); }

	const FB9_BIT_OFFSET: u8 = 9;
	const FB9_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 9)
	pub fn get_fb9() -> u8 { ::read(REGISTER_ADDRESS, FB9_BIT_OFFSET, FB9_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 9)
	pub fn set_fb9(value: u8) { ::write(REGISTER_ADDRESS, FB9_BIT_OFFSET, FB9_BIT_WIDTH, value as u32); }

	const FB10_BIT_OFFSET: u8 = 10;
	const FB10_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 10)
	pub fn get_fb10() -> u8 { ::read(REGISTER_ADDRESS, FB10_BIT_OFFSET, FB10_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 10)
	pub fn set_fb10(value: u8) { ::write(REGISTER_ADDRESS, FB10_BIT_OFFSET, FB10_BIT_WIDTH, value as u32); }

	const FB11_BIT_OFFSET: u8 = 11;
	const FB11_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 11)
	pub fn get_fb11() -> u8 { ::read(REGISTER_ADDRESS, FB11_BIT_OFFSET, FB11_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 11)
	pub fn set_fb11(value: u8) { ::write(REGISTER_ADDRESS, FB11_BIT_OFFSET, FB11_BIT_WIDTH, value as u32); }

	const FB12_BIT_OFFSET: u8 = 12;
	const FB12_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 12)
	pub fn get_fb12() -> u8 { ::read(REGISTER_ADDRESS, FB12_BIT_OFFSET, FB12_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 12)
	pub fn set_fb12(value: u8) { ::write(REGISTER_ADDRESS, FB12_BIT_OFFSET, FB12_BIT_WIDTH, value as u32); }

	const FB13_BIT_OFFSET: u8 = 13;
	const FB13_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 13)
	pub fn get_fb13() -> u8 { ::read(REGISTER_ADDRESS, FB13_BIT_OFFSET, FB13_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 13)
	pub fn set_fb13(value: u8) { ::write(REGISTER_ADDRESS, FB13_BIT_OFFSET, FB13_BIT_WIDTH, value as u32); }

	const FB14_BIT_OFFSET: u8 = 14;
	const FB14_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 14)
	pub fn get_fb14() -> u8 { ::read(REGISTER_ADDRESS, FB14_BIT_OFFSET, FB14_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 14)
	pub fn set_fb14(value: u8) { ::write(REGISTER_ADDRESS, FB14_BIT_OFFSET, FB14_BIT_WIDTH, value as u32); }

	const FB15_BIT_OFFSET: u8 = 15;
	const FB15_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 15)
	pub fn get_fb15() -> u8 { ::read(REGISTER_ADDRESS, FB15_BIT_OFFSET, FB15_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 15)
	pub fn set_fb15(value: u8) { ::write(REGISTER_ADDRESS, FB15_BIT_OFFSET, FB15_BIT_WIDTH, value as u32); }

	const FB16_BIT_OFFSET: u8 = 16;
	const FB16_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 16)
	pub fn get_fb16() -> u8 { ::read(REGISTER_ADDRESS, FB16_BIT_OFFSET, FB16_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 16)
	pub fn set_fb16(value: u8) { ::write(REGISTER_ADDRESS, FB16_BIT_OFFSET, FB16_BIT_WIDTH, value as u32); }

	const FB17_BIT_OFFSET: u8 = 17;
	const FB17_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 17)
	pub fn get_fb17() -> u8 { ::read(REGISTER_ADDRESS, FB17_BIT_OFFSET, FB17_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 17)
	pub fn set_fb17(value: u8) { ::write(REGISTER_ADDRESS, FB17_BIT_OFFSET, FB17_BIT_WIDTH, value as u32); }

	const FB18_BIT_OFFSET: u8 = 18;
	const FB18_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 18)
	pub fn get_fb18() -> u8 { ::read(REGISTER_ADDRESS, FB18_BIT_OFFSET, FB18_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 18)
	pub fn set_fb18(value: u8) { ::write(REGISTER_ADDRESS, FB18_BIT_OFFSET, FB18_BIT_WIDTH, value as u32); }

	const FB19_BIT_OFFSET: u8 = 19;
	const FB19_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 19)
	pub fn get_fb19() -> u8 { ::read(REGISTER_ADDRESS, FB19_BIT_OFFSET, FB19_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 19)
	pub fn set_fb19(value: u8) { ::write(REGISTER_ADDRESS, FB19_BIT_OFFSET, FB19_BIT_WIDTH, value as u32); }

	const FB20_BIT_OFFSET: u8 = 20;
	const FB20_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 20)
	pub fn get_fb20() -> u8 { ::read(REGISTER_ADDRESS, FB20_BIT_OFFSET, FB20_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 20)
	pub fn set_fb20(value: u8) { ::write(REGISTER_ADDRESS, FB20_BIT_OFFSET, FB20_BIT_WIDTH, value as u32); }

	const FB21_BIT_OFFSET: u8 = 21;
	const FB21_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 21)
	pub fn get_fb21() -> u8 { ::read(REGISTER_ADDRESS, FB21_BIT_OFFSET, FB21_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 21)
	pub fn set_fb21(value: u8) { ::write(REGISTER_ADDRESS, FB21_BIT_OFFSET, FB21_BIT_WIDTH, value as u32); }

	const FB22_BIT_OFFSET: u8 = 22;
	const FB22_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 22)
	pub fn get_fb22() -> u8 { ::read(REGISTER_ADDRESS, FB22_BIT_OFFSET, FB22_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 22)
	pub fn set_fb22(value: u8) { ::write(REGISTER_ADDRESS, FB22_BIT_OFFSET, FB22_BIT_WIDTH, value as u32); }

	const FB23_BIT_OFFSET: u8 = 23;
	const FB23_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 23)
	pub fn get_fb23() -> u8 { ::read(REGISTER_ADDRESS, FB23_BIT_OFFSET, FB23_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 23)
	pub fn set_fb23(value: u8) { ::write(REGISTER_ADDRESS, FB23_BIT_OFFSET, FB23_BIT_WIDTH, value as u32); }

	const FB24_BIT_OFFSET: u8 = 24;
	const FB24_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 24)
	pub fn get_fb24() -> u8 { ::read(REGISTER_ADDRESS, FB24_BIT_OFFSET, FB24_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 24)
	pub fn set_fb24(value: u8) { ::write(REGISTER_ADDRESS, FB24_BIT_OFFSET, FB24_BIT_WIDTH, value as u32); }

	const FB25_BIT_OFFSET: u8 = 25;
	const FB25_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 25)
	pub fn get_fb25() -> u8 { ::read(REGISTER_ADDRESS, FB25_BIT_OFFSET, FB25_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 25)
	pub fn set_fb25(value: u8) { ::write(REGISTER_ADDRESS, FB25_BIT_OFFSET, FB25_BIT_WIDTH, value as u32); }

	const FB26_BIT_OFFSET: u8 = 26;
	const FB26_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 26)
	pub fn get_fb26() -> u8 { ::read(REGISTER_ADDRESS, FB26_BIT_OFFSET, FB26_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 26)
	pub fn set_fb26(value: u8) { ::write(REGISTER_ADDRESS, FB26_BIT_OFFSET, FB26_BIT_WIDTH, value as u32); }

	const FB27_BIT_OFFSET: u8 = 27;
	const FB27_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 27)
	pub fn get_fb27() -> u8 { ::read(REGISTER_ADDRESS, FB27_BIT_OFFSET, FB27_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 27)
	pub fn set_fb27(value: u8) { ::write(REGISTER_ADDRESS, FB27_BIT_OFFSET, FB27_BIT_WIDTH, value as u32); }

	const FB28_BIT_OFFSET: u8 = 28;
	const FB28_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 28)
	pub fn get_fb28() -> u8 { ::read(REGISTER_ADDRESS, FB28_BIT_OFFSET, FB28_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 28)
	pub fn set_fb28(value: u8) { ::write(REGISTER_ADDRESS, FB28_BIT_OFFSET, FB28_BIT_WIDTH, value as u32); }

	const FB29_BIT_OFFSET: u8 = 29;
	const FB29_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 29)
	pub fn get_fb29() -> u8 { ::read(REGISTER_ADDRESS, FB29_BIT_OFFSET, FB29_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 29)
	pub fn set_fb29(value: u8) { ::write(REGISTER_ADDRESS, FB29_BIT_OFFSET, FB29_BIT_WIDTH, value as u32); }

	const FB30_BIT_OFFSET: u8 = 30;
	const FB30_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 30)
	pub fn get_fb30() -> u8 { ::read(REGISTER_ADDRESS, FB30_BIT_OFFSET, FB30_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 30)
	pub fn set_fb30(value: u8) { ::write(REGISTER_ADDRESS, FB30_BIT_OFFSET, FB30_BIT_WIDTH, value as u32); }

	const FB31_BIT_OFFSET: u8 = 31;
	const FB31_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 31)
	pub fn get_fb31() -> u8 { ::read(REGISTER_ADDRESS, FB31_BIT_OFFSET, FB31_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 31)
	pub fn set_fb31(value: u8) { ::write(REGISTER_ADDRESS, FB31_BIT_OFFSET, FB31_BIT_WIDTH, value as u32); }
}
/// Filter bank 20 register 2
/// Size: 0x20 bits
pub mod f20r2 {
	const REGISTER_ADDRESS_OFFSET: u32 = 0x2E4;
	const REGISTER_ADDRESS: u32 = super::BASE_ADDRESS + REGISTER_ADDRESS_OFFSET;

	const FB0_BIT_OFFSET: u8 = 0;
	const FB0_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 0)
	pub fn get_fb0() -> u8 { ::read(REGISTER_ADDRESS, FB0_BIT_OFFSET, FB0_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 0)
	pub fn set_fb0(value: u8) { ::write(REGISTER_ADDRESS, FB0_BIT_OFFSET, FB0_BIT_WIDTH, value as u32); }

	const FB1_BIT_OFFSET: u8 = 1;
	const FB1_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 1)
	pub fn get_fb1() -> u8 { ::read(REGISTER_ADDRESS, FB1_BIT_OFFSET, FB1_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 1)
	pub fn set_fb1(value: u8) { ::write(REGISTER_ADDRESS, FB1_BIT_OFFSET, FB1_BIT_WIDTH, value as u32); }

	const FB2_BIT_OFFSET: u8 = 2;
	const FB2_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 2)
	pub fn get_fb2() -> u8 { ::read(REGISTER_ADDRESS, FB2_BIT_OFFSET, FB2_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 2)
	pub fn set_fb2(value: u8) { ::write(REGISTER_ADDRESS, FB2_BIT_OFFSET, FB2_BIT_WIDTH, value as u32); }

	const FB3_BIT_OFFSET: u8 = 3;
	const FB3_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 3)
	pub fn get_fb3() -> u8 { ::read(REGISTER_ADDRESS, FB3_BIT_OFFSET, FB3_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 3)
	pub fn set_fb3(value: u8) { ::write(REGISTER_ADDRESS, FB3_BIT_OFFSET, FB3_BIT_WIDTH, value as u32); }

	const FB4_BIT_OFFSET: u8 = 4;
	const FB4_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 4)
	pub fn get_fb4() -> u8 { ::read(REGISTER_ADDRESS, FB4_BIT_OFFSET, FB4_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 4)
	pub fn set_fb4(value: u8) { ::write(REGISTER_ADDRESS, FB4_BIT_OFFSET, FB4_BIT_WIDTH, value as u32); }

	const FB5_BIT_OFFSET: u8 = 5;
	const FB5_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 5)
	pub fn get_fb5() -> u8 { ::read(REGISTER_ADDRESS, FB5_BIT_OFFSET, FB5_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 5)
	pub fn set_fb5(value: u8) { ::write(REGISTER_ADDRESS, FB5_BIT_OFFSET, FB5_BIT_WIDTH, value as u32); }

	const FB6_BIT_OFFSET: u8 = 6;
	const FB6_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 6)
	pub fn get_fb6() -> u8 { ::read(REGISTER_ADDRESS, FB6_BIT_OFFSET, FB6_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 6)
	pub fn set_fb6(value: u8) { ::write(REGISTER_ADDRESS, FB6_BIT_OFFSET, FB6_BIT_WIDTH, value as u32); }

	const FB7_BIT_OFFSET: u8 = 7;
	const FB7_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 7)
	pub fn get_fb7() -> u8 { ::read(REGISTER_ADDRESS, FB7_BIT_OFFSET, FB7_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 7)
	pub fn set_fb7(value: u8) { ::write(REGISTER_ADDRESS, FB7_BIT_OFFSET, FB7_BIT_WIDTH, value as u32); }

	const FB8_BIT_OFFSET: u8 = 8;
	const FB8_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 8)
	pub fn get_fb8() -> u8 { ::read(REGISTER_ADDRESS, FB8_BIT_OFFSET, FB8_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 8)
	pub fn set_fb8(value: u8) { ::write(REGISTER_ADDRESS, FB8_BIT_OFFSET, FB8_BIT_WIDTH, value as u32); }

	const FB9_BIT_OFFSET: u8 = 9;
	const FB9_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 9)
	pub fn get_fb9() -> u8 { ::read(REGISTER_ADDRESS, FB9_BIT_OFFSET, FB9_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 9)
	pub fn set_fb9(value: u8) { ::write(REGISTER_ADDRESS, FB9_BIT_OFFSET, FB9_BIT_WIDTH, value as u32); }

	const FB10_BIT_OFFSET: u8 = 10;
	const FB10_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 10)
	pub fn get_fb10() -> u8 { ::read(REGISTER_ADDRESS, FB10_BIT_OFFSET, FB10_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 10)
	pub fn set_fb10(value: u8) { ::write(REGISTER_ADDRESS, FB10_BIT_OFFSET, FB10_BIT_WIDTH, value as u32); }

	const FB11_BIT_OFFSET: u8 = 11;
	const FB11_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 11)
	pub fn get_fb11() -> u8 { ::read(REGISTER_ADDRESS, FB11_BIT_OFFSET, FB11_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 11)
	pub fn set_fb11(value: u8) { ::write(REGISTER_ADDRESS, FB11_BIT_OFFSET, FB11_BIT_WIDTH, value as u32); }

	const FB12_BIT_OFFSET: u8 = 12;
	const FB12_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 12)
	pub fn get_fb12() -> u8 { ::read(REGISTER_ADDRESS, FB12_BIT_OFFSET, FB12_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 12)
	pub fn set_fb12(value: u8) { ::write(REGISTER_ADDRESS, FB12_BIT_OFFSET, FB12_BIT_WIDTH, value as u32); }

	const FB13_BIT_OFFSET: u8 = 13;
	const FB13_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 13)
	pub fn get_fb13() -> u8 { ::read(REGISTER_ADDRESS, FB13_BIT_OFFSET, FB13_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 13)
	pub fn set_fb13(value: u8) { ::write(REGISTER_ADDRESS, FB13_BIT_OFFSET, FB13_BIT_WIDTH, value as u32); }

	const FB14_BIT_OFFSET: u8 = 14;
	const FB14_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 14)
	pub fn get_fb14() -> u8 { ::read(REGISTER_ADDRESS, FB14_BIT_OFFSET, FB14_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 14)
	pub fn set_fb14(value: u8) { ::write(REGISTER_ADDRESS, FB14_BIT_OFFSET, FB14_BIT_WIDTH, value as u32); }

	const FB15_BIT_OFFSET: u8 = 15;
	const FB15_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 15)
	pub fn get_fb15() -> u8 { ::read(REGISTER_ADDRESS, FB15_BIT_OFFSET, FB15_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 15)
	pub fn set_fb15(value: u8) { ::write(REGISTER_ADDRESS, FB15_BIT_OFFSET, FB15_BIT_WIDTH, value as u32); }

	const FB16_BIT_OFFSET: u8 = 16;
	const FB16_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 16)
	pub fn get_fb16() -> u8 { ::read(REGISTER_ADDRESS, FB16_BIT_OFFSET, FB16_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 16)
	pub fn set_fb16(value: u8) { ::write(REGISTER_ADDRESS, FB16_BIT_OFFSET, FB16_BIT_WIDTH, value as u32); }

	const FB17_BIT_OFFSET: u8 = 17;
	const FB17_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 17)
	pub fn get_fb17() -> u8 { ::read(REGISTER_ADDRESS, FB17_BIT_OFFSET, FB17_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 17)
	pub fn set_fb17(value: u8) { ::write(REGISTER_ADDRESS, FB17_BIT_OFFSET, FB17_BIT_WIDTH, value as u32); }

	const FB18_BIT_OFFSET: u8 = 18;
	const FB18_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 18)
	pub fn get_fb18() -> u8 { ::read(REGISTER_ADDRESS, FB18_BIT_OFFSET, FB18_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 18)
	pub fn set_fb18(value: u8) { ::write(REGISTER_ADDRESS, FB18_BIT_OFFSET, FB18_BIT_WIDTH, value as u32); }

	const FB19_BIT_OFFSET: u8 = 19;
	const FB19_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 19)
	pub fn get_fb19() -> u8 { ::read(REGISTER_ADDRESS, FB19_BIT_OFFSET, FB19_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 19)
	pub fn set_fb19(value: u8) { ::write(REGISTER_ADDRESS, FB19_BIT_OFFSET, FB19_BIT_WIDTH, value as u32); }

	const FB20_BIT_OFFSET: u8 = 20;
	const FB20_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 20)
	pub fn get_fb20() -> u8 { ::read(REGISTER_ADDRESS, FB20_BIT_OFFSET, FB20_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 20)
	pub fn set_fb20(value: u8) { ::write(REGISTER_ADDRESS, FB20_BIT_OFFSET, FB20_BIT_WIDTH, value as u32); }

	const FB21_BIT_OFFSET: u8 = 21;
	const FB21_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 21)
	pub fn get_fb21() -> u8 { ::read(REGISTER_ADDRESS, FB21_BIT_OFFSET, FB21_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 21)
	pub fn set_fb21(value: u8) { ::write(REGISTER_ADDRESS, FB21_BIT_OFFSET, FB21_BIT_WIDTH, value as u32); }

	const FB22_BIT_OFFSET: u8 = 22;
	const FB22_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 22)
	pub fn get_fb22() -> u8 { ::read(REGISTER_ADDRESS, FB22_BIT_OFFSET, FB22_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 22)
	pub fn set_fb22(value: u8) { ::write(REGISTER_ADDRESS, FB22_BIT_OFFSET, FB22_BIT_WIDTH, value as u32); }

	const FB23_BIT_OFFSET: u8 = 23;
	const FB23_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 23)
	pub fn get_fb23() -> u8 { ::read(REGISTER_ADDRESS, FB23_BIT_OFFSET, FB23_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 23)
	pub fn set_fb23(value: u8) { ::write(REGISTER_ADDRESS, FB23_BIT_OFFSET, FB23_BIT_WIDTH, value as u32); }

	const FB24_BIT_OFFSET: u8 = 24;
	const FB24_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 24)
	pub fn get_fb24() -> u8 { ::read(REGISTER_ADDRESS, FB24_BIT_OFFSET, FB24_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 24)
	pub fn set_fb24(value: u8) { ::write(REGISTER_ADDRESS, FB24_BIT_OFFSET, FB24_BIT_WIDTH, value as u32); }

	const FB25_BIT_OFFSET: u8 = 25;
	const FB25_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 25)
	pub fn get_fb25() -> u8 { ::read(REGISTER_ADDRESS, FB25_BIT_OFFSET, FB25_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 25)
	pub fn set_fb25(value: u8) { ::write(REGISTER_ADDRESS, FB25_BIT_OFFSET, FB25_BIT_WIDTH, value as u32); }

	const FB26_BIT_OFFSET: u8 = 26;
	const FB26_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 26)
	pub fn get_fb26() -> u8 { ::read(REGISTER_ADDRESS, FB26_BIT_OFFSET, FB26_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 26)
	pub fn set_fb26(value: u8) { ::write(REGISTER_ADDRESS, FB26_BIT_OFFSET, FB26_BIT_WIDTH, value as u32); }

	const FB27_BIT_OFFSET: u8 = 27;
	const FB27_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 27)
	pub fn get_fb27() -> u8 { ::read(REGISTER_ADDRESS, FB27_BIT_OFFSET, FB27_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 27)
	pub fn set_fb27(value: u8) { ::write(REGISTER_ADDRESS, FB27_BIT_OFFSET, FB27_BIT_WIDTH, value as u32); }

	const FB28_BIT_OFFSET: u8 = 28;
	const FB28_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 28)
	pub fn get_fb28() -> u8 { ::read(REGISTER_ADDRESS, FB28_BIT_OFFSET, FB28_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 28)
	pub fn set_fb28(value: u8) { ::write(REGISTER_ADDRESS, FB28_BIT_OFFSET, FB28_BIT_WIDTH, value as u32); }

	const FB29_BIT_OFFSET: u8 = 29;
	const FB29_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 29)
	pub fn get_fb29() -> u8 { ::read(REGISTER_ADDRESS, FB29_BIT_OFFSET, FB29_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 29)
	pub fn set_fb29(value: u8) { ::write(REGISTER_ADDRESS, FB29_BIT_OFFSET, FB29_BIT_WIDTH, value as u32); }

	const FB30_BIT_OFFSET: u8 = 30;
	const FB30_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 30)
	pub fn get_fb30() -> u8 { ::read(REGISTER_ADDRESS, FB30_BIT_OFFSET, FB30_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 30)
	pub fn set_fb30(value: u8) { ::write(REGISTER_ADDRESS, FB30_BIT_OFFSET, FB30_BIT_WIDTH, value as u32); }

	const FB31_BIT_OFFSET: u8 = 31;
	const FB31_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 31)
	pub fn get_fb31() -> u8 { ::read(REGISTER_ADDRESS, FB31_BIT_OFFSET, FB31_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 31)
	pub fn set_fb31(value: u8) { ::write(REGISTER_ADDRESS, FB31_BIT_OFFSET, FB31_BIT_WIDTH, value as u32); }
}
/// Filter bank 21 register 1
/// Size: 0x20 bits
pub mod f21r1 {
	const REGISTER_ADDRESS_OFFSET: u32 = 0x2E8;
	const REGISTER_ADDRESS: u32 = super::BASE_ADDRESS + REGISTER_ADDRESS_OFFSET;

	const FB0_BIT_OFFSET: u8 = 0;
	const FB0_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 0)
	pub fn get_fb0() -> u8 { ::read(REGISTER_ADDRESS, FB0_BIT_OFFSET, FB0_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 0)
	pub fn set_fb0(value: u8) { ::write(REGISTER_ADDRESS, FB0_BIT_OFFSET, FB0_BIT_WIDTH, value as u32); }

	const FB1_BIT_OFFSET: u8 = 1;
	const FB1_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 1)
	pub fn get_fb1() -> u8 { ::read(REGISTER_ADDRESS, FB1_BIT_OFFSET, FB1_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 1)
	pub fn set_fb1(value: u8) { ::write(REGISTER_ADDRESS, FB1_BIT_OFFSET, FB1_BIT_WIDTH, value as u32); }

	const FB2_BIT_OFFSET: u8 = 2;
	const FB2_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 2)
	pub fn get_fb2() -> u8 { ::read(REGISTER_ADDRESS, FB2_BIT_OFFSET, FB2_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 2)
	pub fn set_fb2(value: u8) { ::write(REGISTER_ADDRESS, FB2_BIT_OFFSET, FB2_BIT_WIDTH, value as u32); }

	const FB3_BIT_OFFSET: u8 = 3;
	const FB3_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 3)
	pub fn get_fb3() -> u8 { ::read(REGISTER_ADDRESS, FB3_BIT_OFFSET, FB3_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 3)
	pub fn set_fb3(value: u8) { ::write(REGISTER_ADDRESS, FB3_BIT_OFFSET, FB3_BIT_WIDTH, value as u32); }

	const FB4_BIT_OFFSET: u8 = 4;
	const FB4_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 4)
	pub fn get_fb4() -> u8 { ::read(REGISTER_ADDRESS, FB4_BIT_OFFSET, FB4_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 4)
	pub fn set_fb4(value: u8) { ::write(REGISTER_ADDRESS, FB4_BIT_OFFSET, FB4_BIT_WIDTH, value as u32); }

	const FB5_BIT_OFFSET: u8 = 5;
	const FB5_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 5)
	pub fn get_fb5() -> u8 { ::read(REGISTER_ADDRESS, FB5_BIT_OFFSET, FB5_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 5)
	pub fn set_fb5(value: u8) { ::write(REGISTER_ADDRESS, FB5_BIT_OFFSET, FB5_BIT_WIDTH, value as u32); }

	const FB6_BIT_OFFSET: u8 = 6;
	const FB6_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 6)
	pub fn get_fb6() -> u8 { ::read(REGISTER_ADDRESS, FB6_BIT_OFFSET, FB6_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 6)
	pub fn set_fb6(value: u8) { ::write(REGISTER_ADDRESS, FB6_BIT_OFFSET, FB6_BIT_WIDTH, value as u32); }

	const FB7_BIT_OFFSET: u8 = 7;
	const FB7_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 7)
	pub fn get_fb7() -> u8 { ::read(REGISTER_ADDRESS, FB7_BIT_OFFSET, FB7_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 7)
	pub fn set_fb7(value: u8) { ::write(REGISTER_ADDRESS, FB7_BIT_OFFSET, FB7_BIT_WIDTH, value as u32); }

	const FB8_BIT_OFFSET: u8 = 8;
	const FB8_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 8)
	pub fn get_fb8() -> u8 { ::read(REGISTER_ADDRESS, FB8_BIT_OFFSET, FB8_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 8)
	pub fn set_fb8(value: u8) { ::write(REGISTER_ADDRESS, FB8_BIT_OFFSET, FB8_BIT_WIDTH, value as u32); }

	const FB9_BIT_OFFSET: u8 = 9;
	const FB9_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 9)
	pub fn get_fb9() -> u8 { ::read(REGISTER_ADDRESS, FB9_BIT_OFFSET, FB9_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 9)
	pub fn set_fb9(value: u8) { ::write(REGISTER_ADDRESS, FB9_BIT_OFFSET, FB9_BIT_WIDTH, value as u32); }

	const FB10_BIT_OFFSET: u8 = 10;
	const FB10_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 10)
	pub fn get_fb10() -> u8 { ::read(REGISTER_ADDRESS, FB10_BIT_OFFSET, FB10_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 10)
	pub fn set_fb10(value: u8) { ::write(REGISTER_ADDRESS, FB10_BIT_OFFSET, FB10_BIT_WIDTH, value as u32); }

	const FB11_BIT_OFFSET: u8 = 11;
	const FB11_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 11)
	pub fn get_fb11() -> u8 { ::read(REGISTER_ADDRESS, FB11_BIT_OFFSET, FB11_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 11)
	pub fn set_fb11(value: u8) { ::write(REGISTER_ADDRESS, FB11_BIT_OFFSET, FB11_BIT_WIDTH, value as u32); }

	const FB12_BIT_OFFSET: u8 = 12;
	const FB12_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 12)
	pub fn get_fb12() -> u8 { ::read(REGISTER_ADDRESS, FB12_BIT_OFFSET, FB12_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 12)
	pub fn set_fb12(value: u8) { ::write(REGISTER_ADDRESS, FB12_BIT_OFFSET, FB12_BIT_WIDTH, value as u32); }

	const FB13_BIT_OFFSET: u8 = 13;
	const FB13_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 13)
	pub fn get_fb13() -> u8 { ::read(REGISTER_ADDRESS, FB13_BIT_OFFSET, FB13_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 13)
	pub fn set_fb13(value: u8) { ::write(REGISTER_ADDRESS, FB13_BIT_OFFSET, FB13_BIT_WIDTH, value as u32); }

	const FB14_BIT_OFFSET: u8 = 14;
	const FB14_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 14)
	pub fn get_fb14() -> u8 { ::read(REGISTER_ADDRESS, FB14_BIT_OFFSET, FB14_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 14)
	pub fn set_fb14(value: u8) { ::write(REGISTER_ADDRESS, FB14_BIT_OFFSET, FB14_BIT_WIDTH, value as u32); }

	const FB15_BIT_OFFSET: u8 = 15;
	const FB15_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 15)
	pub fn get_fb15() -> u8 { ::read(REGISTER_ADDRESS, FB15_BIT_OFFSET, FB15_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 15)
	pub fn set_fb15(value: u8) { ::write(REGISTER_ADDRESS, FB15_BIT_OFFSET, FB15_BIT_WIDTH, value as u32); }

	const FB16_BIT_OFFSET: u8 = 16;
	const FB16_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 16)
	pub fn get_fb16() -> u8 { ::read(REGISTER_ADDRESS, FB16_BIT_OFFSET, FB16_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 16)
	pub fn set_fb16(value: u8) { ::write(REGISTER_ADDRESS, FB16_BIT_OFFSET, FB16_BIT_WIDTH, value as u32); }

	const FB17_BIT_OFFSET: u8 = 17;
	const FB17_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 17)
	pub fn get_fb17() -> u8 { ::read(REGISTER_ADDRESS, FB17_BIT_OFFSET, FB17_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 17)
	pub fn set_fb17(value: u8) { ::write(REGISTER_ADDRESS, FB17_BIT_OFFSET, FB17_BIT_WIDTH, value as u32); }

	const FB18_BIT_OFFSET: u8 = 18;
	const FB18_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 18)
	pub fn get_fb18() -> u8 { ::read(REGISTER_ADDRESS, FB18_BIT_OFFSET, FB18_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 18)
	pub fn set_fb18(value: u8) { ::write(REGISTER_ADDRESS, FB18_BIT_OFFSET, FB18_BIT_WIDTH, value as u32); }

	const FB19_BIT_OFFSET: u8 = 19;
	const FB19_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 19)
	pub fn get_fb19() -> u8 { ::read(REGISTER_ADDRESS, FB19_BIT_OFFSET, FB19_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 19)
	pub fn set_fb19(value: u8) { ::write(REGISTER_ADDRESS, FB19_BIT_OFFSET, FB19_BIT_WIDTH, value as u32); }

	const FB20_BIT_OFFSET: u8 = 20;
	const FB20_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 20)
	pub fn get_fb20() -> u8 { ::read(REGISTER_ADDRESS, FB20_BIT_OFFSET, FB20_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 20)
	pub fn set_fb20(value: u8) { ::write(REGISTER_ADDRESS, FB20_BIT_OFFSET, FB20_BIT_WIDTH, value as u32); }

	const FB21_BIT_OFFSET: u8 = 21;
	const FB21_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 21)
	pub fn get_fb21() -> u8 { ::read(REGISTER_ADDRESS, FB21_BIT_OFFSET, FB21_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 21)
	pub fn set_fb21(value: u8) { ::write(REGISTER_ADDRESS, FB21_BIT_OFFSET, FB21_BIT_WIDTH, value as u32); }

	const FB22_BIT_OFFSET: u8 = 22;
	const FB22_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 22)
	pub fn get_fb22() -> u8 { ::read(REGISTER_ADDRESS, FB22_BIT_OFFSET, FB22_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 22)
	pub fn set_fb22(value: u8) { ::write(REGISTER_ADDRESS, FB22_BIT_OFFSET, FB22_BIT_WIDTH, value as u32); }

	const FB23_BIT_OFFSET: u8 = 23;
	const FB23_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 23)
	pub fn get_fb23() -> u8 { ::read(REGISTER_ADDRESS, FB23_BIT_OFFSET, FB23_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 23)
	pub fn set_fb23(value: u8) { ::write(REGISTER_ADDRESS, FB23_BIT_OFFSET, FB23_BIT_WIDTH, value as u32); }

	const FB24_BIT_OFFSET: u8 = 24;
	const FB24_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 24)
	pub fn get_fb24() -> u8 { ::read(REGISTER_ADDRESS, FB24_BIT_OFFSET, FB24_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 24)
	pub fn set_fb24(value: u8) { ::write(REGISTER_ADDRESS, FB24_BIT_OFFSET, FB24_BIT_WIDTH, value as u32); }

	const FB25_BIT_OFFSET: u8 = 25;
	const FB25_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 25)
	pub fn get_fb25() -> u8 { ::read(REGISTER_ADDRESS, FB25_BIT_OFFSET, FB25_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 25)
	pub fn set_fb25(value: u8) { ::write(REGISTER_ADDRESS, FB25_BIT_OFFSET, FB25_BIT_WIDTH, value as u32); }

	const FB26_BIT_OFFSET: u8 = 26;
	const FB26_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 26)
	pub fn get_fb26() -> u8 { ::read(REGISTER_ADDRESS, FB26_BIT_OFFSET, FB26_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 26)
	pub fn set_fb26(value: u8) { ::write(REGISTER_ADDRESS, FB26_BIT_OFFSET, FB26_BIT_WIDTH, value as u32); }

	const FB27_BIT_OFFSET: u8 = 27;
	const FB27_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 27)
	pub fn get_fb27() -> u8 { ::read(REGISTER_ADDRESS, FB27_BIT_OFFSET, FB27_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 27)
	pub fn set_fb27(value: u8) { ::write(REGISTER_ADDRESS, FB27_BIT_OFFSET, FB27_BIT_WIDTH, value as u32); }

	const FB28_BIT_OFFSET: u8 = 28;
	const FB28_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 28)
	pub fn get_fb28() -> u8 { ::read(REGISTER_ADDRESS, FB28_BIT_OFFSET, FB28_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 28)
	pub fn set_fb28(value: u8) { ::write(REGISTER_ADDRESS, FB28_BIT_OFFSET, FB28_BIT_WIDTH, value as u32); }

	const FB29_BIT_OFFSET: u8 = 29;
	const FB29_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 29)
	pub fn get_fb29() -> u8 { ::read(REGISTER_ADDRESS, FB29_BIT_OFFSET, FB29_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 29)
	pub fn set_fb29(value: u8) { ::write(REGISTER_ADDRESS, FB29_BIT_OFFSET, FB29_BIT_WIDTH, value as u32); }

	const FB30_BIT_OFFSET: u8 = 30;
	const FB30_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 30)
	pub fn get_fb30() -> u8 { ::read(REGISTER_ADDRESS, FB30_BIT_OFFSET, FB30_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 30)
	pub fn set_fb30(value: u8) { ::write(REGISTER_ADDRESS, FB30_BIT_OFFSET, FB30_BIT_WIDTH, value as u32); }

	const FB31_BIT_OFFSET: u8 = 31;
	const FB31_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 31)
	pub fn get_fb31() -> u8 { ::read(REGISTER_ADDRESS, FB31_BIT_OFFSET, FB31_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 31)
	pub fn set_fb31(value: u8) { ::write(REGISTER_ADDRESS, FB31_BIT_OFFSET, FB31_BIT_WIDTH, value as u32); }
}
/// Filter bank 21 register 2
/// Size: 0x20 bits
pub mod f21r2 {
	const REGISTER_ADDRESS_OFFSET: u32 = 0x2EC;
	const REGISTER_ADDRESS: u32 = super::BASE_ADDRESS + REGISTER_ADDRESS_OFFSET;

	const FB0_BIT_OFFSET: u8 = 0;
	const FB0_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 0)
	pub fn get_fb0() -> u8 { ::read(REGISTER_ADDRESS, FB0_BIT_OFFSET, FB0_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 0)
	pub fn set_fb0(value: u8) { ::write(REGISTER_ADDRESS, FB0_BIT_OFFSET, FB0_BIT_WIDTH, value as u32); }

	const FB1_BIT_OFFSET: u8 = 1;
	const FB1_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 1)
	pub fn get_fb1() -> u8 { ::read(REGISTER_ADDRESS, FB1_BIT_OFFSET, FB1_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 1)
	pub fn set_fb1(value: u8) { ::write(REGISTER_ADDRESS, FB1_BIT_OFFSET, FB1_BIT_WIDTH, value as u32); }

	const FB2_BIT_OFFSET: u8 = 2;
	const FB2_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 2)
	pub fn get_fb2() -> u8 { ::read(REGISTER_ADDRESS, FB2_BIT_OFFSET, FB2_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 2)
	pub fn set_fb2(value: u8) { ::write(REGISTER_ADDRESS, FB2_BIT_OFFSET, FB2_BIT_WIDTH, value as u32); }

	const FB3_BIT_OFFSET: u8 = 3;
	const FB3_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 3)
	pub fn get_fb3() -> u8 { ::read(REGISTER_ADDRESS, FB3_BIT_OFFSET, FB3_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 3)
	pub fn set_fb3(value: u8) { ::write(REGISTER_ADDRESS, FB3_BIT_OFFSET, FB3_BIT_WIDTH, value as u32); }

	const FB4_BIT_OFFSET: u8 = 4;
	const FB4_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 4)
	pub fn get_fb4() -> u8 { ::read(REGISTER_ADDRESS, FB4_BIT_OFFSET, FB4_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 4)
	pub fn set_fb4(value: u8) { ::write(REGISTER_ADDRESS, FB4_BIT_OFFSET, FB4_BIT_WIDTH, value as u32); }

	const FB5_BIT_OFFSET: u8 = 5;
	const FB5_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 5)
	pub fn get_fb5() -> u8 { ::read(REGISTER_ADDRESS, FB5_BIT_OFFSET, FB5_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 5)
	pub fn set_fb5(value: u8) { ::write(REGISTER_ADDRESS, FB5_BIT_OFFSET, FB5_BIT_WIDTH, value as u32); }

	const FB6_BIT_OFFSET: u8 = 6;
	const FB6_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 6)
	pub fn get_fb6() -> u8 { ::read(REGISTER_ADDRESS, FB6_BIT_OFFSET, FB6_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 6)
	pub fn set_fb6(value: u8) { ::write(REGISTER_ADDRESS, FB6_BIT_OFFSET, FB6_BIT_WIDTH, value as u32); }

	const FB7_BIT_OFFSET: u8 = 7;
	const FB7_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 7)
	pub fn get_fb7() -> u8 { ::read(REGISTER_ADDRESS, FB7_BIT_OFFSET, FB7_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 7)
	pub fn set_fb7(value: u8) { ::write(REGISTER_ADDRESS, FB7_BIT_OFFSET, FB7_BIT_WIDTH, value as u32); }

	const FB8_BIT_OFFSET: u8 = 8;
	const FB8_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 8)
	pub fn get_fb8() -> u8 { ::read(REGISTER_ADDRESS, FB8_BIT_OFFSET, FB8_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 8)
	pub fn set_fb8(value: u8) { ::write(REGISTER_ADDRESS, FB8_BIT_OFFSET, FB8_BIT_WIDTH, value as u32); }

	const FB9_BIT_OFFSET: u8 = 9;
	const FB9_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 9)
	pub fn get_fb9() -> u8 { ::read(REGISTER_ADDRESS, FB9_BIT_OFFSET, FB9_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 9)
	pub fn set_fb9(value: u8) { ::write(REGISTER_ADDRESS, FB9_BIT_OFFSET, FB9_BIT_WIDTH, value as u32); }

	const FB10_BIT_OFFSET: u8 = 10;
	const FB10_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 10)
	pub fn get_fb10() -> u8 { ::read(REGISTER_ADDRESS, FB10_BIT_OFFSET, FB10_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 10)
	pub fn set_fb10(value: u8) { ::write(REGISTER_ADDRESS, FB10_BIT_OFFSET, FB10_BIT_WIDTH, value as u32); }

	const FB11_BIT_OFFSET: u8 = 11;
	const FB11_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 11)
	pub fn get_fb11() -> u8 { ::read(REGISTER_ADDRESS, FB11_BIT_OFFSET, FB11_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 11)
	pub fn set_fb11(value: u8) { ::write(REGISTER_ADDRESS, FB11_BIT_OFFSET, FB11_BIT_WIDTH, value as u32); }

	const FB12_BIT_OFFSET: u8 = 12;
	const FB12_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 12)
	pub fn get_fb12() -> u8 { ::read(REGISTER_ADDRESS, FB12_BIT_OFFSET, FB12_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 12)
	pub fn set_fb12(value: u8) { ::write(REGISTER_ADDRESS, FB12_BIT_OFFSET, FB12_BIT_WIDTH, value as u32); }

	const FB13_BIT_OFFSET: u8 = 13;
	const FB13_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 13)
	pub fn get_fb13() -> u8 { ::read(REGISTER_ADDRESS, FB13_BIT_OFFSET, FB13_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 13)
	pub fn set_fb13(value: u8) { ::write(REGISTER_ADDRESS, FB13_BIT_OFFSET, FB13_BIT_WIDTH, value as u32); }

	const FB14_BIT_OFFSET: u8 = 14;
	const FB14_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 14)
	pub fn get_fb14() -> u8 { ::read(REGISTER_ADDRESS, FB14_BIT_OFFSET, FB14_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 14)
	pub fn set_fb14(value: u8) { ::write(REGISTER_ADDRESS, FB14_BIT_OFFSET, FB14_BIT_WIDTH, value as u32); }

	const FB15_BIT_OFFSET: u8 = 15;
	const FB15_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 15)
	pub fn get_fb15() -> u8 { ::read(REGISTER_ADDRESS, FB15_BIT_OFFSET, FB15_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 15)
	pub fn set_fb15(value: u8) { ::write(REGISTER_ADDRESS, FB15_BIT_OFFSET, FB15_BIT_WIDTH, value as u32); }

	const FB16_BIT_OFFSET: u8 = 16;
	const FB16_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 16)
	pub fn get_fb16() -> u8 { ::read(REGISTER_ADDRESS, FB16_BIT_OFFSET, FB16_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 16)
	pub fn set_fb16(value: u8) { ::write(REGISTER_ADDRESS, FB16_BIT_OFFSET, FB16_BIT_WIDTH, value as u32); }

	const FB17_BIT_OFFSET: u8 = 17;
	const FB17_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 17)
	pub fn get_fb17() -> u8 { ::read(REGISTER_ADDRESS, FB17_BIT_OFFSET, FB17_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 17)
	pub fn set_fb17(value: u8) { ::write(REGISTER_ADDRESS, FB17_BIT_OFFSET, FB17_BIT_WIDTH, value as u32); }

	const FB18_BIT_OFFSET: u8 = 18;
	const FB18_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 18)
	pub fn get_fb18() -> u8 { ::read(REGISTER_ADDRESS, FB18_BIT_OFFSET, FB18_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 18)
	pub fn set_fb18(value: u8) { ::write(REGISTER_ADDRESS, FB18_BIT_OFFSET, FB18_BIT_WIDTH, value as u32); }

	const FB19_BIT_OFFSET: u8 = 19;
	const FB19_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 19)
	pub fn get_fb19() -> u8 { ::read(REGISTER_ADDRESS, FB19_BIT_OFFSET, FB19_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 19)
	pub fn set_fb19(value: u8) { ::write(REGISTER_ADDRESS, FB19_BIT_OFFSET, FB19_BIT_WIDTH, value as u32); }

	const FB20_BIT_OFFSET: u8 = 20;
	const FB20_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 20)
	pub fn get_fb20() -> u8 { ::read(REGISTER_ADDRESS, FB20_BIT_OFFSET, FB20_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 20)
	pub fn set_fb20(value: u8) { ::write(REGISTER_ADDRESS, FB20_BIT_OFFSET, FB20_BIT_WIDTH, value as u32); }

	const FB21_BIT_OFFSET: u8 = 21;
	const FB21_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 21)
	pub fn get_fb21() -> u8 { ::read(REGISTER_ADDRESS, FB21_BIT_OFFSET, FB21_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 21)
	pub fn set_fb21(value: u8) { ::write(REGISTER_ADDRESS, FB21_BIT_OFFSET, FB21_BIT_WIDTH, value as u32); }

	const FB22_BIT_OFFSET: u8 = 22;
	const FB22_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 22)
	pub fn get_fb22() -> u8 { ::read(REGISTER_ADDRESS, FB22_BIT_OFFSET, FB22_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 22)
	pub fn set_fb22(value: u8) { ::write(REGISTER_ADDRESS, FB22_BIT_OFFSET, FB22_BIT_WIDTH, value as u32); }

	const FB23_BIT_OFFSET: u8 = 23;
	const FB23_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 23)
	pub fn get_fb23() -> u8 { ::read(REGISTER_ADDRESS, FB23_BIT_OFFSET, FB23_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 23)
	pub fn set_fb23(value: u8) { ::write(REGISTER_ADDRESS, FB23_BIT_OFFSET, FB23_BIT_WIDTH, value as u32); }

	const FB24_BIT_OFFSET: u8 = 24;
	const FB24_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 24)
	pub fn get_fb24() -> u8 { ::read(REGISTER_ADDRESS, FB24_BIT_OFFSET, FB24_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 24)
	pub fn set_fb24(value: u8) { ::write(REGISTER_ADDRESS, FB24_BIT_OFFSET, FB24_BIT_WIDTH, value as u32); }

	const FB25_BIT_OFFSET: u8 = 25;
	const FB25_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 25)
	pub fn get_fb25() -> u8 { ::read(REGISTER_ADDRESS, FB25_BIT_OFFSET, FB25_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 25)
	pub fn set_fb25(value: u8) { ::write(REGISTER_ADDRESS, FB25_BIT_OFFSET, FB25_BIT_WIDTH, value as u32); }

	const FB26_BIT_OFFSET: u8 = 26;
	const FB26_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 26)
	pub fn get_fb26() -> u8 { ::read(REGISTER_ADDRESS, FB26_BIT_OFFSET, FB26_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 26)
	pub fn set_fb26(value: u8) { ::write(REGISTER_ADDRESS, FB26_BIT_OFFSET, FB26_BIT_WIDTH, value as u32); }

	const FB27_BIT_OFFSET: u8 = 27;
	const FB27_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 27)
	pub fn get_fb27() -> u8 { ::read(REGISTER_ADDRESS, FB27_BIT_OFFSET, FB27_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 27)
	pub fn set_fb27(value: u8) { ::write(REGISTER_ADDRESS, FB27_BIT_OFFSET, FB27_BIT_WIDTH, value as u32); }

	const FB28_BIT_OFFSET: u8 = 28;
	const FB28_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 28)
	pub fn get_fb28() -> u8 { ::read(REGISTER_ADDRESS, FB28_BIT_OFFSET, FB28_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 28)
	pub fn set_fb28(value: u8) { ::write(REGISTER_ADDRESS, FB28_BIT_OFFSET, FB28_BIT_WIDTH, value as u32); }

	const FB29_BIT_OFFSET: u8 = 29;
	const FB29_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 29)
	pub fn get_fb29() -> u8 { ::read(REGISTER_ADDRESS, FB29_BIT_OFFSET, FB29_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 29)
	pub fn set_fb29(value: u8) { ::write(REGISTER_ADDRESS, FB29_BIT_OFFSET, FB29_BIT_WIDTH, value as u32); }

	const FB30_BIT_OFFSET: u8 = 30;
	const FB30_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 30)
	pub fn get_fb30() -> u8 { ::read(REGISTER_ADDRESS, FB30_BIT_OFFSET, FB30_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 30)
	pub fn set_fb30(value: u8) { ::write(REGISTER_ADDRESS, FB30_BIT_OFFSET, FB30_BIT_WIDTH, value as u32); }

	const FB31_BIT_OFFSET: u8 = 31;
	const FB31_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 31)
	pub fn get_fb31() -> u8 { ::read(REGISTER_ADDRESS, FB31_BIT_OFFSET, FB31_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 31)
	pub fn set_fb31(value: u8) { ::write(REGISTER_ADDRESS, FB31_BIT_OFFSET, FB31_BIT_WIDTH, value as u32); }
}
/// Filter bank 22 register 1
/// Size: 0x20 bits
pub mod f22r1 {
	const REGISTER_ADDRESS_OFFSET: u32 = 0x2F0;
	const REGISTER_ADDRESS: u32 = super::BASE_ADDRESS + REGISTER_ADDRESS_OFFSET;

	const FB0_BIT_OFFSET: u8 = 0;
	const FB0_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 0)
	pub fn get_fb0() -> u8 { ::read(REGISTER_ADDRESS, FB0_BIT_OFFSET, FB0_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 0)
	pub fn set_fb0(value: u8) { ::write(REGISTER_ADDRESS, FB0_BIT_OFFSET, FB0_BIT_WIDTH, value as u32); }

	const FB1_BIT_OFFSET: u8 = 1;
	const FB1_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 1)
	pub fn get_fb1() -> u8 { ::read(REGISTER_ADDRESS, FB1_BIT_OFFSET, FB1_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 1)
	pub fn set_fb1(value: u8) { ::write(REGISTER_ADDRESS, FB1_BIT_OFFSET, FB1_BIT_WIDTH, value as u32); }

	const FB2_BIT_OFFSET: u8 = 2;
	const FB2_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 2)
	pub fn get_fb2() -> u8 { ::read(REGISTER_ADDRESS, FB2_BIT_OFFSET, FB2_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 2)
	pub fn set_fb2(value: u8) { ::write(REGISTER_ADDRESS, FB2_BIT_OFFSET, FB2_BIT_WIDTH, value as u32); }

	const FB3_BIT_OFFSET: u8 = 3;
	const FB3_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 3)
	pub fn get_fb3() -> u8 { ::read(REGISTER_ADDRESS, FB3_BIT_OFFSET, FB3_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 3)
	pub fn set_fb3(value: u8) { ::write(REGISTER_ADDRESS, FB3_BIT_OFFSET, FB3_BIT_WIDTH, value as u32); }

	const FB4_BIT_OFFSET: u8 = 4;
	const FB4_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 4)
	pub fn get_fb4() -> u8 { ::read(REGISTER_ADDRESS, FB4_BIT_OFFSET, FB4_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 4)
	pub fn set_fb4(value: u8) { ::write(REGISTER_ADDRESS, FB4_BIT_OFFSET, FB4_BIT_WIDTH, value as u32); }

	const FB5_BIT_OFFSET: u8 = 5;
	const FB5_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 5)
	pub fn get_fb5() -> u8 { ::read(REGISTER_ADDRESS, FB5_BIT_OFFSET, FB5_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 5)
	pub fn set_fb5(value: u8) { ::write(REGISTER_ADDRESS, FB5_BIT_OFFSET, FB5_BIT_WIDTH, value as u32); }

	const FB6_BIT_OFFSET: u8 = 6;
	const FB6_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 6)
	pub fn get_fb6() -> u8 { ::read(REGISTER_ADDRESS, FB6_BIT_OFFSET, FB6_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 6)
	pub fn set_fb6(value: u8) { ::write(REGISTER_ADDRESS, FB6_BIT_OFFSET, FB6_BIT_WIDTH, value as u32); }

	const FB7_BIT_OFFSET: u8 = 7;
	const FB7_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 7)
	pub fn get_fb7() -> u8 { ::read(REGISTER_ADDRESS, FB7_BIT_OFFSET, FB7_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 7)
	pub fn set_fb7(value: u8) { ::write(REGISTER_ADDRESS, FB7_BIT_OFFSET, FB7_BIT_WIDTH, value as u32); }

	const FB8_BIT_OFFSET: u8 = 8;
	const FB8_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 8)
	pub fn get_fb8() -> u8 { ::read(REGISTER_ADDRESS, FB8_BIT_OFFSET, FB8_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 8)
	pub fn set_fb8(value: u8) { ::write(REGISTER_ADDRESS, FB8_BIT_OFFSET, FB8_BIT_WIDTH, value as u32); }

	const FB9_BIT_OFFSET: u8 = 9;
	const FB9_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 9)
	pub fn get_fb9() -> u8 { ::read(REGISTER_ADDRESS, FB9_BIT_OFFSET, FB9_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 9)
	pub fn set_fb9(value: u8) { ::write(REGISTER_ADDRESS, FB9_BIT_OFFSET, FB9_BIT_WIDTH, value as u32); }

	const FB10_BIT_OFFSET: u8 = 10;
	const FB10_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 10)
	pub fn get_fb10() -> u8 { ::read(REGISTER_ADDRESS, FB10_BIT_OFFSET, FB10_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 10)
	pub fn set_fb10(value: u8) { ::write(REGISTER_ADDRESS, FB10_BIT_OFFSET, FB10_BIT_WIDTH, value as u32); }

	const FB11_BIT_OFFSET: u8 = 11;
	const FB11_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 11)
	pub fn get_fb11() -> u8 { ::read(REGISTER_ADDRESS, FB11_BIT_OFFSET, FB11_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 11)
	pub fn set_fb11(value: u8) { ::write(REGISTER_ADDRESS, FB11_BIT_OFFSET, FB11_BIT_WIDTH, value as u32); }

	const FB12_BIT_OFFSET: u8 = 12;
	const FB12_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 12)
	pub fn get_fb12() -> u8 { ::read(REGISTER_ADDRESS, FB12_BIT_OFFSET, FB12_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 12)
	pub fn set_fb12(value: u8) { ::write(REGISTER_ADDRESS, FB12_BIT_OFFSET, FB12_BIT_WIDTH, value as u32); }

	const FB13_BIT_OFFSET: u8 = 13;
	const FB13_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 13)
	pub fn get_fb13() -> u8 { ::read(REGISTER_ADDRESS, FB13_BIT_OFFSET, FB13_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 13)
	pub fn set_fb13(value: u8) { ::write(REGISTER_ADDRESS, FB13_BIT_OFFSET, FB13_BIT_WIDTH, value as u32); }

	const FB14_BIT_OFFSET: u8 = 14;
	const FB14_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 14)
	pub fn get_fb14() -> u8 { ::read(REGISTER_ADDRESS, FB14_BIT_OFFSET, FB14_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 14)
	pub fn set_fb14(value: u8) { ::write(REGISTER_ADDRESS, FB14_BIT_OFFSET, FB14_BIT_WIDTH, value as u32); }

	const FB15_BIT_OFFSET: u8 = 15;
	const FB15_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 15)
	pub fn get_fb15() -> u8 { ::read(REGISTER_ADDRESS, FB15_BIT_OFFSET, FB15_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 15)
	pub fn set_fb15(value: u8) { ::write(REGISTER_ADDRESS, FB15_BIT_OFFSET, FB15_BIT_WIDTH, value as u32); }

	const FB16_BIT_OFFSET: u8 = 16;
	const FB16_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 16)
	pub fn get_fb16() -> u8 { ::read(REGISTER_ADDRESS, FB16_BIT_OFFSET, FB16_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 16)
	pub fn set_fb16(value: u8) { ::write(REGISTER_ADDRESS, FB16_BIT_OFFSET, FB16_BIT_WIDTH, value as u32); }

	const FB17_BIT_OFFSET: u8 = 17;
	const FB17_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 17)
	pub fn get_fb17() -> u8 { ::read(REGISTER_ADDRESS, FB17_BIT_OFFSET, FB17_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 17)
	pub fn set_fb17(value: u8) { ::write(REGISTER_ADDRESS, FB17_BIT_OFFSET, FB17_BIT_WIDTH, value as u32); }

	const FB18_BIT_OFFSET: u8 = 18;
	const FB18_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 18)
	pub fn get_fb18() -> u8 { ::read(REGISTER_ADDRESS, FB18_BIT_OFFSET, FB18_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 18)
	pub fn set_fb18(value: u8) { ::write(REGISTER_ADDRESS, FB18_BIT_OFFSET, FB18_BIT_WIDTH, value as u32); }

	const FB19_BIT_OFFSET: u8 = 19;
	const FB19_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 19)
	pub fn get_fb19() -> u8 { ::read(REGISTER_ADDRESS, FB19_BIT_OFFSET, FB19_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 19)
	pub fn set_fb19(value: u8) { ::write(REGISTER_ADDRESS, FB19_BIT_OFFSET, FB19_BIT_WIDTH, value as u32); }

	const FB20_BIT_OFFSET: u8 = 20;
	const FB20_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 20)
	pub fn get_fb20() -> u8 { ::read(REGISTER_ADDRESS, FB20_BIT_OFFSET, FB20_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 20)
	pub fn set_fb20(value: u8) { ::write(REGISTER_ADDRESS, FB20_BIT_OFFSET, FB20_BIT_WIDTH, value as u32); }

	const FB21_BIT_OFFSET: u8 = 21;
	const FB21_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 21)
	pub fn get_fb21() -> u8 { ::read(REGISTER_ADDRESS, FB21_BIT_OFFSET, FB21_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 21)
	pub fn set_fb21(value: u8) { ::write(REGISTER_ADDRESS, FB21_BIT_OFFSET, FB21_BIT_WIDTH, value as u32); }

	const FB22_BIT_OFFSET: u8 = 22;
	const FB22_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 22)
	pub fn get_fb22() -> u8 { ::read(REGISTER_ADDRESS, FB22_BIT_OFFSET, FB22_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 22)
	pub fn set_fb22(value: u8) { ::write(REGISTER_ADDRESS, FB22_BIT_OFFSET, FB22_BIT_WIDTH, value as u32); }

	const FB23_BIT_OFFSET: u8 = 23;
	const FB23_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 23)
	pub fn get_fb23() -> u8 { ::read(REGISTER_ADDRESS, FB23_BIT_OFFSET, FB23_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 23)
	pub fn set_fb23(value: u8) { ::write(REGISTER_ADDRESS, FB23_BIT_OFFSET, FB23_BIT_WIDTH, value as u32); }

	const FB24_BIT_OFFSET: u8 = 24;
	const FB24_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 24)
	pub fn get_fb24() -> u8 { ::read(REGISTER_ADDRESS, FB24_BIT_OFFSET, FB24_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 24)
	pub fn set_fb24(value: u8) { ::write(REGISTER_ADDRESS, FB24_BIT_OFFSET, FB24_BIT_WIDTH, value as u32); }

	const FB25_BIT_OFFSET: u8 = 25;
	const FB25_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 25)
	pub fn get_fb25() -> u8 { ::read(REGISTER_ADDRESS, FB25_BIT_OFFSET, FB25_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 25)
	pub fn set_fb25(value: u8) { ::write(REGISTER_ADDRESS, FB25_BIT_OFFSET, FB25_BIT_WIDTH, value as u32); }

	const FB26_BIT_OFFSET: u8 = 26;
	const FB26_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 26)
	pub fn get_fb26() -> u8 { ::read(REGISTER_ADDRESS, FB26_BIT_OFFSET, FB26_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 26)
	pub fn set_fb26(value: u8) { ::write(REGISTER_ADDRESS, FB26_BIT_OFFSET, FB26_BIT_WIDTH, value as u32); }

	const FB27_BIT_OFFSET: u8 = 27;
	const FB27_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 27)
	pub fn get_fb27() -> u8 { ::read(REGISTER_ADDRESS, FB27_BIT_OFFSET, FB27_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 27)
	pub fn set_fb27(value: u8) { ::write(REGISTER_ADDRESS, FB27_BIT_OFFSET, FB27_BIT_WIDTH, value as u32); }

	const FB28_BIT_OFFSET: u8 = 28;
	const FB28_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 28)
	pub fn get_fb28() -> u8 { ::read(REGISTER_ADDRESS, FB28_BIT_OFFSET, FB28_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 28)
	pub fn set_fb28(value: u8) { ::write(REGISTER_ADDRESS, FB28_BIT_OFFSET, FB28_BIT_WIDTH, value as u32); }

	const FB29_BIT_OFFSET: u8 = 29;
	const FB29_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 29)
	pub fn get_fb29() -> u8 { ::read(REGISTER_ADDRESS, FB29_BIT_OFFSET, FB29_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 29)
	pub fn set_fb29(value: u8) { ::write(REGISTER_ADDRESS, FB29_BIT_OFFSET, FB29_BIT_WIDTH, value as u32); }

	const FB30_BIT_OFFSET: u8 = 30;
	const FB30_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 30)
	pub fn get_fb30() -> u8 { ::read(REGISTER_ADDRESS, FB30_BIT_OFFSET, FB30_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 30)
	pub fn set_fb30(value: u8) { ::write(REGISTER_ADDRESS, FB30_BIT_OFFSET, FB30_BIT_WIDTH, value as u32); }

	const FB31_BIT_OFFSET: u8 = 31;
	const FB31_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 31)
	pub fn get_fb31() -> u8 { ::read(REGISTER_ADDRESS, FB31_BIT_OFFSET, FB31_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 31)
	pub fn set_fb31(value: u8) { ::write(REGISTER_ADDRESS, FB31_BIT_OFFSET, FB31_BIT_WIDTH, value as u32); }
}
/// Filter bank 22 register 2
/// Size: 0x20 bits
pub mod f22r2 {
	const REGISTER_ADDRESS_OFFSET: u32 = 0x2F4;
	const REGISTER_ADDRESS: u32 = super::BASE_ADDRESS + REGISTER_ADDRESS_OFFSET;

	const FB0_BIT_OFFSET: u8 = 0;
	const FB0_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 0)
	pub fn get_fb0() -> u8 { ::read(REGISTER_ADDRESS, FB0_BIT_OFFSET, FB0_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 0)
	pub fn set_fb0(value: u8) { ::write(REGISTER_ADDRESS, FB0_BIT_OFFSET, FB0_BIT_WIDTH, value as u32); }

	const FB1_BIT_OFFSET: u8 = 1;
	const FB1_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 1)
	pub fn get_fb1() -> u8 { ::read(REGISTER_ADDRESS, FB1_BIT_OFFSET, FB1_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 1)
	pub fn set_fb1(value: u8) { ::write(REGISTER_ADDRESS, FB1_BIT_OFFSET, FB1_BIT_WIDTH, value as u32); }

	const FB2_BIT_OFFSET: u8 = 2;
	const FB2_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 2)
	pub fn get_fb2() -> u8 { ::read(REGISTER_ADDRESS, FB2_BIT_OFFSET, FB2_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 2)
	pub fn set_fb2(value: u8) { ::write(REGISTER_ADDRESS, FB2_BIT_OFFSET, FB2_BIT_WIDTH, value as u32); }

	const FB3_BIT_OFFSET: u8 = 3;
	const FB3_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 3)
	pub fn get_fb3() -> u8 { ::read(REGISTER_ADDRESS, FB3_BIT_OFFSET, FB3_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 3)
	pub fn set_fb3(value: u8) { ::write(REGISTER_ADDRESS, FB3_BIT_OFFSET, FB3_BIT_WIDTH, value as u32); }

	const FB4_BIT_OFFSET: u8 = 4;
	const FB4_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 4)
	pub fn get_fb4() -> u8 { ::read(REGISTER_ADDRESS, FB4_BIT_OFFSET, FB4_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 4)
	pub fn set_fb4(value: u8) { ::write(REGISTER_ADDRESS, FB4_BIT_OFFSET, FB4_BIT_WIDTH, value as u32); }

	const FB5_BIT_OFFSET: u8 = 5;
	const FB5_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 5)
	pub fn get_fb5() -> u8 { ::read(REGISTER_ADDRESS, FB5_BIT_OFFSET, FB5_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 5)
	pub fn set_fb5(value: u8) { ::write(REGISTER_ADDRESS, FB5_BIT_OFFSET, FB5_BIT_WIDTH, value as u32); }

	const FB6_BIT_OFFSET: u8 = 6;
	const FB6_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 6)
	pub fn get_fb6() -> u8 { ::read(REGISTER_ADDRESS, FB6_BIT_OFFSET, FB6_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 6)
	pub fn set_fb6(value: u8) { ::write(REGISTER_ADDRESS, FB6_BIT_OFFSET, FB6_BIT_WIDTH, value as u32); }

	const FB7_BIT_OFFSET: u8 = 7;
	const FB7_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 7)
	pub fn get_fb7() -> u8 { ::read(REGISTER_ADDRESS, FB7_BIT_OFFSET, FB7_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 7)
	pub fn set_fb7(value: u8) { ::write(REGISTER_ADDRESS, FB7_BIT_OFFSET, FB7_BIT_WIDTH, value as u32); }

	const FB8_BIT_OFFSET: u8 = 8;
	const FB8_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 8)
	pub fn get_fb8() -> u8 { ::read(REGISTER_ADDRESS, FB8_BIT_OFFSET, FB8_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 8)
	pub fn set_fb8(value: u8) { ::write(REGISTER_ADDRESS, FB8_BIT_OFFSET, FB8_BIT_WIDTH, value as u32); }

	const FB9_BIT_OFFSET: u8 = 9;
	const FB9_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 9)
	pub fn get_fb9() -> u8 { ::read(REGISTER_ADDRESS, FB9_BIT_OFFSET, FB9_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 9)
	pub fn set_fb9(value: u8) { ::write(REGISTER_ADDRESS, FB9_BIT_OFFSET, FB9_BIT_WIDTH, value as u32); }

	const FB10_BIT_OFFSET: u8 = 10;
	const FB10_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 10)
	pub fn get_fb10() -> u8 { ::read(REGISTER_ADDRESS, FB10_BIT_OFFSET, FB10_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 10)
	pub fn set_fb10(value: u8) { ::write(REGISTER_ADDRESS, FB10_BIT_OFFSET, FB10_BIT_WIDTH, value as u32); }

	const FB11_BIT_OFFSET: u8 = 11;
	const FB11_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 11)
	pub fn get_fb11() -> u8 { ::read(REGISTER_ADDRESS, FB11_BIT_OFFSET, FB11_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 11)
	pub fn set_fb11(value: u8) { ::write(REGISTER_ADDRESS, FB11_BIT_OFFSET, FB11_BIT_WIDTH, value as u32); }

	const FB12_BIT_OFFSET: u8 = 12;
	const FB12_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 12)
	pub fn get_fb12() -> u8 { ::read(REGISTER_ADDRESS, FB12_BIT_OFFSET, FB12_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 12)
	pub fn set_fb12(value: u8) { ::write(REGISTER_ADDRESS, FB12_BIT_OFFSET, FB12_BIT_WIDTH, value as u32); }

	const FB13_BIT_OFFSET: u8 = 13;
	const FB13_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 13)
	pub fn get_fb13() -> u8 { ::read(REGISTER_ADDRESS, FB13_BIT_OFFSET, FB13_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 13)
	pub fn set_fb13(value: u8) { ::write(REGISTER_ADDRESS, FB13_BIT_OFFSET, FB13_BIT_WIDTH, value as u32); }

	const FB14_BIT_OFFSET: u8 = 14;
	const FB14_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 14)
	pub fn get_fb14() -> u8 { ::read(REGISTER_ADDRESS, FB14_BIT_OFFSET, FB14_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 14)
	pub fn set_fb14(value: u8) { ::write(REGISTER_ADDRESS, FB14_BIT_OFFSET, FB14_BIT_WIDTH, value as u32); }

	const FB15_BIT_OFFSET: u8 = 15;
	const FB15_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 15)
	pub fn get_fb15() -> u8 { ::read(REGISTER_ADDRESS, FB15_BIT_OFFSET, FB15_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 15)
	pub fn set_fb15(value: u8) { ::write(REGISTER_ADDRESS, FB15_BIT_OFFSET, FB15_BIT_WIDTH, value as u32); }

	const FB16_BIT_OFFSET: u8 = 16;
	const FB16_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 16)
	pub fn get_fb16() -> u8 { ::read(REGISTER_ADDRESS, FB16_BIT_OFFSET, FB16_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 16)
	pub fn set_fb16(value: u8) { ::write(REGISTER_ADDRESS, FB16_BIT_OFFSET, FB16_BIT_WIDTH, value as u32); }

	const FB17_BIT_OFFSET: u8 = 17;
	const FB17_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 17)
	pub fn get_fb17() -> u8 { ::read(REGISTER_ADDRESS, FB17_BIT_OFFSET, FB17_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 17)
	pub fn set_fb17(value: u8) { ::write(REGISTER_ADDRESS, FB17_BIT_OFFSET, FB17_BIT_WIDTH, value as u32); }

	const FB18_BIT_OFFSET: u8 = 18;
	const FB18_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 18)
	pub fn get_fb18() -> u8 { ::read(REGISTER_ADDRESS, FB18_BIT_OFFSET, FB18_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 18)
	pub fn set_fb18(value: u8) { ::write(REGISTER_ADDRESS, FB18_BIT_OFFSET, FB18_BIT_WIDTH, value as u32); }

	const FB19_BIT_OFFSET: u8 = 19;
	const FB19_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 19)
	pub fn get_fb19() -> u8 { ::read(REGISTER_ADDRESS, FB19_BIT_OFFSET, FB19_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 19)
	pub fn set_fb19(value: u8) { ::write(REGISTER_ADDRESS, FB19_BIT_OFFSET, FB19_BIT_WIDTH, value as u32); }

	const FB20_BIT_OFFSET: u8 = 20;
	const FB20_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 20)
	pub fn get_fb20() -> u8 { ::read(REGISTER_ADDRESS, FB20_BIT_OFFSET, FB20_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 20)
	pub fn set_fb20(value: u8) { ::write(REGISTER_ADDRESS, FB20_BIT_OFFSET, FB20_BIT_WIDTH, value as u32); }

	const FB21_BIT_OFFSET: u8 = 21;
	const FB21_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 21)
	pub fn get_fb21() -> u8 { ::read(REGISTER_ADDRESS, FB21_BIT_OFFSET, FB21_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 21)
	pub fn set_fb21(value: u8) { ::write(REGISTER_ADDRESS, FB21_BIT_OFFSET, FB21_BIT_WIDTH, value as u32); }

	const FB22_BIT_OFFSET: u8 = 22;
	const FB22_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 22)
	pub fn get_fb22() -> u8 { ::read(REGISTER_ADDRESS, FB22_BIT_OFFSET, FB22_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 22)
	pub fn set_fb22(value: u8) { ::write(REGISTER_ADDRESS, FB22_BIT_OFFSET, FB22_BIT_WIDTH, value as u32); }

	const FB23_BIT_OFFSET: u8 = 23;
	const FB23_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 23)
	pub fn get_fb23() -> u8 { ::read(REGISTER_ADDRESS, FB23_BIT_OFFSET, FB23_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 23)
	pub fn set_fb23(value: u8) { ::write(REGISTER_ADDRESS, FB23_BIT_OFFSET, FB23_BIT_WIDTH, value as u32); }

	const FB24_BIT_OFFSET: u8 = 24;
	const FB24_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 24)
	pub fn get_fb24() -> u8 { ::read(REGISTER_ADDRESS, FB24_BIT_OFFSET, FB24_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 24)
	pub fn set_fb24(value: u8) { ::write(REGISTER_ADDRESS, FB24_BIT_OFFSET, FB24_BIT_WIDTH, value as u32); }

	const FB25_BIT_OFFSET: u8 = 25;
	const FB25_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 25)
	pub fn get_fb25() -> u8 { ::read(REGISTER_ADDRESS, FB25_BIT_OFFSET, FB25_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 25)
	pub fn set_fb25(value: u8) { ::write(REGISTER_ADDRESS, FB25_BIT_OFFSET, FB25_BIT_WIDTH, value as u32); }

	const FB26_BIT_OFFSET: u8 = 26;
	const FB26_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 26)
	pub fn get_fb26() -> u8 { ::read(REGISTER_ADDRESS, FB26_BIT_OFFSET, FB26_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 26)
	pub fn set_fb26(value: u8) { ::write(REGISTER_ADDRESS, FB26_BIT_OFFSET, FB26_BIT_WIDTH, value as u32); }

	const FB27_BIT_OFFSET: u8 = 27;
	const FB27_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 27)
	pub fn get_fb27() -> u8 { ::read(REGISTER_ADDRESS, FB27_BIT_OFFSET, FB27_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 27)
	pub fn set_fb27(value: u8) { ::write(REGISTER_ADDRESS, FB27_BIT_OFFSET, FB27_BIT_WIDTH, value as u32); }

	const FB28_BIT_OFFSET: u8 = 28;
	const FB28_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 28)
	pub fn get_fb28() -> u8 { ::read(REGISTER_ADDRESS, FB28_BIT_OFFSET, FB28_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 28)
	pub fn set_fb28(value: u8) { ::write(REGISTER_ADDRESS, FB28_BIT_OFFSET, FB28_BIT_WIDTH, value as u32); }

	const FB29_BIT_OFFSET: u8 = 29;
	const FB29_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 29)
	pub fn get_fb29() -> u8 { ::read(REGISTER_ADDRESS, FB29_BIT_OFFSET, FB29_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 29)
	pub fn set_fb29(value: u8) { ::write(REGISTER_ADDRESS, FB29_BIT_OFFSET, FB29_BIT_WIDTH, value as u32); }

	const FB30_BIT_OFFSET: u8 = 30;
	const FB30_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 30)
	pub fn get_fb30() -> u8 { ::read(REGISTER_ADDRESS, FB30_BIT_OFFSET, FB30_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 30)
	pub fn set_fb30(value: u8) { ::write(REGISTER_ADDRESS, FB30_BIT_OFFSET, FB30_BIT_WIDTH, value as u32); }

	const FB31_BIT_OFFSET: u8 = 31;
	const FB31_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 31)
	pub fn get_fb31() -> u8 { ::read(REGISTER_ADDRESS, FB31_BIT_OFFSET, FB31_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 31)
	pub fn set_fb31(value: u8) { ::write(REGISTER_ADDRESS, FB31_BIT_OFFSET, FB31_BIT_WIDTH, value as u32); }
}
/// Filter bank 23 register 1
/// Size: 0x20 bits
pub mod f23r1 {
	const REGISTER_ADDRESS_OFFSET: u32 = 0x2F8;
	const REGISTER_ADDRESS: u32 = super::BASE_ADDRESS + REGISTER_ADDRESS_OFFSET;

	const FB0_BIT_OFFSET: u8 = 0;
	const FB0_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 0)
	pub fn get_fb0() -> u8 { ::read(REGISTER_ADDRESS, FB0_BIT_OFFSET, FB0_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 0)
	pub fn set_fb0(value: u8) { ::write(REGISTER_ADDRESS, FB0_BIT_OFFSET, FB0_BIT_WIDTH, value as u32); }

	const FB1_BIT_OFFSET: u8 = 1;
	const FB1_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 1)
	pub fn get_fb1() -> u8 { ::read(REGISTER_ADDRESS, FB1_BIT_OFFSET, FB1_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 1)
	pub fn set_fb1(value: u8) { ::write(REGISTER_ADDRESS, FB1_BIT_OFFSET, FB1_BIT_WIDTH, value as u32); }

	const FB2_BIT_OFFSET: u8 = 2;
	const FB2_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 2)
	pub fn get_fb2() -> u8 { ::read(REGISTER_ADDRESS, FB2_BIT_OFFSET, FB2_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 2)
	pub fn set_fb2(value: u8) { ::write(REGISTER_ADDRESS, FB2_BIT_OFFSET, FB2_BIT_WIDTH, value as u32); }

	const FB3_BIT_OFFSET: u8 = 3;
	const FB3_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 3)
	pub fn get_fb3() -> u8 { ::read(REGISTER_ADDRESS, FB3_BIT_OFFSET, FB3_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 3)
	pub fn set_fb3(value: u8) { ::write(REGISTER_ADDRESS, FB3_BIT_OFFSET, FB3_BIT_WIDTH, value as u32); }

	const FB4_BIT_OFFSET: u8 = 4;
	const FB4_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 4)
	pub fn get_fb4() -> u8 { ::read(REGISTER_ADDRESS, FB4_BIT_OFFSET, FB4_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 4)
	pub fn set_fb4(value: u8) { ::write(REGISTER_ADDRESS, FB4_BIT_OFFSET, FB4_BIT_WIDTH, value as u32); }

	const FB5_BIT_OFFSET: u8 = 5;
	const FB5_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 5)
	pub fn get_fb5() -> u8 { ::read(REGISTER_ADDRESS, FB5_BIT_OFFSET, FB5_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 5)
	pub fn set_fb5(value: u8) { ::write(REGISTER_ADDRESS, FB5_BIT_OFFSET, FB5_BIT_WIDTH, value as u32); }

	const FB6_BIT_OFFSET: u8 = 6;
	const FB6_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 6)
	pub fn get_fb6() -> u8 { ::read(REGISTER_ADDRESS, FB6_BIT_OFFSET, FB6_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 6)
	pub fn set_fb6(value: u8) { ::write(REGISTER_ADDRESS, FB6_BIT_OFFSET, FB6_BIT_WIDTH, value as u32); }

	const FB7_BIT_OFFSET: u8 = 7;
	const FB7_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 7)
	pub fn get_fb7() -> u8 { ::read(REGISTER_ADDRESS, FB7_BIT_OFFSET, FB7_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 7)
	pub fn set_fb7(value: u8) { ::write(REGISTER_ADDRESS, FB7_BIT_OFFSET, FB7_BIT_WIDTH, value as u32); }

	const FB8_BIT_OFFSET: u8 = 8;
	const FB8_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 8)
	pub fn get_fb8() -> u8 { ::read(REGISTER_ADDRESS, FB8_BIT_OFFSET, FB8_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 8)
	pub fn set_fb8(value: u8) { ::write(REGISTER_ADDRESS, FB8_BIT_OFFSET, FB8_BIT_WIDTH, value as u32); }

	const FB9_BIT_OFFSET: u8 = 9;
	const FB9_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 9)
	pub fn get_fb9() -> u8 { ::read(REGISTER_ADDRESS, FB9_BIT_OFFSET, FB9_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 9)
	pub fn set_fb9(value: u8) { ::write(REGISTER_ADDRESS, FB9_BIT_OFFSET, FB9_BIT_WIDTH, value as u32); }

	const FB10_BIT_OFFSET: u8 = 10;
	const FB10_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 10)
	pub fn get_fb10() -> u8 { ::read(REGISTER_ADDRESS, FB10_BIT_OFFSET, FB10_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 10)
	pub fn set_fb10(value: u8) { ::write(REGISTER_ADDRESS, FB10_BIT_OFFSET, FB10_BIT_WIDTH, value as u32); }

	const FB11_BIT_OFFSET: u8 = 11;
	const FB11_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 11)
	pub fn get_fb11() -> u8 { ::read(REGISTER_ADDRESS, FB11_BIT_OFFSET, FB11_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 11)
	pub fn set_fb11(value: u8) { ::write(REGISTER_ADDRESS, FB11_BIT_OFFSET, FB11_BIT_WIDTH, value as u32); }

	const FB12_BIT_OFFSET: u8 = 12;
	const FB12_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 12)
	pub fn get_fb12() -> u8 { ::read(REGISTER_ADDRESS, FB12_BIT_OFFSET, FB12_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 12)
	pub fn set_fb12(value: u8) { ::write(REGISTER_ADDRESS, FB12_BIT_OFFSET, FB12_BIT_WIDTH, value as u32); }

	const FB13_BIT_OFFSET: u8 = 13;
	const FB13_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 13)
	pub fn get_fb13() -> u8 { ::read(REGISTER_ADDRESS, FB13_BIT_OFFSET, FB13_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 13)
	pub fn set_fb13(value: u8) { ::write(REGISTER_ADDRESS, FB13_BIT_OFFSET, FB13_BIT_WIDTH, value as u32); }

	const FB14_BIT_OFFSET: u8 = 14;
	const FB14_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 14)
	pub fn get_fb14() -> u8 { ::read(REGISTER_ADDRESS, FB14_BIT_OFFSET, FB14_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 14)
	pub fn set_fb14(value: u8) { ::write(REGISTER_ADDRESS, FB14_BIT_OFFSET, FB14_BIT_WIDTH, value as u32); }

	const FB15_BIT_OFFSET: u8 = 15;
	const FB15_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 15)
	pub fn get_fb15() -> u8 { ::read(REGISTER_ADDRESS, FB15_BIT_OFFSET, FB15_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 15)
	pub fn set_fb15(value: u8) { ::write(REGISTER_ADDRESS, FB15_BIT_OFFSET, FB15_BIT_WIDTH, value as u32); }

	const FB16_BIT_OFFSET: u8 = 16;
	const FB16_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 16)
	pub fn get_fb16() -> u8 { ::read(REGISTER_ADDRESS, FB16_BIT_OFFSET, FB16_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 16)
	pub fn set_fb16(value: u8) { ::write(REGISTER_ADDRESS, FB16_BIT_OFFSET, FB16_BIT_WIDTH, value as u32); }

	const FB17_BIT_OFFSET: u8 = 17;
	const FB17_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 17)
	pub fn get_fb17() -> u8 { ::read(REGISTER_ADDRESS, FB17_BIT_OFFSET, FB17_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 17)
	pub fn set_fb17(value: u8) { ::write(REGISTER_ADDRESS, FB17_BIT_OFFSET, FB17_BIT_WIDTH, value as u32); }

	const FB18_BIT_OFFSET: u8 = 18;
	const FB18_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 18)
	pub fn get_fb18() -> u8 { ::read(REGISTER_ADDRESS, FB18_BIT_OFFSET, FB18_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 18)
	pub fn set_fb18(value: u8) { ::write(REGISTER_ADDRESS, FB18_BIT_OFFSET, FB18_BIT_WIDTH, value as u32); }

	const FB19_BIT_OFFSET: u8 = 19;
	const FB19_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 19)
	pub fn get_fb19() -> u8 { ::read(REGISTER_ADDRESS, FB19_BIT_OFFSET, FB19_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 19)
	pub fn set_fb19(value: u8) { ::write(REGISTER_ADDRESS, FB19_BIT_OFFSET, FB19_BIT_WIDTH, value as u32); }

	const FB20_BIT_OFFSET: u8 = 20;
	const FB20_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 20)
	pub fn get_fb20() -> u8 { ::read(REGISTER_ADDRESS, FB20_BIT_OFFSET, FB20_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 20)
	pub fn set_fb20(value: u8) { ::write(REGISTER_ADDRESS, FB20_BIT_OFFSET, FB20_BIT_WIDTH, value as u32); }

	const FB21_BIT_OFFSET: u8 = 21;
	const FB21_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 21)
	pub fn get_fb21() -> u8 { ::read(REGISTER_ADDRESS, FB21_BIT_OFFSET, FB21_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 21)
	pub fn set_fb21(value: u8) { ::write(REGISTER_ADDRESS, FB21_BIT_OFFSET, FB21_BIT_WIDTH, value as u32); }

	const FB22_BIT_OFFSET: u8 = 22;
	const FB22_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 22)
	pub fn get_fb22() -> u8 { ::read(REGISTER_ADDRESS, FB22_BIT_OFFSET, FB22_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 22)
	pub fn set_fb22(value: u8) { ::write(REGISTER_ADDRESS, FB22_BIT_OFFSET, FB22_BIT_WIDTH, value as u32); }

	const FB23_BIT_OFFSET: u8 = 23;
	const FB23_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 23)
	pub fn get_fb23() -> u8 { ::read(REGISTER_ADDRESS, FB23_BIT_OFFSET, FB23_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 23)
	pub fn set_fb23(value: u8) { ::write(REGISTER_ADDRESS, FB23_BIT_OFFSET, FB23_BIT_WIDTH, value as u32); }

	const FB24_BIT_OFFSET: u8 = 24;
	const FB24_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 24)
	pub fn get_fb24() -> u8 { ::read(REGISTER_ADDRESS, FB24_BIT_OFFSET, FB24_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 24)
	pub fn set_fb24(value: u8) { ::write(REGISTER_ADDRESS, FB24_BIT_OFFSET, FB24_BIT_WIDTH, value as u32); }

	const FB25_BIT_OFFSET: u8 = 25;
	const FB25_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 25)
	pub fn get_fb25() -> u8 { ::read(REGISTER_ADDRESS, FB25_BIT_OFFSET, FB25_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 25)
	pub fn set_fb25(value: u8) { ::write(REGISTER_ADDRESS, FB25_BIT_OFFSET, FB25_BIT_WIDTH, value as u32); }

	const FB26_BIT_OFFSET: u8 = 26;
	const FB26_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 26)
	pub fn get_fb26() -> u8 { ::read(REGISTER_ADDRESS, FB26_BIT_OFFSET, FB26_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 26)
	pub fn set_fb26(value: u8) { ::write(REGISTER_ADDRESS, FB26_BIT_OFFSET, FB26_BIT_WIDTH, value as u32); }

	const FB27_BIT_OFFSET: u8 = 27;
	const FB27_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 27)
	pub fn get_fb27() -> u8 { ::read(REGISTER_ADDRESS, FB27_BIT_OFFSET, FB27_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 27)
	pub fn set_fb27(value: u8) { ::write(REGISTER_ADDRESS, FB27_BIT_OFFSET, FB27_BIT_WIDTH, value as u32); }

	const FB28_BIT_OFFSET: u8 = 28;
	const FB28_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 28)
	pub fn get_fb28() -> u8 { ::read(REGISTER_ADDRESS, FB28_BIT_OFFSET, FB28_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 28)
	pub fn set_fb28(value: u8) { ::write(REGISTER_ADDRESS, FB28_BIT_OFFSET, FB28_BIT_WIDTH, value as u32); }

	const FB29_BIT_OFFSET: u8 = 29;
	const FB29_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 29)
	pub fn get_fb29() -> u8 { ::read(REGISTER_ADDRESS, FB29_BIT_OFFSET, FB29_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 29)
	pub fn set_fb29(value: u8) { ::write(REGISTER_ADDRESS, FB29_BIT_OFFSET, FB29_BIT_WIDTH, value as u32); }

	const FB30_BIT_OFFSET: u8 = 30;
	const FB30_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 30)
	pub fn get_fb30() -> u8 { ::read(REGISTER_ADDRESS, FB30_BIT_OFFSET, FB30_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 30)
	pub fn set_fb30(value: u8) { ::write(REGISTER_ADDRESS, FB30_BIT_OFFSET, FB30_BIT_WIDTH, value as u32); }

	const FB31_BIT_OFFSET: u8 = 31;
	const FB31_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 31)
	pub fn get_fb31() -> u8 { ::read(REGISTER_ADDRESS, FB31_BIT_OFFSET, FB31_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 31)
	pub fn set_fb31(value: u8) { ::write(REGISTER_ADDRESS, FB31_BIT_OFFSET, FB31_BIT_WIDTH, value as u32); }
}
/// Filter bank 23 register 2
/// Size: 0x20 bits
pub mod f23r2 {
	const REGISTER_ADDRESS_OFFSET: u32 = 0x2FC;
	const REGISTER_ADDRESS: u32 = super::BASE_ADDRESS + REGISTER_ADDRESS_OFFSET;

	const FB0_BIT_OFFSET: u8 = 0;
	const FB0_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 0)
	pub fn get_fb0() -> u8 { ::read(REGISTER_ADDRESS, FB0_BIT_OFFSET, FB0_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 0)
	pub fn set_fb0(value: u8) { ::write(REGISTER_ADDRESS, FB0_BIT_OFFSET, FB0_BIT_WIDTH, value as u32); }

	const FB1_BIT_OFFSET: u8 = 1;
	const FB1_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 1)
	pub fn get_fb1() -> u8 { ::read(REGISTER_ADDRESS, FB1_BIT_OFFSET, FB1_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 1)
	pub fn set_fb1(value: u8) { ::write(REGISTER_ADDRESS, FB1_BIT_OFFSET, FB1_BIT_WIDTH, value as u32); }

	const FB2_BIT_OFFSET: u8 = 2;
	const FB2_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 2)
	pub fn get_fb2() -> u8 { ::read(REGISTER_ADDRESS, FB2_BIT_OFFSET, FB2_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 2)
	pub fn set_fb2(value: u8) { ::write(REGISTER_ADDRESS, FB2_BIT_OFFSET, FB2_BIT_WIDTH, value as u32); }

	const FB3_BIT_OFFSET: u8 = 3;
	const FB3_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 3)
	pub fn get_fb3() -> u8 { ::read(REGISTER_ADDRESS, FB3_BIT_OFFSET, FB3_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 3)
	pub fn set_fb3(value: u8) { ::write(REGISTER_ADDRESS, FB3_BIT_OFFSET, FB3_BIT_WIDTH, value as u32); }

	const FB4_BIT_OFFSET: u8 = 4;
	const FB4_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 4)
	pub fn get_fb4() -> u8 { ::read(REGISTER_ADDRESS, FB4_BIT_OFFSET, FB4_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 4)
	pub fn set_fb4(value: u8) { ::write(REGISTER_ADDRESS, FB4_BIT_OFFSET, FB4_BIT_WIDTH, value as u32); }

	const FB5_BIT_OFFSET: u8 = 5;
	const FB5_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 5)
	pub fn get_fb5() -> u8 { ::read(REGISTER_ADDRESS, FB5_BIT_OFFSET, FB5_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 5)
	pub fn set_fb5(value: u8) { ::write(REGISTER_ADDRESS, FB5_BIT_OFFSET, FB5_BIT_WIDTH, value as u32); }

	const FB6_BIT_OFFSET: u8 = 6;
	const FB6_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 6)
	pub fn get_fb6() -> u8 { ::read(REGISTER_ADDRESS, FB6_BIT_OFFSET, FB6_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 6)
	pub fn set_fb6(value: u8) { ::write(REGISTER_ADDRESS, FB6_BIT_OFFSET, FB6_BIT_WIDTH, value as u32); }

	const FB7_BIT_OFFSET: u8 = 7;
	const FB7_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 7)
	pub fn get_fb7() -> u8 { ::read(REGISTER_ADDRESS, FB7_BIT_OFFSET, FB7_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 7)
	pub fn set_fb7(value: u8) { ::write(REGISTER_ADDRESS, FB7_BIT_OFFSET, FB7_BIT_WIDTH, value as u32); }

	const FB8_BIT_OFFSET: u8 = 8;
	const FB8_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 8)
	pub fn get_fb8() -> u8 { ::read(REGISTER_ADDRESS, FB8_BIT_OFFSET, FB8_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 8)
	pub fn set_fb8(value: u8) { ::write(REGISTER_ADDRESS, FB8_BIT_OFFSET, FB8_BIT_WIDTH, value as u32); }

	const FB9_BIT_OFFSET: u8 = 9;
	const FB9_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 9)
	pub fn get_fb9() -> u8 { ::read(REGISTER_ADDRESS, FB9_BIT_OFFSET, FB9_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 9)
	pub fn set_fb9(value: u8) { ::write(REGISTER_ADDRESS, FB9_BIT_OFFSET, FB9_BIT_WIDTH, value as u32); }

	const FB10_BIT_OFFSET: u8 = 10;
	const FB10_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 10)
	pub fn get_fb10() -> u8 { ::read(REGISTER_ADDRESS, FB10_BIT_OFFSET, FB10_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 10)
	pub fn set_fb10(value: u8) { ::write(REGISTER_ADDRESS, FB10_BIT_OFFSET, FB10_BIT_WIDTH, value as u32); }

	const FB11_BIT_OFFSET: u8 = 11;
	const FB11_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 11)
	pub fn get_fb11() -> u8 { ::read(REGISTER_ADDRESS, FB11_BIT_OFFSET, FB11_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 11)
	pub fn set_fb11(value: u8) { ::write(REGISTER_ADDRESS, FB11_BIT_OFFSET, FB11_BIT_WIDTH, value as u32); }

	const FB12_BIT_OFFSET: u8 = 12;
	const FB12_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 12)
	pub fn get_fb12() -> u8 { ::read(REGISTER_ADDRESS, FB12_BIT_OFFSET, FB12_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 12)
	pub fn set_fb12(value: u8) { ::write(REGISTER_ADDRESS, FB12_BIT_OFFSET, FB12_BIT_WIDTH, value as u32); }

	const FB13_BIT_OFFSET: u8 = 13;
	const FB13_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 13)
	pub fn get_fb13() -> u8 { ::read(REGISTER_ADDRESS, FB13_BIT_OFFSET, FB13_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 13)
	pub fn set_fb13(value: u8) { ::write(REGISTER_ADDRESS, FB13_BIT_OFFSET, FB13_BIT_WIDTH, value as u32); }

	const FB14_BIT_OFFSET: u8 = 14;
	const FB14_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 14)
	pub fn get_fb14() -> u8 { ::read(REGISTER_ADDRESS, FB14_BIT_OFFSET, FB14_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 14)
	pub fn set_fb14(value: u8) { ::write(REGISTER_ADDRESS, FB14_BIT_OFFSET, FB14_BIT_WIDTH, value as u32); }

	const FB15_BIT_OFFSET: u8 = 15;
	const FB15_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 15)
	pub fn get_fb15() -> u8 { ::read(REGISTER_ADDRESS, FB15_BIT_OFFSET, FB15_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 15)
	pub fn set_fb15(value: u8) { ::write(REGISTER_ADDRESS, FB15_BIT_OFFSET, FB15_BIT_WIDTH, value as u32); }

	const FB16_BIT_OFFSET: u8 = 16;
	const FB16_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 16)
	pub fn get_fb16() -> u8 { ::read(REGISTER_ADDRESS, FB16_BIT_OFFSET, FB16_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 16)
	pub fn set_fb16(value: u8) { ::write(REGISTER_ADDRESS, FB16_BIT_OFFSET, FB16_BIT_WIDTH, value as u32); }

	const FB17_BIT_OFFSET: u8 = 17;
	const FB17_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 17)
	pub fn get_fb17() -> u8 { ::read(REGISTER_ADDRESS, FB17_BIT_OFFSET, FB17_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 17)
	pub fn set_fb17(value: u8) { ::write(REGISTER_ADDRESS, FB17_BIT_OFFSET, FB17_BIT_WIDTH, value as u32); }

	const FB18_BIT_OFFSET: u8 = 18;
	const FB18_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 18)
	pub fn get_fb18() -> u8 { ::read(REGISTER_ADDRESS, FB18_BIT_OFFSET, FB18_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 18)
	pub fn set_fb18(value: u8) { ::write(REGISTER_ADDRESS, FB18_BIT_OFFSET, FB18_BIT_WIDTH, value as u32); }

	const FB19_BIT_OFFSET: u8 = 19;
	const FB19_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 19)
	pub fn get_fb19() -> u8 { ::read(REGISTER_ADDRESS, FB19_BIT_OFFSET, FB19_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 19)
	pub fn set_fb19(value: u8) { ::write(REGISTER_ADDRESS, FB19_BIT_OFFSET, FB19_BIT_WIDTH, value as u32); }

	const FB20_BIT_OFFSET: u8 = 20;
	const FB20_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 20)
	pub fn get_fb20() -> u8 { ::read(REGISTER_ADDRESS, FB20_BIT_OFFSET, FB20_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 20)
	pub fn set_fb20(value: u8) { ::write(REGISTER_ADDRESS, FB20_BIT_OFFSET, FB20_BIT_WIDTH, value as u32); }

	const FB21_BIT_OFFSET: u8 = 21;
	const FB21_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 21)
	pub fn get_fb21() -> u8 { ::read(REGISTER_ADDRESS, FB21_BIT_OFFSET, FB21_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 21)
	pub fn set_fb21(value: u8) { ::write(REGISTER_ADDRESS, FB21_BIT_OFFSET, FB21_BIT_WIDTH, value as u32); }

	const FB22_BIT_OFFSET: u8 = 22;
	const FB22_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 22)
	pub fn get_fb22() -> u8 { ::read(REGISTER_ADDRESS, FB22_BIT_OFFSET, FB22_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 22)
	pub fn set_fb22(value: u8) { ::write(REGISTER_ADDRESS, FB22_BIT_OFFSET, FB22_BIT_WIDTH, value as u32); }

	const FB23_BIT_OFFSET: u8 = 23;
	const FB23_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 23)
	pub fn get_fb23() -> u8 { ::read(REGISTER_ADDRESS, FB23_BIT_OFFSET, FB23_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 23)
	pub fn set_fb23(value: u8) { ::write(REGISTER_ADDRESS, FB23_BIT_OFFSET, FB23_BIT_WIDTH, value as u32); }

	const FB24_BIT_OFFSET: u8 = 24;
	const FB24_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 24)
	pub fn get_fb24() -> u8 { ::read(REGISTER_ADDRESS, FB24_BIT_OFFSET, FB24_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 24)
	pub fn set_fb24(value: u8) { ::write(REGISTER_ADDRESS, FB24_BIT_OFFSET, FB24_BIT_WIDTH, value as u32); }

	const FB25_BIT_OFFSET: u8 = 25;
	const FB25_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 25)
	pub fn get_fb25() -> u8 { ::read(REGISTER_ADDRESS, FB25_BIT_OFFSET, FB25_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 25)
	pub fn set_fb25(value: u8) { ::write(REGISTER_ADDRESS, FB25_BIT_OFFSET, FB25_BIT_WIDTH, value as u32); }

	const FB26_BIT_OFFSET: u8 = 26;
	const FB26_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 26)
	pub fn get_fb26() -> u8 { ::read(REGISTER_ADDRESS, FB26_BIT_OFFSET, FB26_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 26)
	pub fn set_fb26(value: u8) { ::write(REGISTER_ADDRESS, FB26_BIT_OFFSET, FB26_BIT_WIDTH, value as u32); }

	const FB27_BIT_OFFSET: u8 = 27;
	const FB27_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 27)
	pub fn get_fb27() -> u8 { ::read(REGISTER_ADDRESS, FB27_BIT_OFFSET, FB27_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 27)
	pub fn set_fb27(value: u8) { ::write(REGISTER_ADDRESS, FB27_BIT_OFFSET, FB27_BIT_WIDTH, value as u32); }

	const FB28_BIT_OFFSET: u8 = 28;
	const FB28_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 28)
	pub fn get_fb28() -> u8 { ::read(REGISTER_ADDRESS, FB28_BIT_OFFSET, FB28_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 28)
	pub fn set_fb28(value: u8) { ::write(REGISTER_ADDRESS, FB28_BIT_OFFSET, FB28_BIT_WIDTH, value as u32); }

	const FB29_BIT_OFFSET: u8 = 29;
	const FB29_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 29)
	pub fn get_fb29() -> u8 { ::read(REGISTER_ADDRESS, FB29_BIT_OFFSET, FB29_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 29)
	pub fn set_fb29(value: u8) { ::write(REGISTER_ADDRESS, FB29_BIT_OFFSET, FB29_BIT_WIDTH, value as u32); }

	const FB30_BIT_OFFSET: u8 = 30;
	const FB30_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 30)
	pub fn get_fb30() -> u8 { ::read(REGISTER_ADDRESS, FB30_BIT_OFFSET, FB30_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 30)
	pub fn set_fb30(value: u8) { ::write(REGISTER_ADDRESS, FB30_BIT_OFFSET, FB30_BIT_WIDTH, value as u32); }

	const FB31_BIT_OFFSET: u8 = 31;
	const FB31_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 31)
	pub fn get_fb31() -> u8 { ::read(REGISTER_ADDRESS, FB31_BIT_OFFSET, FB31_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 31)
	pub fn set_fb31(value: u8) { ::write(REGISTER_ADDRESS, FB31_BIT_OFFSET, FB31_BIT_WIDTH, value as u32); }
}
/// Filter bank 24 register 1
/// Size: 0x20 bits
pub mod f24r1 {
	const REGISTER_ADDRESS_OFFSET: u32 = 0x300;
	const REGISTER_ADDRESS: u32 = super::BASE_ADDRESS + REGISTER_ADDRESS_OFFSET;

	const FB0_BIT_OFFSET: u8 = 0;
	const FB0_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 0)
	pub fn get_fb0() -> u8 { ::read(REGISTER_ADDRESS, FB0_BIT_OFFSET, FB0_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 0)
	pub fn set_fb0(value: u8) { ::write(REGISTER_ADDRESS, FB0_BIT_OFFSET, FB0_BIT_WIDTH, value as u32); }

	const FB1_BIT_OFFSET: u8 = 1;
	const FB1_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 1)
	pub fn get_fb1() -> u8 { ::read(REGISTER_ADDRESS, FB1_BIT_OFFSET, FB1_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 1)
	pub fn set_fb1(value: u8) { ::write(REGISTER_ADDRESS, FB1_BIT_OFFSET, FB1_BIT_WIDTH, value as u32); }

	const FB2_BIT_OFFSET: u8 = 2;
	const FB2_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 2)
	pub fn get_fb2() -> u8 { ::read(REGISTER_ADDRESS, FB2_BIT_OFFSET, FB2_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 2)
	pub fn set_fb2(value: u8) { ::write(REGISTER_ADDRESS, FB2_BIT_OFFSET, FB2_BIT_WIDTH, value as u32); }

	const FB3_BIT_OFFSET: u8 = 3;
	const FB3_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 3)
	pub fn get_fb3() -> u8 { ::read(REGISTER_ADDRESS, FB3_BIT_OFFSET, FB3_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 3)
	pub fn set_fb3(value: u8) { ::write(REGISTER_ADDRESS, FB3_BIT_OFFSET, FB3_BIT_WIDTH, value as u32); }

	const FB4_BIT_OFFSET: u8 = 4;
	const FB4_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 4)
	pub fn get_fb4() -> u8 { ::read(REGISTER_ADDRESS, FB4_BIT_OFFSET, FB4_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 4)
	pub fn set_fb4(value: u8) { ::write(REGISTER_ADDRESS, FB4_BIT_OFFSET, FB4_BIT_WIDTH, value as u32); }

	const FB5_BIT_OFFSET: u8 = 5;
	const FB5_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 5)
	pub fn get_fb5() -> u8 { ::read(REGISTER_ADDRESS, FB5_BIT_OFFSET, FB5_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 5)
	pub fn set_fb5(value: u8) { ::write(REGISTER_ADDRESS, FB5_BIT_OFFSET, FB5_BIT_WIDTH, value as u32); }

	const FB6_BIT_OFFSET: u8 = 6;
	const FB6_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 6)
	pub fn get_fb6() -> u8 { ::read(REGISTER_ADDRESS, FB6_BIT_OFFSET, FB6_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 6)
	pub fn set_fb6(value: u8) { ::write(REGISTER_ADDRESS, FB6_BIT_OFFSET, FB6_BIT_WIDTH, value as u32); }

	const FB7_BIT_OFFSET: u8 = 7;
	const FB7_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 7)
	pub fn get_fb7() -> u8 { ::read(REGISTER_ADDRESS, FB7_BIT_OFFSET, FB7_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 7)
	pub fn set_fb7(value: u8) { ::write(REGISTER_ADDRESS, FB7_BIT_OFFSET, FB7_BIT_WIDTH, value as u32); }

	const FB8_BIT_OFFSET: u8 = 8;
	const FB8_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 8)
	pub fn get_fb8() -> u8 { ::read(REGISTER_ADDRESS, FB8_BIT_OFFSET, FB8_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 8)
	pub fn set_fb8(value: u8) { ::write(REGISTER_ADDRESS, FB8_BIT_OFFSET, FB8_BIT_WIDTH, value as u32); }

	const FB9_BIT_OFFSET: u8 = 9;
	const FB9_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 9)
	pub fn get_fb9() -> u8 { ::read(REGISTER_ADDRESS, FB9_BIT_OFFSET, FB9_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 9)
	pub fn set_fb9(value: u8) { ::write(REGISTER_ADDRESS, FB9_BIT_OFFSET, FB9_BIT_WIDTH, value as u32); }

	const FB10_BIT_OFFSET: u8 = 10;
	const FB10_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 10)
	pub fn get_fb10() -> u8 { ::read(REGISTER_ADDRESS, FB10_BIT_OFFSET, FB10_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 10)
	pub fn set_fb10(value: u8) { ::write(REGISTER_ADDRESS, FB10_BIT_OFFSET, FB10_BIT_WIDTH, value as u32); }

	const FB11_BIT_OFFSET: u8 = 11;
	const FB11_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 11)
	pub fn get_fb11() -> u8 { ::read(REGISTER_ADDRESS, FB11_BIT_OFFSET, FB11_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 11)
	pub fn set_fb11(value: u8) { ::write(REGISTER_ADDRESS, FB11_BIT_OFFSET, FB11_BIT_WIDTH, value as u32); }

	const FB12_BIT_OFFSET: u8 = 12;
	const FB12_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 12)
	pub fn get_fb12() -> u8 { ::read(REGISTER_ADDRESS, FB12_BIT_OFFSET, FB12_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 12)
	pub fn set_fb12(value: u8) { ::write(REGISTER_ADDRESS, FB12_BIT_OFFSET, FB12_BIT_WIDTH, value as u32); }

	const FB13_BIT_OFFSET: u8 = 13;
	const FB13_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 13)
	pub fn get_fb13() -> u8 { ::read(REGISTER_ADDRESS, FB13_BIT_OFFSET, FB13_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 13)
	pub fn set_fb13(value: u8) { ::write(REGISTER_ADDRESS, FB13_BIT_OFFSET, FB13_BIT_WIDTH, value as u32); }

	const FB14_BIT_OFFSET: u8 = 14;
	const FB14_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 14)
	pub fn get_fb14() -> u8 { ::read(REGISTER_ADDRESS, FB14_BIT_OFFSET, FB14_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 14)
	pub fn set_fb14(value: u8) { ::write(REGISTER_ADDRESS, FB14_BIT_OFFSET, FB14_BIT_WIDTH, value as u32); }

	const FB15_BIT_OFFSET: u8 = 15;
	const FB15_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 15)
	pub fn get_fb15() -> u8 { ::read(REGISTER_ADDRESS, FB15_BIT_OFFSET, FB15_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 15)
	pub fn set_fb15(value: u8) { ::write(REGISTER_ADDRESS, FB15_BIT_OFFSET, FB15_BIT_WIDTH, value as u32); }

	const FB16_BIT_OFFSET: u8 = 16;
	const FB16_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 16)
	pub fn get_fb16() -> u8 { ::read(REGISTER_ADDRESS, FB16_BIT_OFFSET, FB16_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 16)
	pub fn set_fb16(value: u8) { ::write(REGISTER_ADDRESS, FB16_BIT_OFFSET, FB16_BIT_WIDTH, value as u32); }

	const FB17_BIT_OFFSET: u8 = 17;
	const FB17_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 17)
	pub fn get_fb17() -> u8 { ::read(REGISTER_ADDRESS, FB17_BIT_OFFSET, FB17_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 17)
	pub fn set_fb17(value: u8) { ::write(REGISTER_ADDRESS, FB17_BIT_OFFSET, FB17_BIT_WIDTH, value as u32); }

	const FB18_BIT_OFFSET: u8 = 18;
	const FB18_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 18)
	pub fn get_fb18() -> u8 { ::read(REGISTER_ADDRESS, FB18_BIT_OFFSET, FB18_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 18)
	pub fn set_fb18(value: u8) { ::write(REGISTER_ADDRESS, FB18_BIT_OFFSET, FB18_BIT_WIDTH, value as u32); }

	const FB19_BIT_OFFSET: u8 = 19;
	const FB19_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 19)
	pub fn get_fb19() -> u8 { ::read(REGISTER_ADDRESS, FB19_BIT_OFFSET, FB19_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 19)
	pub fn set_fb19(value: u8) { ::write(REGISTER_ADDRESS, FB19_BIT_OFFSET, FB19_BIT_WIDTH, value as u32); }

	const FB20_BIT_OFFSET: u8 = 20;
	const FB20_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 20)
	pub fn get_fb20() -> u8 { ::read(REGISTER_ADDRESS, FB20_BIT_OFFSET, FB20_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 20)
	pub fn set_fb20(value: u8) { ::write(REGISTER_ADDRESS, FB20_BIT_OFFSET, FB20_BIT_WIDTH, value as u32); }

	const FB21_BIT_OFFSET: u8 = 21;
	const FB21_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 21)
	pub fn get_fb21() -> u8 { ::read(REGISTER_ADDRESS, FB21_BIT_OFFSET, FB21_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 21)
	pub fn set_fb21(value: u8) { ::write(REGISTER_ADDRESS, FB21_BIT_OFFSET, FB21_BIT_WIDTH, value as u32); }

	const FB22_BIT_OFFSET: u8 = 22;
	const FB22_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 22)
	pub fn get_fb22() -> u8 { ::read(REGISTER_ADDRESS, FB22_BIT_OFFSET, FB22_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 22)
	pub fn set_fb22(value: u8) { ::write(REGISTER_ADDRESS, FB22_BIT_OFFSET, FB22_BIT_WIDTH, value as u32); }

	const FB23_BIT_OFFSET: u8 = 23;
	const FB23_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 23)
	pub fn get_fb23() -> u8 { ::read(REGISTER_ADDRESS, FB23_BIT_OFFSET, FB23_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 23)
	pub fn set_fb23(value: u8) { ::write(REGISTER_ADDRESS, FB23_BIT_OFFSET, FB23_BIT_WIDTH, value as u32); }

	const FB24_BIT_OFFSET: u8 = 24;
	const FB24_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 24)
	pub fn get_fb24() -> u8 { ::read(REGISTER_ADDRESS, FB24_BIT_OFFSET, FB24_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 24)
	pub fn set_fb24(value: u8) { ::write(REGISTER_ADDRESS, FB24_BIT_OFFSET, FB24_BIT_WIDTH, value as u32); }

	const FB25_BIT_OFFSET: u8 = 25;
	const FB25_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 25)
	pub fn get_fb25() -> u8 { ::read(REGISTER_ADDRESS, FB25_BIT_OFFSET, FB25_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 25)
	pub fn set_fb25(value: u8) { ::write(REGISTER_ADDRESS, FB25_BIT_OFFSET, FB25_BIT_WIDTH, value as u32); }

	const FB26_BIT_OFFSET: u8 = 26;
	const FB26_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 26)
	pub fn get_fb26() -> u8 { ::read(REGISTER_ADDRESS, FB26_BIT_OFFSET, FB26_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 26)
	pub fn set_fb26(value: u8) { ::write(REGISTER_ADDRESS, FB26_BIT_OFFSET, FB26_BIT_WIDTH, value as u32); }

	const FB27_BIT_OFFSET: u8 = 27;
	const FB27_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 27)
	pub fn get_fb27() -> u8 { ::read(REGISTER_ADDRESS, FB27_BIT_OFFSET, FB27_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 27)
	pub fn set_fb27(value: u8) { ::write(REGISTER_ADDRESS, FB27_BIT_OFFSET, FB27_BIT_WIDTH, value as u32); }

	const FB28_BIT_OFFSET: u8 = 28;
	const FB28_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 28)
	pub fn get_fb28() -> u8 { ::read(REGISTER_ADDRESS, FB28_BIT_OFFSET, FB28_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 28)
	pub fn set_fb28(value: u8) { ::write(REGISTER_ADDRESS, FB28_BIT_OFFSET, FB28_BIT_WIDTH, value as u32); }

	const FB29_BIT_OFFSET: u8 = 29;
	const FB29_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 29)
	pub fn get_fb29() -> u8 { ::read(REGISTER_ADDRESS, FB29_BIT_OFFSET, FB29_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 29)
	pub fn set_fb29(value: u8) { ::write(REGISTER_ADDRESS, FB29_BIT_OFFSET, FB29_BIT_WIDTH, value as u32); }

	const FB30_BIT_OFFSET: u8 = 30;
	const FB30_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 30)
	pub fn get_fb30() -> u8 { ::read(REGISTER_ADDRESS, FB30_BIT_OFFSET, FB30_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 30)
	pub fn set_fb30(value: u8) { ::write(REGISTER_ADDRESS, FB30_BIT_OFFSET, FB30_BIT_WIDTH, value as u32); }

	const FB31_BIT_OFFSET: u8 = 31;
	const FB31_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 31)
	pub fn get_fb31() -> u8 { ::read(REGISTER_ADDRESS, FB31_BIT_OFFSET, FB31_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 31)
	pub fn set_fb31(value: u8) { ::write(REGISTER_ADDRESS, FB31_BIT_OFFSET, FB31_BIT_WIDTH, value as u32); }
}
/// Filter bank 24 register 2
/// Size: 0x20 bits
pub mod f24r2 {
	const REGISTER_ADDRESS_OFFSET: u32 = 0x304;
	const REGISTER_ADDRESS: u32 = super::BASE_ADDRESS + REGISTER_ADDRESS_OFFSET;

	const FB0_BIT_OFFSET: u8 = 0;
	const FB0_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 0)
	pub fn get_fb0() -> u8 { ::read(REGISTER_ADDRESS, FB0_BIT_OFFSET, FB0_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 0)
	pub fn set_fb0(value: u8) { ::write(REGISTER_ADDRESS, FB0_BIT_OFFSET, FB0_BIT_WIDTH, value as u32); }

	const FB1_BIT_OFFSET: u8 = 1;
	const FB1_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 1)
	pub fn get_fb1() -> u8 { ::read(REGISTER_ADDRESS, FB1_BIT_OFFSET, FB1_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 1)
	pub fn set_fb1(value: u8) { ::write(REGISTER_ADDRESS, FB1_BIT_OFFSET, FB1_BIT_WIDTH, value as u32); }

	const FB2_BIT_OFFSET: u8 = 2;
	const FB2_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 2)
	pub fn get_fb2() -> u8 { ::read(REGISTER_ADDRESS, FB2_BIT_OFFSET, FB2_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 2)
	pub fn set_fb2(value: u8) { ::write(REGISTER_ADDRESS, FB2_BIT_OFFSET, FB2_BIT_WIDTH, value as u32); }

	const FB3_BIT_OFFSET: u8 = 3;
	const FB3_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 3)
	pub fn get_fb3() -> u8 { ::read(REGISTER_ADDRESS, FB3_BIT_OFFSET, FB3_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 3)
	pub fn set_fb3(value: u8) { ::write(REGISTER_ADDRESS, FB3_BIT_OFFSET, FB3_BIT_WIDTH, value as u32); }

	const FB4_BIT_OFFSET: u8 = 4;
	const FB4_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 4)
	pub fn get_fb4() -> u8 { ::read(REGISTER_ADDRESS, FB4_BIT_OFFSET, FB4_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 4)
	pub fn set_fb4(value: u8) { ::write(REGISTER_ADDRESS, FB4_BIT_OFFSET, FB4_BIT_WIDTH, value as u32); }

	const FB5_BIT_OFFSET: u8 = 5;
	const FB5_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 5)
	pub fn get_fb5() -> u8 { ::read(REGISTER_ADDRESS, FB5_BIT_OFFSET, FB5_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 5)
	pub fn set_fb5(value: u8) { ::write(REGISTER_ADDRESS, FB5_BIT_OFFSET, FB5_BIT_WIDTH, value as u32); }

	const FB6_BIT_OFFSET: u8 = 6;
	const FB6_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 6)
	pub fn get_fb6() -> u8 { ::read(REGISTER_ADDRESS, FB6_BIT_OFFSET, FB6_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 6)
	pub fn set_fb6(value: u8) { ::write(REGISTER_ADDRESS, FB6_BIT_OFFSET, FB6_BIT_WIDTH, value as u32); }

	const FB7_BIT_OFFSET: u8 = 7;
	const FB7_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 7)
	pub fn get_fb7() -> u8 { ::read(REGISTER_ADDRESS, FB7_BIT_OFFSET, FB7_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 7)
	pub fn set_fb7(value: u8) { ::write(REGISTER_ADDRESS, FB7_BIT_OFFSET, FB7_BIT_WIDTH, value as u32); }

	const FB8_BIT_OFFSET: u8 = 8;
	const FB8_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 8)
	pub fn get_fb8() -> u8 { ::read(REGISTER_ADDRESS, FB8_BIT_OFFSET, FB8_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 8)
	pub fn set_fb8(value: u8) { ::write(REGISTER_ADDRESS, FB8_BIT_OFFSET, FB8_BIT_WIDTH, value as u32); }

	const FB9_BIT_OFFSET: u8 = 9;
	const FB9_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 9)
	pub fn get_fb9() -> u8 { ::read(REGISTER_ADDRESS, FB9_BIT_OFFSET, FB9_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 9)
	pub fn set_fb9(value: u8) { ::write(REGISTER_ADDRESS, FB9_BIT_OFFSET, FB9_BIT_WIDTH, value as u32); }

	const FB10_BIT_OFFSET: u8 = 10;
	const FB10_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 10)
	pub fn get_fb10() -> u8 { ::read(REGISTER_ADDRESS, FB10_BIT_OFFSET, FB10_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 10)
	pub fn set_fb10(value: u8) { ::write(REGISTER_ADDRESS, FB10_BIT_OFFSET, FB10_BIT_WIDTH, value as u32); }

	const FB11_BIT_OFFSET: u8 = 11;
	const FB11_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 11)
	pub fn get_fb11() -> u8 { ::read(REGISTER_ADDRESS, FB11_BIT_OFFSET, FB11_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 11)
	pub fn set_fb11(value: u8) { ::write(REGISTER_ADDRESS, FB11_BIT_OFFSET, FB11_BIT_WIDTH, value as u32); }

	const FB12_BIT_OFFSET: u8 = 12;
	const FB12_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 12)
	pub fn get_fb12() -> u8 { ::read(REGISTER_ADDRESS, FB12_BIT_OFFSET, FB12_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 12)
	pub fn set_fb12(value: u8) { ::write(REGISTER_ADDRESS, FB12_BIT_OFFSET, FB12_BIT_WIDTH, value as u32); }

	const FB13_BIT_OFFSET: u8 = 13;
	const FB13_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 13)
	pub fn get_fb13() -> u8 { ::read(REGISTER_ADDRESS, FB13_BIT_OFFSET, FB13_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 13)
	pub fn set_fb13(value: u8) { ::write(REGISTER_ADDRESS, FB13_BIT_OFFSET, FB13_BIT_WIDTH, value as u32); }

	const FB14_BIT_OFFSET: u8 = 14;
	const FB14_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 14)
	pub fn get_fb14() -> u8 { ::read(REGISTER_ADDRESS, FB14_BIT_OFFSET, FB14_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 14)
	pub fn set_fb14(value: u8) { ::write(REGISTER_ADDRESS, FB14_BIT_OFFSET, FB14_BIT_WIDTH, value as u32); }

	const FB15_BIT_OFFSET: u8 = 15;
	const FB15_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 15)
	pub fn get_fb15() -> u8 { ::read(REGISTER_ADDRESS, FB15_BIT_OFFSET, FB15_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 15)
	pub fn set_fb15(value: u8) { ::write(REGISTER_ADDRESS, FB15_BIT_OFFSET, FB15_BIT_WIDTH, value as u32); }

	const FB16_BIT_OFFSET: u8 = 16;
	const FB16_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 16)
	pub fn get_fb16() -> u8 { ::read(REGISTER_ADDRESS, FB16_BIT_OFFSET, FB16_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 16)
	pub fn set_fb16(value: u8) { ::write(REGISTER_ADDRESS, FB16_BIT_OFFSET, FB16_BIT_WIDTH, value as u32); }

	const FB17_BIT_OFFSET: u8 = 17;
	const FB17_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 17)
	pub fn get_fb17() -> u8 { ::read(REGISTER_ADDRESS, FB17_BIT_OFFSET, FB17_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 17)
	pub fn set_fb17(value: u8) { ::write(REGISTER_ADDRESS, FB17_BIT_OFFSET, FB17_BIT_WIDTH, value as u32); }

	const FB18_BIT_OFFSET: u8 = 18;
	const FB18_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 18)
	pub fn get_fb18() -> u8 { ::read(REGISTER_ADDRESS, FB18_BIT_OFFSET, FB18_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 18)
	pub fn set_fb18(value: u8) { ::write(REGISTER_ADDRESS, FB18_BIT_OFFSET, FB18_BIT_WIDTH, value as u32); }

	const FB19_BIT_OFFSET: u8 = 19;
	const FB19_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 19)
	pub fn get_fb19() -> u8 { ::read(REGISTER_ADDRESS, FB19_BIT_OFFSET, FB19_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 19)
	pub fn set_fb19(value: u8) { ::write(REGISTER_ADDRESS, FB19_BIT_OFFSET, FB19_BIT_WIDTH, value as u32); }

	const FB20_BIT_OFFSET: u8 = 20;
	const FB20_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 20)
	pub fn get_fb20() -> u8 { ::read(REGISTER_ADDRESS, FB20_BIT_OFFSET, FB20_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 20)
	pub fn set_fb20(value: u8) { ::write(REGISTER_ADDRESS, FB20_BIT_OFFSET, FB20_BIT_WIDTH, value as u32); }

	const FB21_BIT_OFFSET: u8 = 21;
	const FB21_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 21)
	pub fn get_fb21() -> u8 { ::read(REGISTER_ADDRESS, FB21_BIT_OFFSET, FB21_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 21)
	pub fn set_fb21(value: u8) { ::write(REGISTER_ADDRESS, FB21_BIT_OFFSET, FB21_BIT_WIDTH, value as u32); }

	const FB22_BIT_OFFSET: u8 = 22;
	const FB22_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 22)
	pub fn get_fb22() -> u8 { ::read(REGISTER_ADDRESS, FB22_BIT_OFFSET, FB22_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 22)
	pub fn set_fb22(value: u8) { ::write(REGISTER_ADDRESS, FB22_BIT_OFFSET, FB22_BIT_WIDTH, value as u32); }

	const FB23_BIT_OFFSET: u8 = 23;
	const FB23_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 23)
	pub fn get_fb23() -> u8 { ::read(REGISTER_ADDRESS, FB23_BIT_OFFSET, FB23_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 23)
	pub fn set_fb23(value: u8) { ::write(REGISTER_ADDRESS, FB23_BIT_OFFSET, FB23_BIT_WIDTH, value as u32); }

	const FB24_BIT_OFFSET: u8 = 24;
	const FB24_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 24)
	pub fn get_fb24() -> u8 { ::read(REGISTER_ADDRESS, FB24_BIT_OFFSET, FB24_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 24)
	pub fn set_fb24(value: u8) { ::write(REGISTER_ADDRESS, FB24_BIT_OFFSET, FB24_BIT_WIDTH, value as u32); }

	const FB25_BIT_OFFSET: u8 = 25;
	const FB25_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 25)
	pub fn get_fb25() -> u8 { ::read(REGISTER_ADDRESS, FB25_BIT_OFFSET, FB25_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 25)
	pub fn set_fb25(value: u8) { ::write(REGISTER_ADDRESS, FB25_BIT_OFFSET, FB25_BIT_WIDTH, value as u32); }

	const FB26_BIT_OFFSET: u8 = 26;
	const FB26_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 26)
	pub fn get_fb26() -> u8 { ::read(REGISTER_ADDRESS, FB26_BIT_OFFSET, FB26_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 26)
	pub fn set_fb26(value: u8) { ::write(REGISTER_ADDRESS, FB26_BIT_OFFSET, FB26_BIT_WIDTH, value as u32); }

	const FB27_BIT_OFFSET: u8 = 27;
	const FB27_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 27)
	pub fn get_fb27() -> u8 { ::read(REGISTER_ADDRESS, FB27_BIT_OFFSET, FB27_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 27)
	pub fn set_fb27(value: u8) { ::write(REGISTER_ADDRESS, FB27_BIT_OFFSET, FB27_BIT_WIDTH, value as u32); }

	const FB28_BIT_OFFSET: u8 = 28;
	const FB28_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 28)
	pub fn get_fb28() -> u8 { ::read(REGISTER_ADDRESS, FB28_BIT_OFFSET, FB28_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 28)
	pub fn set_fb28(value: u8) { ::write(REGISTER_ADDRESS, FB28_BIT_OFFSET, FB28_BIT_WIDTH, value as u32); }

	const FB29_BIT_OFFSET: u8 = 29;
	const FB29_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 29)
	pub fn get_fb29() -> u8 { ::read(REGISTER_ADDRESS, FB29_BIT_OFFSET, FB29_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 29)
	pub fn set_fb29(value: u8) { ::write(REGISTER_ADDRESS, FB29_BIT_OFFSET, FB29_BIT_WIDTH, value as u32); }

	const FB30_BIT_OFFSET: u8 = 30;
	const FB30_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 30)
	pub fn get_fb30() -> u8 { ::read(REGISTER_ADDRESS, FB30_BIT_OFFSET, FB30_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 30)
	pub fn set_fb30(value: u8) { ::write(REGISTER_ADDRESS, FB30_BIT_OFFSET, FB30_BIT_WIDTH, value as u32); }

	const FB31_BIT_OFFSET: u8 = 31;
	const FB31_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 31)
	pub fn get_fb31() -> u8 { ::read(REGISTER_ADDRESS, FB31_BIT_OFFSET, FB31_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 31)
	pub fn set_fb31(value: u8) { ::write(REGISTER_ADDRESS, FB31_BIT_OFFSET, FB31_BIT_WIDTH, value as u32); }
}
/// Filter bank 25 register 1
/// Size: 0x20 bits
pub mod f25r1 {
	const REGISTER_ADDRESS_OFFSET: u32 = 0x308;
	const REGISTER_ADDRESS: u32 = super::BASE_ADDRESS + REGISTER_ADDRESS_OFFSET;

	const FB0_BIT_OFFSET: u8 = 0;
	const FB0_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 0)
	pub fn get_fb0() -> u8 { ::read(REGISTER_ADDRESS, FB0_BIT_OFFSET, FB0_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 0)
	pub fn set_fb0(value: u8) { ::write(REGISTER_ADDRESS, FB0_BIT_OFFSET, FB0_BIT_WIDTH, value as u32); }

	const FB1_BIT_OFFSET: u8 = 1;
	const FB1_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 1)
	pub fn get_fb1() -> u8 { ::read(REGISTER_ADDRESS, FB1_BIT_OFFSET, FB1_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 1)
	pub fn set_fb1(value: u8) { ::write(REGISTER_ADDRESS, FB1_BIT_OFFSET, FB1_BIT_WIDTH, value as u32); }

	const FB2_BIT_OFFSET: u8 = 2;
	const FB2_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 2)
	pub fn get_fb2() -> u8 { ::read(REGISTER_ADDRESS, FB2_BIT_OFFSET, FB2_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 2)
	pub fn set_fb2(value: u8) { ::write(REGISTER_ADDRESS, FB2_BIT_OFFSET, FB2_BIT_WIDTH, value as u32); }

	const FB3_BIT_OFFSET: u8 = 3;
	const FB3_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 3)
	pub fn get_fb3() -> u8 { ::read(REGISTER_ADDRESS, FB3_BIT_OFFSET, FB3_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 3)
	pub fn set_fb3(value: u8) { ::write(REGISTER_ADDRESS, FB3_BIT_OFFSET, FB3_BIT_WIDTH, value as u32); }

	const FB4_BIT_OFFSET: u8 = 4;
	const FB4_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 4)
	pub fn get_fb4() -> u8 { ::read(REGISTER_ADDRESS, FB4_BIT_OFFSET, FB4_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 4)
	pub fn set_fb4(value: u8) { ::write(REGISTER_ADDRESS, FB4_BIT_OFFSET, FB4_BIT_WIDTH, value as u32); }

	const FB5_BIT_OFFSET: u8 = 5;
	const FB5_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 5)
	pub fn get_fb5() -> u8 { ::read(REGISTER_ADDRESS, FB5_BIT_OFFSET, FB5_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 5)
	pub fn set_fb5(value: u8) { ::write(REGISTER_ADDRESS, FB5_BIT_OFFSET, FB5_BIT_WIDTH, value as u32); }

	const FB6_BIT_OFFSET: u8 = 6;
	const FB6_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 6)
	pub fn get_fb6() -> u8 { ::read(REGISTER_ADDRESS, FB6_BIT_OFFSET, FB6_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 6)
	pub fn set_fb6(value: u8) { ::write(REGISTER_ADDRESS, FB6_BIT_OFFSET, FB6_BIT_WIDTH, value as u32); }

	const FB7_BIT_OFFSET: u8 = 7;
	const FB7_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 7)
	pub fn get_fb7() -> u8 { ::read(REGISTER_ADDRESS, FB7_BIT_OFFSET, FB7_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 7)
	pub fn set_fb7(value: u8) { ::write(REGISTER_ADDRESS, FB7_BIT_OFFSET, FB7_BIT_WIDTH, value as u32); }

	const FB8_BIT_OFFSET: u8 = 8;
	const FB8_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 8)
	pub fn get_fb8() -> u8 { ::read(REGISTER_ADDRESS, FB8_BIT_OFFSET, FB8_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 8)
	pub fn set_fb8(value: u8) { ::write(REGISTER_ADDRESS, FB8_BIT_OFFSET, FB8_BIT_WIDTH, value as u32); }

	const FB9_BIT_OFFSET: u8 = 9;
	const FB9_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 9)
	pub fn get_fb9() -> u8 { ::read(REGISTER_ADDRESS, FB9_BIT_OFFSET, FB9_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 9)
	pub fn set_fb9(value: u8) { ::write(REGISTER_ADDRESS, FB9_BIT_OFFSET, FB9_BIT_WIDTH, value as u32); }

	const FB10_BIT_OFFSET: u8 = 10;
	const FB10_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 10)
	pub fn get_fb10() -> u8 { ::read(REGISTER_ADDRESS, FB10_BIT_OFFSET, FB10_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 10)
	pub fn set_fb10(value: u8) { ::write(REGISTER_ADDRESS, FB10_BIT_OFFSET, FB10_BIT_WIDTH, value as u32); }

	const FB11_BIT_OFFSET: u8 = 11;
	const FB11_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 11)
	pub fn get_fb11() -> u8 { ::read(REGISTER_ADDRESS, FB11_BIT_OFFSET, FB11_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 11)
	pub fn set_fb11(value: u8) { ::write(REGISTER_ADDRESS, FB11_BIT_OFFSET, FB11_BIT_WIDTH, value as u32); }

	const FB12_BIT_OFFSET: u8 = 12;
	const FB12_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 12)
	pub fn get_fb12() -> u8 { ::read(REGISTER_ADDRESS, FB12_BIT_OFFSET, FB12_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 12)
	pub fn set_fb12(value: u8) { ::write(REGISTER_ADDRESS, FB12_BIT_OFFSET, FB12_BIT_WIDTH, value as u32); }

	const FB13_BIT_OFFSET: u8 = 13;
	const FB13_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 13)
	pub fn get_fb13() -> u8 { ::read(REGISTER_ADDRESS, FB13_BIT_OFFSET, FB13_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 13)
	pub fn set_fb13(value: u8) { ::write(REGISTER_ADDRESS, FB13_BIT_OFFSET, FB13_BIT_WIDTH, value as u32); }

	const FB14_BIT_OFFSET: u8 = 14;
	const FB14_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 14)
	pub fn get_fb14() -> u8 { ::read(REGISTER_ADDRESS, FB14_BIT_OFFSET, FB14_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 14)
	pub fn set_fb14(value: u8) { ::write(REGISTER_ADDRESS, FB14_BIT_OFFSET, FB14_BIT_WIDTH, value as u32); }

	const FB15_BIT_OFFSET: u8 = 15;
	const FB15_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 15)
	pub fn get_fb15() -> u8 { ::read(REGISTER_ADDRESS, FB15_BIT_OFFSET, FB15_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 15)
	pub fn set_fb15(value: u8) { ::write(REGISTER_ADDRESS, FB15_BIT_OFFSET, FB15_BIT_WIDTH, value as u32); }

	const FB16_BIT_OFFSET: u8 = 16;
	const FB16_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 16)
	pub fn get_fb16() -> u8 { ::read(REGISTER_ADDRESS, FB16_BIT_OFFSET, FB16_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 16)
	pub fn set_fb16(value: u8) { ::write(REGISTER_ADDRESS, FB16_BIT_OFFSET, FB16_BIT_WIDTH, value as u32); }

	const FB17_BIT_OFFSET: u8 = 17;
	const FB17_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 17)
	pub fn get_fb17() -> u8 { ::read(REGISTER_ADDRESS, FB17_BIT_OFFSET, FB17_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 17)
	pub fn set_fb17(value: u8) { ::write(REGISTER_ADDRESS, FB17_BIT_OFFSET, FB17_BIT_WIDTH, value as u32); }

	const FB18_BIT_OFFSET: u8 = 18;
	const FB18_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 18)
	pub fn get_fb18() -> u8 { ::read(REGISTER_ADDRESS, FB18_BIT_OFFSET, FB18_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 18)
	pub fn set_fb18(value: u8) { ::write(REGISTER_ADDRESS, FB18_BIT_OFFSET, FB18_BIT_WIDTH, value as u32); }

	const FB19_BIT_OFFSET: u8 = 19;
	const FB19_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 19)
	pub fn get_fb19() -> u8 { ::read(REGISTER_ADDRESS, FB19_BIT_OFFSET, FB19_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 19)
	pub fn set_fb19(value: u8) { ::write(REGISTER_ADDRESS, FB19_BIT_OFFSET, FB19_BIT_WIDTH, value as u32); }

	const FB20_BIT_OFFSET: u8 = 20;
	const FB20_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 20)
	pub fn get_fb20() -> u8 { ::read(REGISTER_ADDRESS, FB20_BIT_OFFSET, FB20_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 20)
	pub fn set_fb20(value: u8) { ::write(REGISTER_ADDRESS, FB20_BIT_OFFSET, FB20_BIT_WIDTH, value as u32); }

	const FB21_BIT_OFFSET: u8 = 21;
	const FB21_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 21)
	pub fn get_fb21() -> u8 { ::read(REGISTER_ADDRESS, FB21_BIT_OFFSET, FB21_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 21)
	pub fn set_fb21(value: u8) { ::write(REGISTER_ADDRESS, FB21_BIT_OFFSET, FB21_BIT_WIDTH, value as u32); }

	const FB22_BIT_OFFSET: u8 = 22;
	const FB22_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 22)
	pub fn get_fb22() -> u8 { ::read(REGISTER_ADDRESS, FB22_BIT_OFFSET, FB22_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 22)
	pub fn set_fb22(value: u8) { ::write(REGISTER_ADDRESS, FB22_BIT_OFFSET, FB22_BIT_WIDTH, value as u32); }

	const FB23_BIT_OFFSET: u8 = 23;
	const FB23_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 23)
	pub fn get_fb23() -> u8 { ::read(REGISTER_ADDRESS, FB23_BIT_OFFSET, FB23_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 23)
	pub fn set_fb23(value: u8) { ::write(REGISTER_ADDRESS, FB23_BIT_OFFSET, FB23_BIT_WIDTH, value as u32); }

	const FB24_BIT_OFFSET: u8 = 24;
	const FB24_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 24)
	pub fn get_fb24() -> u8 { ::read(REGISTER_ADDRESS, FB24_BIT_OFFSET, FB24_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 24)
	pub fn set_fb24(value: u8) { ::write(REGISTER_ADDRESS, FB24_BIT_OFFSET, FB24_BIT_WIDTH, value as u32); }

	const FB25_BIT_OFFSET: u8 = 25;
	const FB25_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 25)
	pub fn get_fb25() -> u8 { ::read(REGISTER_ADDRESS, FB25_BIT_OFFSET, FB25_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 25)
	pub fn set_fb25(value: u8) { ::write(REGISTER_ADDRESS, FB25_BIT_OFFSET, FB25_BIT_WIDTH, value as u32); }

	const FB26_BIT_OFFSET: u8 = 26;
	const FB26_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 26)
	pub fn get_fb26() -> u8 { ::read(REGISTER_ADDRESS, FB26_BIT_OFFSET, FB26_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 26)
	pub fn set_fb26(value: u8) { ::write(REGISTER_ADDRESS, FB26_BIT_OFFSET, FB26_BIT_WIDTH, value as u32); }

	const FB27_BIT_OFFSET: u8 = 27;
	const FB27_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 27)
	pub fn get_fb27() -> u8 { ::read(REGISTER_ADDRESS, FB27_BIT_OFFSET, FB27_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 27)
	pub fn set_fb27(value: u8) { ::write(REGISTER_ADDRESS, FB27_BIT_OFFSET, FB27_BIT_WIDTH, value as u32); }

	const FB28_BIT_OFFSET: u8 = 28;
	const FB28_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 28)
	pub fn get_fb28() -> u8 { ::read(REGISTER_ADDRESS, FB28_BIT_OFFSET, FB28_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 28)
	pub fn set_fb28(value: u8) { ::write(REGISTER_ADDRESS, FB28_BIT_OFFSET, FB28_BIT_WIDTH, value as u32); }

	const FB29_BIT_OFFSET: u8 = 29;
	const FB29_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 29)
	pub fn get_fb29() -> u8 { ::read(REGISTER_ADDRESS, FB29_BIT_OFFSET, FB29_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 29)
	pub fn set_fb29(value: u8) { ::write(REGISTER_ADDRESS, FB29_BIT_OFFSET, FB29_BIT_WIDTH, value as u32); }

	const FB30_BIT_OFFSET: u8 = 30;
	const FB30_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 30)
	pub fn get_fb30() -> u8 { ::read(REGISTER_ADDRESS, FB30_BIT_OFFSET, FB30_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 30)
	pub fn set_fb30(value: u8) { ::write(REGISTER_ADDRESS, FB30_BIT_OFFSET, FB30_BIT_WIDTH, value as u32); }

	const FB31_BIT_OFFSET: u8 = 31;
	const FB31_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 31)
	pub fn get_fb31() -> u8 { ::read(REGISTER_ADDRESS, FB31_BIT_OFFSET, FB31_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 31)
	pub fn set_fb31(value: u8) { ::write(REGISTER_ADDRESS, FB31_BIT_OFFSET, FB31_BIT_WIDTH, value as u32); }
}
/// Filter bank 25 register 2
/// Size: 0x20 bits
pub mod f25r2 {
	const REGISTER_ADDRESS_OFFSET: u32 = 0x30C;
	const REGISTER_ADDRESS: u32 = super::BASE_ADDRESS + REGISTER_ADDRESS_OFFSET;

	const FB0_BIT_OFFSET: u8 = 0;
	const FB0_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 0)
	pub fn get_fb0() -> u8 { ::read(REGISTER_ADDRESS, FB0_BIT_OFFSET, FB0_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 0)
	pub fn set_fb0(value: u8) { ::write(REGISTER_ADDRESS, FB0_BIT_OFFSET, FB0_BIT_WIDTH, value as u32); }

	const FB1_BIT_OFFSET: u8 = 1;
	const FB1_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 1)
	pub fn get_fb1() -> u8 { ::read(REGISTER_ADDRESS, FB1_BIT_OFFSET, FB1_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 1)
	pub fn set_fb1(value: u8) { ::write(REGISTER_ADDRESS, FB1_BIT_OFFSET, FB1_BIT_WIDTH, value as u32); }

	const FB2_BIT_OFFSET: u8 = 2;
	const FB2_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 2)
	pub fn get_fb2() -> u8 { ::read(REGISTER_ADDRESS, FB2_BIT_OFFSET, FB2_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 2)
	pub fn set_fb2(value: u8) { ::write(REGISTER_ADDRESS, FB2_BIT_OFFSET, FB2_BIT_WIDTH, value as u32); }

	const FB3_BIT_OFFSET: u8 = 3;
	const FB3_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 3)
	pub fn get_fb3() -> u8 { ::read(REGISTER_ADDRESS, FB3_BIT_OFFSET, FB3_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 3)
	pub fn set_fb3(value: u8) { ::write(REGISTER_ADDRESS, FB3_BIT_OFFSET, FB3_BIT_WIDTH, value as u32); }

	const FB4_BIT_OFFSET: u8 = 4;
	const FB4_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 4)
	pub fn get_fb4() -> u8 { ::read(REGISTER_ADDRESS, FB4_BIT_OFFSET, FB4_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 4)
	pub fn set_fb4(value: u8) { ::write(REGISTER_ADDRESS, FB4_BIT_OFFSET, FB4_BIT_WIDTH, value as u32); }

	const FB5_BIT_OFFSET: u8 = 5;
	const FB5_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 5)
	pub fn get_fb5() -> u8 { ::read(REGISTER_ADDRESS, FB5_BIT_OFFSET, FB5_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 5)
	pub fn set_fb5(value: u8) { ::write(REGISTER_ADDRESS, FB5_BIT_OFFSET, FB5_BIT_WIDTH, value as u32); }

	const FB6_BIT_OFFSET: u8 = 6;
	const FB6_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 6)
	pub fn get_fb6() -> u8 { ::read(REGISTER_ADDRESS, FB6_BIT_OFFSET, FB6_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 6)
	pub fn set_fb6(value: u8) { ::write(REGISTER_ADDRESS, FB6_BIT_OFFSET, FB6_BIT_WIDTH, value as u32); }

	const FB7_BIT_OFFSET: u8 = 7;
	const FB7_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 7)
	pub fn get_fb7() -> u8 { ::read(REGISTER_ADDRESS, FB7_BIT_OFFSET, FB7_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 7)
	pub fn set_fb7(value: u8) { ::write(REGISTER_ADDRESS, FB7_BIT_OFFSET, FB7_BIT_WIDTH, value as u32); }

	const FB8_BIT_OFFSET: u8 = 8;
	const FB8_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 8)
	pub fn get_fb8() -> u8 { ::read(REGISTER_ADDRESS, FB8_BIT_OFFSET, FB8_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 8)
	pub fn set_fb8(value: u8) { ::write(REGISTER_ADDRESS, FB8_BIT_OFFSET, FB8_BIT_WIDTH, value as u32); }

	const FB9_BIT_OFFSET: u8 = 9;
	const FB9_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 9)
	pub fn get_fb9() -> u8 { ::read(REGISTER_ADDRESS, FB9_BIT_OFFSET, FB9_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 9)
	pub fn set_fb9(value: u8) { ::write(REGISTER_ADDRESS, FB9_BIT_OFFSET, FB9_BIT_WIDTH, value as u32); }

	const FB10_BIT_OFFSET: u8 = 10;
	const FB10_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 10)
	pub fn get_fb10() -> u8 { ::read(REGISTER_ADDRESS, FB10_BIT_OFFSET, FB10_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 10)
	pub fn set_fb10(value: u8) { ::write(REGISTER_ADDRESS, FB10_BIT_OFFSET, FB10_BIT_WIDTH, value as u32); }

	const FB11_BIT_OFFSET: u8 = 11;
	const FB11_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 11)
	pub fn get_fb11() -> u8 { ::read(REGISTER_ADDRESS, FB11_BIT_OFFSET, FB11_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 11)
	pub fn set_fb11(value: u8) { ::write(REGISTER_ADDRESS, FB11_BIT_OFFSET, FB11_BIT_WIDTH, value as u32); }

	const FB12_BIT_OFFSET: u8 = 12;
	const FB12_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 12)
	pub fn get_fb12() -> u8 { ::read(REGISTER_ADDRESS, FB12_BIT_OFFSET, FB12_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 12)
	pub fn set_fb12(value: u8) { ::write(REGISTER_ADDRESS, FB12_BIT_OFFSET, FB12_BIT_WIDTH, value as u32); }

	const FB13_BIT_OFFSET: u8 = 13;
	const FB13_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 13)
	pub fn get_fb13() -> u8 { ::read(REGISTER_ADDRESS, FB13_BIT_OFFSET, FB13_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 13)
	pub fn set_fb13(value: u8) { ::write(REGISTER_ADDRESS, FB13_BIT_OFFSET, FB13_BIT_WIDTH, value as u32); }

	const FB14_BIT_OFFSET: u8 = 14;
	const FB14_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 14)
	pub fn get_fb14() -> u8 { ::read(REGISTER_ADDRESS, FB14_BIT_OFFSET, FB14_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 14)
	pub fn set_fb14(value: u8) { ::write(REGISTER_ADDRESS, FB14_BIT_OFFSET, FB14_BIT_WIDTH, value as u32); }

	const FB15_BIT_OFFSET: u8 = 15;
	const FB15_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 15)
	pub fn get_fb15() -> u8 { ::read(REGISTER_ADDRESS, FB15_BIT_OFFSET, FB15_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 15)
	pub fn set_fb15(value: u8) { ::write(REGISTER_ADDRESS, FB15_BIT_OFFSET, FB15_BIT_WIDTH, value as u32); }

	const FB16_BIT_OFFSET: u8 = 16;
	const FB16_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 16)
	pub fn get_fb16() -> u8 { ::read(REGISTER_ADDRESS, FB16_BIT_OFFSET, FB16_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 16)
	pub fn set_fb16(value: u8) { ::write(REGISTER_ADDRESS, FB16_BIT_OFFSET, FB16_BIT_WIDTH, value as u32); }

	const FB17_BIT_OFFSET: u8 = 17;
	const FB17_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 17)
	pub fn get_fb17() -> u8 { ::read(REGISTER_ADDRESS, FB17_BIT_OFFSET, FB17_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 17)
	pub fn set_fb17(value: u8) { ::write(REGISTER_ADDRESS, FB17_BIT_OFFSET, FB17_BIT_WIDTH, value as u32); }

	const FB18_BIT_OFFSET: u8 = 18;
	const FB18_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 18)
	pub fn get_fb18() -> u8 { ::read(REGISTER_ADDRESS, FB18_BIT_OFFSET, FB18_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 18)
	pub fn set_fb18(value: u8) { ::write(REGISTER_ADDRESS, FB18_BIT_OFFSET, FB18_BIT_WIDTH, value as u32); }

	const FB19_BIT_OFFSET: u8 = 19;
	const FB19_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 19)
	pub fn get_fb19() -> u8 { ::read(REGISTER_ADDRESS, FB19_BIT_OFFSET, FB19_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 19)
	pub fn set_fb19(value: u8) { ::write(REGISTER_ADDRESS, FB19_BIT_OFFSET, FB19_BIT_WIDTH, value as u32); }

	const FB20_BIT_OFFSET: u8 = 20;
	const FB20_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 20)
	pub fn get_fb20() -> u8 { ::read(REGISTER_ADDRESS, FB20_BIT_OFFSET, FB20_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 20)
	pub fn set_fb20(value: u8) { ::write(REGISTER_ADDRESS, FB20_BIT_OFFSET, FB20_BIT_WIDTH, value as u32); }

	const FB21_BIT_OFFSET: u8 = 21;
	const FB21_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 21)
	pub fn get_fb21() -> u8 { ::read(REGISTER_ADDRESS, FB21_BIT_OFFSET, FB21_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 21)
	pub fn set_fb21(value: u8) { ::write(REGISTER_ADDRESS, FB21_BIT_OFFSET, FB21_BIT_WIDTH, value as u32); }

	const FB22_BIT_OFFSET: u8 = 22;
	const FB22_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 22)
	pub fn get_fb22() -> u8 { ::read(REGISTER_ADDRESS, FB22_BIT_OFFSET, FB22_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 22)
	pub fn set_fb22(value: u8) { ::write(REGISTER_ADDRESS, FB22_BIT_OFFSET, FB22_BIT_WIDTH, value as u32); }

	const FB23_BIT_OFFSET: u8 = 23;
	const FB23_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 23)
	pub fn get_fb23() -> u8 { ::read(REGISTER_ADDRESS, FB23_BIT_OFFSET, FB23_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 23)
	pub fn set_fb23(value: u8) { ::write(REGISTER_ADDRESS, FB23_BIT_OFFSET, FB23_BIT_WIDTH, value as u32); }

	const FB24_BIT_OFFSET: u8 = 24;
	const FB24_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 24)
	pub fn get_fb24() -> u8 { ::read(REGISTER_ADDRESS, FB24_BIT_OFFSET, FB24_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 24)
	pub fn set_fb24(value: u8) { ::write(REGISTER_ADDRESS, FB24_BIT_OFFSET, FB24_BIT_WIDTH, value as u32); }

	const FB25_BIT_OFFSET: u8 = 25;
	const FB25_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 25)
	pub fn get_fb25() -> u8 { ::read(REGISTER_ADDRESS, FB25_BIT_OFFSET, FB25_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 25)
	pub fn set_fb25(value: u8) { ::write(REGISTER_ADDRESS, FB25_BIT_OFFSET, FB25_BIT_WIDTH, value as u32); }

	const FB26_BIT_OFFSET: u8 = 26;
	const FB26_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 26)
	pub fn get_fb26() -> u8 { ::read(REGISTER_ADDRESS, FB26_BIT_OFFSET, FB26_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 26)
	pub fn set_fb26(value: u8) { ::write(REGISTER_ADDRESS, FB26_BIT_OFFSET, FB26_BIT_WIDTH, value as u32); }

	const FB27_BIT_OFFSET: u8 = 27;
	const FB27_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 27)
	pub fn get_fb27() -> u8 { ::read(REGISTER_ADDRESS, FB27_BIT_OFFSET, FB27_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 27)
	pub fn set_fb27(value: u8) { ::write(REGISTER_ADDRESS, FB27_BIT_OFFSET, FB27_BIT_WIDTH, value as u32); }

	const FB28_BIT_OFFSET: u8 = 28;
	const FB28_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 28)
	pub fn get_fb28() -> u8 { ::read(REGISTER_ADDRESS, FB28_BIT_OFFSET, FB28_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 28)
	pub fn set_fb28(value: u8) { ::write(REGISTER_ADDRESS, FB28_BIT_OFFSET, FB28_BIT_WIDTH, value as u32); }

	const FB29_BIT_OFFSET: u8 = 29;
	const FB29_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 29)
	pub fn get_fb29() -> u8 { ::read(REGISTER_ADDRESS, FB29_BIT_OFFSET, FB29_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 29)
	pub fn set_fb29(value: u8) { ::write(REGISTER_ADDRESS, FB29_BIT_OFFSET, FB29_BIT_WIDTH, value as u32); }

	const FB30_BIT_OFFSET: u8 = 30;
	const FB30_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 30)
	pub fn get_fb30() -> u8 { ::read(REGISTER_ADDRESS, FB30_BIT_OFFSET, FB30_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 30)
	pub fn set_fb30(value: u8) { ::write(REGISTER_ADDRESS, FB30_BIT_OFFSET, FB30_BIT_WIDTH, value as u32); }

	const FB31_BIT_OFFSET: u8 = 31;
	const FB31_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 31)
	pub fn get_fb31() -> u8 { ::read(REGISTER_ADDRESS, FB31_BIT_OFFSET, FB31_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 31)
	pub fn set_fb31(value: u8) { ::write(REGISTER_ADDRESS, FB31_BIT_OFFSET, FB31_BIT_WIDTH, value as u32); }
}
/// Filter bank 26 register 1
/// Size: 0x20 bits
pub mod f26r1 {
	const REGISTER_ADDRESS_OFFSET: u32 = 0x310;
	const REGISTER_ADDRESS: u32 = super::BASE_ADDRESS + REGISTER_ADDRESS_OFFSET;

	const FB0_BIT_OFFSET: u8 = 0;
	const FB0_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 0)
	pub fn get_fb0() -> u8 { ::read(REGISTER_ADDRESS, FB0_BIT_OFFSET, FB0_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 0)
	pub fn set_fb0(value: u8) { ::write(REGISTER_ADDRESS, FB0_BIT_OFFSET, FB0_BIT_WIDTH, value as u32); }

	const FB1_BIT_OFFSET: u8 = 1;
	const FB1_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 1)
	pub fn get_fb1() -> u8 { ::read(REGISTER_ADDRESS, FB1_BIT_OFFSET, FB1_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 1)
	pub fn set_fb1(value: u8) { ::write(REGISTER_ADDRESS, FB1_BIT_OFFSET, FB1_BIT_WIDTH, value as u32); }

	const FB2_BIT_OFFSET: u8 = 2;
	const FB2_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 2)
	pub fn get_fb2() -> u8 { ::read(REGISTER_ADDRESS, FB2_BIT_OFFSET, FB2_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 2)
	pub fn set_fb2(value: u8) { ::write(REGISTER_ADDRESS, FB2_BIT_OFFSET, FB2_BIT_WIDTH, value as u32); }

	const FB3_BIT_OFFSET: u8 = 3;
	const FB3_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 3)
	pub fn get_fb3() -> u8 { ::read(REGISTER_ADDRESS, FB3_BIT_OFFSET, FB3_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 3)
	pub fn set_fb3(value: u8) { ::write(REGISTER_ADDRESS, FB3_BIT_OFFSET, FB3_BIT_WIDTH, value as u32); }

	const FB4_BIT_OFFSET: u8 = 4;
	const FB4_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 4)
	pub fn get_fb4() -> u8 { ::read(REGISTER_ADDRESS, FB4_BIT_OFFSET, FB4_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 4)
	pub fn set_fb4(value: u8) { ::write(REGISTER_ADDRESS, FB4_BIT_OFFSET, FB4_BIT_WIDTH, value as u32); }

	const FB5_BIT_OFFSET: u8 = 5;
	const FB5_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 5)
	pub fn get_fb5() -> u8 { ::read(REGISTER_ADDRESS, FB5_BIT_OFFSET, FB5_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 5)
	pub fn set_fb5(value: u8) { ::write(REGISTER_ADDRESS, FB5_BIT_OFFSET, FB5_BIT_WIDTH, value as u32); }

	const FB6_BIT_OFFSET: u8 = 6;
	const FB6_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 6)
	pub fn get_fb6() -> u8 { ::read(REGISTER_ADDRESS, FB6_BIT_OFFSET, FB6_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 6)
	pub fn set_fb6(value: u8) { ::write(REGISTER_ADDRESS, FB6_BIT_OFFSET, FB6_BIT_WIDTH, value as u32); }

	const FB7_BIT_OFFSET: u8 = 7;
	const FB7_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 7)
	pub fn get_fb7() -> u8 { ::read(REGISTER_ADDRESS, FB7_BIT_OFFSET, FB7_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 7)
	pub fn set_fb7(value: u8) { ::write(REGISTER_ADDRESS, FB7_BIT_OFFSET, FB7_BIT_WIDTH, value as u32); }

	const FB8_BIT_OFFSET: u8 = 8;
	const FB8_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 8)
	pub fn get_fb8() -> u8 { ::read(REGISTER_ADDRESS, FB8_BIT_OFFSET, FB8_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 8)
	pub fn set_fb8(value: u8) { ::write(REGISTER_ADDRESS, FB8_BIT_OFFSET, FB8_BIT_WIDTH, value as u32); }

	const FB9_BIT_OFFSET: u8 = 9;
	const FB9_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 9)
	pub fn get_fb9() -> u8 { ::read(REGISTER_ADDRESS, FB9_BIT_OFFSET, FB9_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 9)
	pub fn set_fb9(value: u8) { ::write(REGISTER_ADDRESS, FB9_BIT_OFFSET, FB9_BIT_WIDTH, value as u32); }

	const FB10_BIT_OFFSET: u8 = 10;
	const FB10_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 10)
	pub fn get_fb10() -> u8 { ::read(REGISTER_ADDRESS, FB10_BIT_OFFSET, FB10_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 10)
	pub fn set_fb10(value: u8) { ::write(REGISTER_ADDRESS, FB10_BIT_OFFSET, FB10_BIT_WIDTH, value as u32); }

	const FB11_BIT_OFFSET: u8 = 11;
	const FB11_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 11)
	pub fn get_fb11() -> u8 { ::read(REGISTER_ADDRESS, FB11_BIT_OFFSET, FB11_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 11)
	pub fn set_fb11(value: u8) { ::write(REGISTER_ADDRESS, FB11_BIT_OFFSET, FB11_BIT_WIDTH, value as u32); }

	const FB12_BIT_OFFSET: u8 = 12;
	const FB12_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 12)
	pub fn get_fb12() -> u8 { ::read(REGISTER_ADDRESS, FB12_BIT_OFFSET, FB12_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 12)
	pub fn set_fb12(value: u8) { ::write(REGISTER_ADDRESS, FB12_BIT_OFFSET, FB12_BIT_WIDTH, value as u32); }

	const FB13_BIT_OFFSET: u8 = 13;
	const FB13_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 13)
	pub fn get_fb13() -> u8 { ::read(REGISTER_ADDRESS, FB13_BIT_OFFSET, FB13_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 13)
	pub fn set_fb13(value: u8) { ::write(REGISTER_ADDRESS, FB13_BIT_OFFSET, FB13_BIT_WIDTH, value as u32); }

	const FB14_BIT_OFFSET: u8 = 14;
	const FB14_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 14)
	pub fn get_fb14() -> u8 { ::read(REGISTER_ADDRESS, FB14_BIT_OFFSET, FB14_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 14)
	pub fn set_fb14(value: u8) { ::write(REGISTER_ADDRESS, FB14_BIT_OFFSET, FB14_BIT_WIDTH, value as u32); }

	const FB15_BIT_OFFSET: u8 = 15;
	const FB15_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 15)
	pub fn get_fb15() -> u8 { ::read(REGISTER_ADDRESS, FB15_BIT_OFFSET, FB15_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 15)
	pub fn set_fb15(value: u8) { ::write(REGISTER_ADDRESS, FB15_BIT_OFFSET, FB15_BIT_WIDTH, value as u32); }

	const FB16_BIT_OFFSET: u8 = 16;
	const FB16_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 16)
	pub fn get_fb16() -> u8 { ::read(REGISTER_ADDRESS, FB16_BIT_OFFSET, FB16_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 16)
	pub fn set_fb16(value: u8) { ::write(REGISTER_ADDRESS, FB16_BIT_OFFSET, FB16_BIT_WIDTH, value as u32); }

	const FB17_BIT_OFFSET: u8 = 17;
	const FB17_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 17)
	pub fn get_fb17() -> u8 { ::read(REGISTER_ADDRESS, FB17_BIT_OFFSET, FB17_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 17)
	pub fn set_fb17(value: u8) { ::write(REGISTER_ADDRESS, FB17_BIT_OFFSET, FB17_BIT_WIDTH, value as u32); }

	const FB18_BIT_OFFSET: u8 = 18;
	const FB18_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 18)
	pub fn get_fb18() -> u8 { ::read(REGISTER_ADDRESS, FB18_BIT_OFFSET, FB18_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 18)
	pub fn set_fb18(value: u8) { ::write(REGISTER_ADDRESS, FB18_BIT_OFFSET, FB18_BIT_WIDTH, value as u32); }

	const FB19_BIT_OFFSET: u8 = 19;
	const FB19_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 19)
	pub fn get_fb19() -> u8 { ::read(REGISTER_ADDRESS, FB19_BIT_OFFSET, FB19_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 19)
	pub fn set_fb19(value: u8) { ::write(REGISTER_ADDRESS, FB19_BIT_OFFSET, FB19_BIT_WIDTH, value as u32); }

	const FB20_BIT_OFFSET: u8 = 20;
	const FB20_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 20)
	pub fn get_fb20() -> u8 { ::read(REGISTER_ADDRESS, FB20_BIT_OFFSET, FB20_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 20)
	pub fn set_fb20(value: u8) { ::write(REGISTER_ADDRESS, FB20_BIT_OFFSET, FB20_BIT_WIDTH, value as u32); }

	const FB21_BIT_OFFSET: u8 = 21;
	const FB21_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 21)
	pub fn get_fb21() -> u8 { ::read(REGISTER_ADDRESS, FB21_BIT_OFFSET, FB21_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 21)
	pub fn set_fb21(value: u8) { ::write(REGISTER_ADDRESS, FB21_BIT_OFFSET, FB21_BIT_WIDTH, value as u32); }

	const FB22_BIT_OFFSET: u8 = 22;
	const FB22_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 22)
	pub fn get_fb22() -> u8 { ::read(REGISTER_ADDRESS, FB22_BIT_OFFSET, FB22_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 22)
	pub fn set_fb22(value: u8) { ::write(REGISTER_ADDRESS, FB22_BIT_OFFSET, FB22_BIT_WIDTH, value as u32); }

	const FB23_BIT_OFFSET: u8 = 23;
	const FB23_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 23)
	pub fn get_fb23() -> u8 { ::read(REGISTER_ADDRESS, FB23_BIT_OFFSET, FB23_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 23)
	pub fn set_fb23(value: u8) { ::write(REGISTER_ADDRESS, FB23_BIT_OFFSET, FB23_BIT_WIDTH, value as u32); }

	const FB24_BIT_OFFSET: u8 = 24;
	const FB24_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 24)
	pub fn get_fb24() -> u8 { ::read(REGISTER_ADDRESS, FB24_BIT_OFFSET, FB24_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 24)
	pub fn set_fb24(value: u8) { ::write(REGISTER_ADDRESS, FB24_BIT_OFFSET, FB24_BIT_WIDTH, value as u32); }

	const FB25_BIT_OFFSET: u8 = 25;
	const FB25_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 25)
	pub fn get_fb25() -> u8 { ::read(REGISTER_ADDRESS, FB25_BIT_OFFSET, FB25_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 25)
	pub fn set_fb25(value: u8) { ::write(REGISTER_ADDRESS, FB25_BIT_OFFSET, FB25_BIT_WIDTH, value as u32); }

	const FB26_BIT_OFFSET: u8 = 26;
	const FB26_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 26)
	pub fn get_fb26() -> u8 { ::read(REGISTER_ADDRESS, FB26_BIT_OFFSET, FB26_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 26)
	pub fn set_fb26(value: u8) { ::write(REGISTER_ADDRESS, FB26_BIT_OFFSET, FB26_BIT_WIDTH, value as u32); }

	const FB27_BIT_OFFSET: u8 = 27;
	const FB27_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 27)
	pub fn get_fb27() -> u8 { ::read(REGISTER_ADDRESS, FB27_BIT_OFFSET, FB27_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 27)
	pub fn set_fb27(value: u8) { ::write(REGISTER_ADDRESS, FB27_BIT_OFFSET, FB27_BIT_WIDTH, value as u32); }

	const FB28_BIT_OFFSET: u8 = 28;
	const FB28_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 28)
	pub fn get_fb28() -> u8 { ::read(REGISTER_ADDRESS, FB28_BIT_OFFSET, FB28_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 28)
	pub fn set_fb28(value: u8) { ::write(REGISTER_ADDRESS, FB28_BIT_OFFSET, FB28_BIT_WIDTH, value as u32); }

	const FB29_BIT_OFFSET: u8 = 29;
	const FB29_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 29)
	pub fn get_fb29() -> u8 { ::read(REGISTER_ADDRESS, FB29_BIT_OFFSET, FB29_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 29)
	pub fn set_fb29(value: u8) { ::write(REGISTER_ADDRESS, FB29_BIT_OFFSET, FB29_BIT_WIDTH, value as u32); }

	const FB30_BIT_OFFSET: u8 = 30;
	const FB30_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 30)
	pub fn get_fb30() -> u8 { ::read(REGISTER_ADDRESS, FB30_BIT_OFFSET, FB30_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 30)
	pub fn set_fb30(value: u8) { ::write(REGISTER_ADDRESS, FB30_BIT_OFFSET, FB30_BIT_WIDTH, value as u32); }

	const FB31_BIT_OFFSET: u8 = 31;
	const FB31_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 31)
	pub fn get_fb31() -> u8 { ::read(REGISTER_ADDRESS, FB31_BIT_OFFSET, FB31_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 31)
	pub fn set_fb31(value: u8) { ::write(REGISTER_ADDRESS, FB31_BIT_OFFSET, FB31_BIT_WIDTH, value as u32); }
}
/// Filter bank 26 register 2
/// Size: 0x20 bits
pub mod f26r2 {
	const REGISTER_ADDRESS_OFFSET: u32 = 0x314;
	const REGISTER_ADDRESS: u32 = super::BASE_ADDRESS + REGISTER_ADDRESS_OFFSET;

	const FB0_BIT_OFFSET: u8 = 0;
	const FB0_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 0)
	pub fn get_fb0() -> u8 { ::read(REGISTER_ADDRESS, FB0_BIT_OFFSET, FB0_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 0)
	pub fn set_fb0(value: u8) { ::write(REGISTER_ADDRESS, FB0_BIT_OFFSET, FB0_BIT_WIDTH, value as u32); }

	const FB1_BIT_OFFSET: u8 = 1;
	const FB1_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 1)
	pub fn get_fb1() -> u8 { ::read(REGISTER_ADDRESS, FB1_BIT_OFFSET, FB1_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 1)
	pub fn set_fb1(value: u8) { ::write(REGISTER_ADDRESS, FB1_BIT_OFFSET, FB1_BIT_WIDTH, value as u32); }

	const FB2_BIT_OFFSET: u8 = 2;
	const FB2_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 2)
	pub fn get_fb2() -> u8 { ::read(REGISTER_ADDRESS, FB2_BIT_OFFSET, FB2_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 2)
	pub fn set_fb2(value: u8) { ::write(REGISTER_ADDRESS, FB2_BIT_OFFSET, FB2_BIT_WIDTH, value as u32); }

	const FB3_BIT_OFFSET: u8 = 3;
	const FB3_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 3)
	pub fn get_fb3() -> u8 { ::read(REGISTER_ADDRESS, FB3_BIT_OFFSET, FB3_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 3)
	pub fn set_fb3(value: u8) { ::write(REGISTER_ADDRESS, FB3_BIT_OFFSET, FB3_BIT_WIDTH, value as u32); }

	const FB4_BIT_OFFSET: u8 = 4;
	const FB4_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 4)
	pub fn get_fb4() -> u8 { ::read(REGISTER_ADDRESS, FB4_BIT_OFFSET, FB4_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 4)
	pub fn set_fb4(value: u8) { ::write(REGISTER_ADDRESS, FB4_BIT_OFFSET, FB4_BIT_WIDTH, value as u32); }

	const FB5_BIT_OFFSET: u8 = 5;
	const FB5_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 5)
	pub fn get_fb5() -> u8 { ::read(REGISTER_ADDRESS, FB5_BIT_OFFSET, FB5_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 5)
	pub fn set_fb5(value: u8) { ::write(REGISTER_ADDRESS, FB5_BIT_OFFSET, FB5_BIT_WIDTH, value as u32); }

	const FB6_BIT_OFFSET: u8 = 6;
	const FB6_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 6)
	pub fn get_fb6() -> u8 { ::read(REGISTER_ADDRESS, FB6_BIT_OFFSET, FB6_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 6)
	pub fn set_fb6(value: u8) { ::write(REGISTER_ADDRESS, FB6_BIT_OFFSET, FB6_BIT_WIDTH, value as u32); }

	const FB7_BIT_OFFSET: u8 = 7;
	const FB7_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 7)
	pub fn get_fb7() -> u8 { ::read(REGISTER_ADDRESS, FB7_BIT_OFFSET, FB7_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 7)
	pub fn set_fb7(value: u8) { ::write(REGISTER_ADDRESS, FB7_BIT_OFFSET, FB7_BIT_WIDTH, value as u32); }

	const FB8_BIT_OFFSET: u8 = 8;
	const FB8_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 8)
	pub fn get_fb8() -> u8 { ::read(REGISTER_ADDRESS, FB8_BIT_OFFSET, FB8_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 8)
	pub fn set_fb8(value: u8) { ::write(REGISTER_ADDRESS, FB8_BIT_OFFSET, FB8_BIT_WIDTH, value as u32); }

	const FB9_BIT_OFFSET: u8 = 9;
	const FB9_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 9)
	pub fn get_fb9() -> u8 { ::read(REGISTER_ADDRESS, FB9_BIT_OFFSET, FB9_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 9)
	pub fn set_fb9(value: u8) { ::write(REGISTER_ADDRESS, FB9_BIT_OFFSET, FB9_BIT_WIDTH, value as u32); }

	const FB10_BIT_OFFSET: u8 = 10;
	const FB10_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 10)
	pub fn get_fb10() -> u8 { ::read(REGISTER_ADDRESS, FB10_BIT_OFFSET, FB10_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 10)
	pub fn set_fb10(value: u8) { ::write(REGISTER_ADDRESS, FB10_BIT_OFFSET, FB10_BIT_WIDTH, value as u32); }

	const FB11_BIT_OFFSET: u8 = 11;
	const FB11_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 11)
	pub fn get_fb11() -> u8 { ::read(REGISTER_ADDRESS, FB11_BIT_OFFSET, FB11_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 11)
	pub fn set_fb11(value: u8) { ::write(REGISTER_ADDRESS, FB11_BIT_OFFSET, FB11_BIT_WIDTH, value as u32); }

	const FB12_BIT_OFFSET: u8 = 12;
	const FB12_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 12)
	pub fn get_fb12() -> u8 { ::read(REGISTER_ADDRESS, FB12_BIT_OFFSET, FB12_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 12)
	pub fn set_fb12(value: u8) { ::write(REGISTER_ADDRESS, FB12_BIT_OFFSET, FB12_BIT_WIDTH, value as u32); }

	const FB13_BIT_OFFSET: u8 = 13;
	const FB13_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 13)
	pub fn get_fb13() -> u8 { ::read(REGISTER_ADDRESS, FB13_BIT_OFFSET, FB13_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 13)
	pub fn set_fb13(value: u8) { ::write(REGISTER_ADDRESS, FB13_BIT_OFFSET, FB13_BIT_WIDTH, value as u32); }

	const FB14_BIT_OFFSET: u8 = 14;
	const FB14_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 14)
	pub fn get_fb14() -> u8 { ::read(REGISTER_ADDRESS, FB14_BIT_OFFSET, FB14_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 14)
	pub fn set_fb14(value: u8) { ::write(REGISTER_ADDRESS, FB14_BIT_OFFSET, FB14_BIT_WIDTH, value as u32); }

	const FB15_BIT_OFFSET: u8 = 15;
	const FB15_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 15)
	pub fn get_fb15() -> u8 { ::read(REGISTER_ADDRESS, FB15_BIT_OFFSET, FB15_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 15)
	pub fn set_fb15(value: u8) { ::write(REGISTER_ADDRESS, FB15_BIT_OFFSET, FB15_BIT_WIDTH, value as u32); }

	const FB16_BIT_OFFSET: u8 = 16;
	const FB16_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 16)
	pub fn get_fb16() -> u8 { ::read(REGISTER_ADDRESS, FB16_BIT_OFFSET, FB16_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 16)
	pub fn set_fb16(value: u8) { ::write(REGISTER_ADDRESS, FB16_BIT_OFFSET, FB16_BIT_WIDTH, value as u32); }

	const FB17_BIT_OFFSET: u8 = 17;
	const FB17_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 17)
	pub fn get_fb17() -> u8 { ::read(REGISTER_ADDRESS, FB17_BIT_OFFSET, FB17_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 17)
	pub fn set_fb17(value: u8) { ::write(REGISTER_ADDRESS, FB17_BIT_OFFSET, FB17_BIT_WIDTH, value as u32); }

	const FB18_BIT_OFFSET: u8 = 18;
	const FB18_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 18)
	pub fn get_fb18() -> u8 { ::read(REGISTER_ADDRESS, FB18_BIT_OFFSET, FB18_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 18)
	pub fn set_fb18(value: u8) { ::write(REGISTER_ADDRESS, FB18_BIT_OFFSET, FB18_BIT_WIDTH, value as u32); }

	const FB19_BIT_OFFSET: u8 = 19;
	const FB19_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 19)
	pub fn get_fb19() -> u8 { ::read(REGISTER_ADDRESS, FB19_BIT_OFFSET, FB19_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 19)
	pub fn set_fb19(value: u8) { ::write(REGISTER_ADDRESS, FB19_BIT_OFFSET, FB19_BIT_WIDTH, value as u32); }

	const FB20_BIT_OFFSET: u8 = 20;
	const FB20_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 20)
	pub fn get_fb20() -> u8 { ::read(REGISTER_ADDRESS, FB20_BIT_OFFSET, FB20_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 20)
	pub fn set_fb20(value: u8) { ::write(REGISTER_ADDRESS, FB20_BIT_OFFSET, FB20_BIT_WIDTH, value as u32); }

	const FB21_BIT_OFFSET: u8 = 21;
	const FB21_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 21)
	pub fn get_fb21() -> u8 { ::read(REGISTER_ADDRESS, FB21_BIT_OFFSET, FB21_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 21)
	pub fn set_fb21(value: u8) { ::write(REGISTER_ADDRESS, FB21_BIT_OFFSET, FB21_BIT_WIDTH, value as u32); }

	const FB22_BIT_OFFSET: u8 = 22;
	const FB22_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 22)
	pub fn get_fb22() -> u8 { ::read(REGISTER_ADDRESS, FB22_BIT_OFFSET, FB22_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 22)
	pub fn set_fb22(value: u8) { ::write(REGISTER_ADDRESS, FB22_BIT_OFFSET, FB22_BIT_WIDTH, value as u32); }

	const FB23_BIT_OFFSET: u8 = 23;
	const FB23_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 23)
	pub fn get_fb23() -> u8 { ::read(REGISTER_ADDRESS, FB23_BIT_OFFSET, FB23_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 23)
	pub fn set_fb23(value: u8) { ::write(REGISTER_ADDRESS, FB23_BIT_OFFSET, FB23_BIT_WIDTH, value as u32); }

	const FB24_BIT_OFFSET: u8 = 24;
	const FB24_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 24)
	pub fn get_fb24() -> u8 { ::read(REGISTER_ADDRESS, FB24_BIT_OFFSET, FB24_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 24)
	pub fn set_fb24(value: u8) { ::write(REGISTER_ADDRESS, FB24_BIT_OFFSET, FB24_BIT_WIDTH, value as u32); }

	const FB25_BIT_OFFSET: u8 = 25;
	const FB25_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 25)
	pub fn get_fb25() -> u8 { ::read(REGISTER_ADDRESS, FB25_BIT_OFFSET, FB25_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 25)
	pub fn set_fb25(value: u8) { ::write(REGISTER_ADDRESS, FB25_BIT_OFFSET, FB25_BIT_WIDTH, value as u32); }

	const FB26_BIT_OFFSET: u8 = 26;
	const FB26_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 26)
	pub fn get_fb26() -> u8 { ::read(REGISTER_ADDRESS, FB26_BIT_OFFSET, FB26_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 26)
	pub fn set_fb26(value: u8) { ::write(REGISTER_ADDRESS, FB26_BIT_OFFSET, FB26_BIT_WIDTH, value as u32); }

	const FB27_BIT_OFFSET: u8 = 27;
	const FB27_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 27)
	pub fn get_fb27() -> u8 { ::read(REGISTER_ADDRESS, FB27_BIT_OFFSET, FB27_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 27)
	pub fn set_fb27(value: u8) { ::write(REGISTER_ADDRESS, FB27_BIT_OFFSET, FB27_BIT_WIDTH, value as u32); }

	const FB28_BIT_OFFSET: u8 = 28;
	const FB28_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 28)
	pub fn get_fb28() -> u8 { ::read(REGISTER_ADDRESS, FB28_BIT_OFFSET, FB28_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 28)
	pub fn set_fb28(value: u8) { ::write(REGISTER_ADDRESS, FB28_BIT_OFFSET, FB28_BIT_WIDTH, value as u32); }

	const FB29_BIT_OFFSET: u8 = 29;
	const FB29_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 29)
	pub fn get_fb29() -> u8 { ::read(REGISTER_ADDRESS, FB29_BIT_OFFSET, FB29_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 29)
	pub fn set_fb29(value: u8) { ::write(REGISTER_ADDRESS, FB29_BIT_OFFSET, FB29_BIT_WIDTH, value as u32); }

	const FB30_BIT_OFFSET: u8 = 30;
	const FB30_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 30)
	pub fn get_fb30() -> u8 { ::read(REGISTER_ADDRESS, FB30_BIT_OFFSET, FB30_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 30)
	pub fn set_fb30(value: u8) { ::write(REGISTER_ADDRESS, FB30_BIT_OFFSET, FB30_BIT_WIDTH, value as u32); }

	const FB31_BIT_OFFSET: u8 = 31;
	const FB31_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 31)
	pub fn get_fb31() -> u8 { ::read(REGISTER_ADDRESS, FB31_BIT_OFFSET, FB31_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 31)
	pub fn set_fb31(value: u8) { ::write(REGISTER_ADDRESS, FB31_BIT_OFFSET, FB31_BIT_WIDTH, value as u32); }
}
/// Filter bank 27 register 1
/// Size: 0x20 bits
pub mod f27r1 {
	const REGISTER_ADDRESS_OFFSET: u32 = 0x318;
	const REGISTER_ADDRESS: u32 = super::BASE_ADDRESS + REGISTER_ADDRESS_OFFSET;

	const FB0_BIT_OFFSET: u8 = 0;
	const FB0_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 0)
	pub fn get_fb0() -> u8 { ::read(REGISTER_ADDRESS, FB0_BIT_OFFSET, FB0_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 0)
	pub fn set_fb0(value: u8) { ::write(REGISTER_ADDRESS, FB0_BIT_OFFSET, FB0_BIT_WIDTH, value as u32); }

	const FB1_BIT_OFFSET: u8 = 1;
	const FB1_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 1)
	pub fn get_fb1() -> u8 { ::read(REGISTER_ADDRESS, FB1_BIT_OFFSET, FB1_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 1)
	pub fn set_fb1(value: u8) { ::write(REGISTER_ADDRESS, FB1_BIT_OFFSET, FB1_BIT_WIDTH, value as u32); }

	const FB2_BIT_OFFSET: u8 = 2;
	const FB2_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 2)
	pub fn get_fb2() -> u8 { ::read(REGISTER_ADDRESS, FB2_BIT_OFFSET, FB2_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 2)
	pub fn set_fb2(value: u8) { ::write(REGISTER_ADDRESS, FB2_BIT_OFFSET, FB2_BIT_WIDTH, value as u32); }

	const FB3_BIT_OFFSET: u8 = 3;
	const FB3_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 3)
	pub fn get_fb3() -> u8 { ::read(REGISTER_ADDRESS, FB3_BIT_OFFSET, FB3_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 3)
	pub fn set_fb3(value: u8) { ::write(REGISTER_ADDRESS, FB3_BIT_OFFSET, FB3_BIT_WIDTH, value as u32); }

	const FB4_BIT_OFFSET: u8 = 4;
	const FB4_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 4)
	pub fn get_fb4() -> u8 { ::read(REGISTER_ADDRESS, FB4_BIT_OFFSET, FB4_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 4)
	pub fn set_fb4(value: u8) { ::write(REGISTER_ADDRESS, FB4_BIT_OFFSET, FB4_BIT_WIDTH, value as u32); }

	const FB5_BIT_OFFSET: u8 = 5;
	const FB5_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 5)
	pub fn get_fb5() -> u8 { ::read(REGISTER_ADDRESS, FB5_BIT_OFFSET, FB5_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 5)
	pub fn set_fb5(value: u8) { ::write(REGISTER_ADDRESS, FB5_BIT_OFFSET, FB5_BIT_WIDTH, value as u32); }

	const FB6_BIT_OFFSET: u8 = 6;
	const FB6_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 6)
	pub fn get_fb6() -> u8 { ::read(REGISTER_ADDRESS, FB6_BIT_OFFSET, FB6_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 6)
	pub fn set_fb6(value: u8) { ::write(REGISTER_ADDRESS, FB6_BIT_OFFSET, FB6_BIT_WIDTH, value as u32); }

	const FB7_BIT_OFFSET: u8 = 7;
	const FB7_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 7)
	pub fn get_fb7() -> u8 { ::read(REGISTER_ADDRESS, FB7_BIT_OFFSET, FB7_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 7)
	pub fn set_fb7(value: u8) { ::write(REGISTER_ADDRESS, FB7_BIT_OFFSET, FB7_BIT_WIDTH, value as u32); }

	const FB8_BIT_OFFSET: u8 = 8;
	const FB8_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 8)
	pub fn get_fb8() -> u8 { ::read(REGISTER_ADDRESS, FB8_BIT_OFFSET, FB8_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 8)
	pub fn set_fb8(value: u8) { ::write(REGISTER_ADDRESS, FB8_BIT_OFFSET, FB8_BIT_WIDTH, value as u32); }

	const FB9_BIT_OFFSET: u8 = 9;
	const FB9_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 9)
	pub fn get_fb9() -> u8 { ::read(REGISTER_ADDRESS, FB9_BIT_OFFSET, FB9_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 9)
	pub fn set_fb9(value: u8) { ::write(REGISTER_ADDRESS, FB9_BIT_OFFSET, FB9_BIT_WIDTH, value as u32); }

	const FB10_BIT_OFFSET: u8 = 10;
	const FB10_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 10)
	pub fn get_fb10() -> u8 { ::read(REGISTER_ADDRESS, FB10_BIT_OFFSET, FB10_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 10)
	pub fn set_fb10(value: u8) { ::write(REGISTER_ADDRESS, FB10_BIT_OFFSET, FB10_BIT_WIDTH, value as u32); }

	const FB11_BIT_OFFSET: u8 = 11;
	const FB11_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 11)
	pub fn get_fb11() -> u8 { ::read(REGISTER_ADDRESS, FB11_BIT_OFFSET, FB11_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 11)
	pub fn set_fb11(value: u8) { ::write(REGISTER_ADDRESS, FB11_BIT_OFFSET, FB11_BIT_WIDTH, value as u32); }

	const FB12_BIT_OFFSET: u8 = 12;
	const FB12_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 12)
	pub fn get_fb12() -> u8 { ::read(REGISTER_ADDRESS, FB12_BIT_OFFSET, FB12_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 12)
	pub fn set_fb12(value: u8) { ::write(REGISTER_ADDRESS, FB12_BIT_OFFSET, FB12_BIT_WIDTH, value as u32); }

	const FB13_BIT_OFFSET: u8 = 13;
	const FB13_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 13)
	pub fn get_fb13() -> u8 { ::read(REGISTER_ADDRESS, FB13_BIT_OFFSET, FB13_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 13)
	pub fn set_fb13(value: u8) { ::write(REGISTER_ADDRESS, FB13_BIT_OFFSET, FB13_BIT_WIDTH, value as u32); }

	const FB14_BIT_OFFSET: u8 = 14;
	const FB14_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 14)
	pub fn get_fb14() -> u8 { ::read(REGISTER_ADDRESS, FB14_BIT_OFFSET, FB14_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 14)
	pub fn set_fb14(value: u8) { ::write(REGISTER_ADDRESS, FB14_BIT_OFFSET, FB14_BIT_WIDTH, value as u32); }

	const FB15_BIT_OFFSET: u8 = 15;
	const FB15_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 15)
	pub fn get_fb15() -> u8 { ::read(REGISTER_ADDRESS, FB15_BIT_OFFSET, FB15_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 15)
	pub fn set_fb15(value: u8) { ::write(REGISTER_ADDRESS, FB15_BIT_OFFSET, FB15_BIT_WIDTH, value as u32); }

	const FB16_BIT_OFFSET: u8 = 16;
	const FB16_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 16)
	pub fn get_fb16() -> u8 { ::read(REGISTER_ADDRESS, FB16_BIT_OFFSET, FB16_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 16)
	pub fn set_fb16(value: u8) { ::write(REGISTER_ADDRESS, FB16_BIT_OFFSET, FB16_BIT_WIDTH, value as u32); }

	const FB17_BIT_OFFSET: u8 = 17;
	const FB17_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 17)
	pub fn get_fb17() -> u8 { ::read(REGISTER_ADDRESS, FB17_BIT_OFFSET, FB17_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 17)
	pub fn set_fb17(value: u8) { ::write(REGISTER_ADDRESS, FB17_BIT_OFFSET, FB17_BIT_WIDTH, value as u32); }

	const FB18_BIT_OFFSET: u8 = 18;
	const FB18_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 18)
	pub fn get_fb18() -> u8 { ::read(REGISTER_ADDRESS, FB18_BIT_OFFSET, FB18_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 18)
	pub fn set_fb18(value: u8) { ::write(REGISTER_ADDRESS, FB18_BIT_OFFSET, FB18_BIT_WIDTH, value as u32); }

	const FB19_BIT_OFFSET: u8 = 19;
	const FB19_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 19)
	pub fn get_fb19() -> u8 { ::read(REGISTER_ADDRESS, FB19_BIT_OFFSET, FB19_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 19)
	pub fn set_fb19(value: u8) { ::write(REGISTER_ADDRESS, FB19_BIT_OFFSET, FB19_BIT_WIDTH, value as u32); }

	const FB20_BIT_OFFSET: u8 = 20;
	const FB20_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 20)
	pub fn get_fb20() -> u8 { ::read(REGISTER_ADDRESS, FB20_BIT_OFFSET, FB20_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 20)
	pub fn set_fb20(value: u8) { ::write(REGISTER_ADDRESS, FB20_BIT_OFFSET, FB20_BIT_WIDTH, value as u32); }

	const FB21_BIT_OFFSET: u8 = 21;
	const FB21_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 21)
	pub fn get_fb21() -> u8 { ::read(REGISTER_ADDRESS, FB21_BIT_OFFSET, FB21_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 21)
	pub fn set_fb21(value: u8) { ::write(REGISTER_ADDRESS, FB21_BIT_OFFSET, FB21_BIT_WIDTH, value as u32); }

	const FB22_BIT_OFFSET: u8 = 22;
	const FB22_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 22)
	pub fn get_fb22() -> u8 { ::read(REGISTER_ADDRESS, FB22_BIT_OFFSET, FB22_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 22)
	pub fn set_fb22(value: u8) { ::write(REGISTER_ADDRESS, FB22_BIT_OFFSET, FB22_BIT_WIDTH, value as u32); }

	const FB23_BIT_OFFSET: u8 = 23;
	const FB23_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 23)
	pub fn get_fb23() -> u8 { ::read(REGISTER_ADDRESS, FB23_BIT_OFFSET, FB23_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 23)
	pub fn set_fb23(value: u8) { ::write(REGISTER_ADDRESS, FB23_BIT_OFFSET, FB23_BIT_WIDTH, value as u32); }

	const FB24_BIT_OFFSET: u8 = 24;
	const FB24_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 24)
	pub fn get_fb24() -> u8 { ::read(REGISTER_ADDRESS, FB24_BIT_OFFSET, FB24_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 24)
	pub fn set_fb24(value: u8) { ::write(REGISTER_ADDRESS, FB24_BIT_OFFSET, FB24_BIT_WIDTH, value as u32); }

	const FB25_BIT_OFFSET: u8 = 25;
	const FB25_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 25)
	pub fn get_fb25() -> u8 { ::read(REGISTER_ADDRESS, FB25_BIT_OFFSET, FB25_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 25)
	pub fn set_fb25(value: u8) { ::write(REGISTER_ADDRESS, FB25_BIT_OFFSET, FB25_BIT_WIDTH, value as u32); }

	const FB26_BIT_OFFSET: u8 = 26;
	const FB26_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 26)
	pub fn get_fb26() -> u8 { ::read(REGISTER_ADDRESS, FB26_BIT_OFFSET, FB26_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 26)
	pub fn set_fb26(value: u8) { ::write(REGISTER_ADDRESS, FB26_BIT_OFFSET, FB26_BIT_WIDTH, value as u32); }

	const FB27_BIT_OFFSET: u8 = 27;
	const FB27_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 27)
	pub fn get_fb27() -> u8 { ::read(REGISTER_ADDRESS, FB27_BIT_OFFSET, FB27_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 27)
	pub fn set_fb27(value: u8) { ::write(REGISTER_ADDRESS, FB27_BIT_OFFSET, FB27_BIT_WIDTH, value as u32); }

	const FB28_BIT_OFFSET: u8 = 28;
	const FB28_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 28)
	pub fn get_fb28() -> u8 { ::read(REGISTER_ADDRESS, FB28_BIT_OFFSET, FB28_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 28)
	pub fn set_fb28(value: u8) { ::write(REGISTER_ADDRESS, FB28_BIT_OFFSET, FB28_BIT_WIDTH, value as u32); }

	const FB29_BIT_OFFSET: u8 = 29;
	const FB29_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 29)
	pub fn get_fb29() -> u8 { ::read(REGISTER_ADDRESS, FB29_BIT_OFFSET, FB29_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 29)
	pub fn set_fb29(value: u8) { ::write(REGISTER_ADDRESS, FB29_BIT_OFFSET, FB29_BIT_WIDTH, value as u32); }

	const FB30_BIT_OFFSET: u8 = 30;
	const FB30_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 30)
	pub fn get_fb30() -> u8 { ::read(REGISTER_ADDRESS, FB30_BIT_OFFSET, FB30_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 30)
	pub fn set_fb30(value: u8) { ::write(REGISTER_ADDRESS, FB30_BIT_OFFSET, FB30_BIT_WIDTH, value as u32); }

	const FB31_BIT_OFFSET: u8 = 31;
	const FB31_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 31)
	pub fn get_fb31() -> u8 { ::read(REGISTER_ADDRESS, FB31_BIT_OFFSET, FB31_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 31)
	pub fn set_fb31(value: u8) { ::write(REGISTER_ADDRESS, FB31_BIT_OFFSET, FB31_BIT_WIDTH, value as u32); }
}
/// Filter bank 27 register 2
/// Size: 0x20 bits
pub mod f27r2 {
	const REGISTER_ADDRESS_OFFSET: u32 = 0x31C;
	const REGISTER_ADDRESS: u32 = super::BASE_ADDRESS + REGISTER_ADDRESS_OFFSET;

	const FB0_BIT_OFFSET: u8 = 0;
	const FB0_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 0)
	pub fn get_fb0() -> u8 { ::read(REGISTER_ADDRESS, FB0_BIT_OFFSET, FB0_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 0)
	pub fn set_fb0(value: u8) { ::write(REGISTER_ADDRESS, FB0_BIT_OFFSET, FB0_BIT_WIDTH, value as u32); }

	const FB1_BIT_OFFSET: u8 = 1;
	const FB1_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 1)
	pub fn get_fb1() -> u8 { ::read(REGISTER_ADDRESS, FB1_BIT_OFFSET, FB1_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 1)
	pub fn set_fb1(value: u8) { ::write(REGISTER_ADDRESS, FB1_BIT_OFFSET, FB1_BIT_WIDTH, value as u32); }

	const FB2_BIT_OFFSET: u8 = 2;
	const FB2_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 2)
	pub fn get_fb2() -> u8 { ::read(REGISTER_ADDRESS, FB2_BIT_OFFSET, FB2_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 2)
	pub fn set_fb2(value: u8) { ::write(REGISTER_ADDRESS, FB2_BIT_OFFSET, FB2_BIT_WIDTH, value as u32); }

	const FB3_BIT_OFFSET: u8 = 3;
	const FB3_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 3)
	pub fn get_fb3() -> u8 { ::read(REGISTER_ADDRESS, FB3_BIT_OFFSET, FB3_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 3)
	pub fn set_fb3(value: u8) { ::write(REGISTER_ADDRESS, FB3_BIT_OFFSET, FB3_BIT_WIDTH, value as u32); }

	const FB4_BIT_OFFSET: u8 = 4;
	const FB4_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 4)
	pub fn get_fb4() -> u8 { ::read(REGISTER_ADDRESS, FB4_BIT_OFFSET, FB4_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 4)
	pub fn set_fb4(value: u8) { ::write(REGISTER_ADDRESS, FB4_BIT_OFFSET, FB4_BIT_WIDTH, value as u32); }

	const FB5_BIT_OFFSET: u8 = 5;
	const FB5_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 5)
	pub fn get_fb5() -> u8 { ::read(REGISTER_ADDRESS, FB5_BIT_OFFSET, FB5_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 5)
	pub fn set_fb5(value: u8) { ::write(REGISTER_ADDRESS, FB5_BIT_OFFSET, FB5_BIT_WIDTH, value as u32); }

	const FB6_BIT_OFFSET: u8 = 6;
	const FB6_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 6)
	pub fn get_fb6() -> u8 { ::read(REGISTER_ADDRESS, FB6_BIT_OFFSET, FB6_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 6)
	pub fn set_fb6(value: u8) { ::write(REGISTER_ADDRESS, FB6_BIT_OFFSET, FB6_BIT_WIDTH, value as u32); }

	const FB7_BIT_OFFSET: u8 = 7;
	const FB7_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 7)
	pub fn get_fb7() -> u8 { ::read(REGISTER_ADDRESS, FB7_BIT_OFFSET, FB7_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 7)
	pub fn set_fb7(value: u8) { ::write(REGISTER_ADDRESS, FB7_BIT_OFFSET, FB7_BIT_WIDTH, value as u32); }

	const FB8_BIT_OFFSET: u8 = 8;
	const FB8_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 8)
	pub fn get_fb8() -> u8 { ::read(REGISTER_ADDRESS, FB8_BIT_OFFSET, FB8_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 8)
	pub fn set_fb8(value: u8) { ::write(REGISTER_ADDRESS, FB8_BIT_OFFSET, FB8_BIT_WIDTH, value as u32); }

	const FB9_BIT_OFFSET: u8 = 9;
	const FB9_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 9)
	pub fn get_fb9() -> u8 { ::read(REGISTER_ADDRESS, FB9_BIT_OFFSET, FB9_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 9)
	pub fn set_fb9(value: u8) { ::write(REGISTER_ADDRESS, FB9_BIT_OFFSET, FB9_BIT_WIDTH, value as u32); }

	const FB10_BIT_OFFSET: u8 = 10;
	const FB10_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 10)
	pub fn get_fb10() -> u8 { ::read(REGISTER_ADDRESS, FB10_BIT_OFFSET, FB10_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 10)
	pub fn set_fb10(value: u8) { ::write(REGISTER_ADDRESS, FB10_BIT_OFFSET, FB10_BIT_WIDTH, value as u32); }

	const FB11_BIT_OFFSET: u8 = 11;
	const FB11_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 11)
	pub fn get_fb11() -> u8 { ::read(REGISTER_ADDRESS, FB11_BIT_OFFSET, FB11_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 11)
	pub fn set_fb11(value: u8) { ::write(REGISTER_ADDRESS, FB11_BIT_OFFSET, FB11_BIT_WIDTH, value as u32); }

	const FB12_BIT_OFFSET: u8 = 12;
	const FB12_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 12)
	pub fn get_fb12() -> u8 { ::read(REGISTER_ADDRESS, FB12_BIT_OFFSET, FB12_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 12)
	pub fn set_fb12(value: u8) { ::write(REGISTER_ADDRESS, FB12_BIT_OFFSET, FB12_BIT_WIDTH, value as u32); }

	const FB13_BIT_OFFSET: u8 = 13;
	const FB13_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 13)
	pub fn get_fb13() -> u8 { ::read(REGISTER_ADDRESS, FB13_BIT_OFFSET, FB13_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 13)
	pub fn set_fb13(value: u8) { ::write(REGISTER_ADDRESS, FB13_BIT_OFFSET, FB13_BIT_WIDTH, value as u32); }

	const FB14_BIT_OFFSET: u8 = 14;
	const FB14_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 14)
	pub fn get_fb14() -> u8 { ::read(REGISTER_ADDRESS, FB14_BIT_OFFSET, FB14_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 14)
	pub fn set_fb14(value: u8) { ::write(REGISTER_ADDRESS, FB14_BIT_OFFSET, FB14_BIT_WIDTH, value as u32); }

	const FB15_BIT_OFFSET: u8 = 15;
	const FB15_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 15)
	pub fn get_fb15() -> u8 { ::read(REGISTER_ADDRESS, FB15_BIT_OFFSET, FB15_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 15)
	pub fn set_fb15(value: u8) { ::write(REGISTER_ADDRESS, FB15_BIT_OFFSET, FB15_BIT_WIDTH, value as u32); }

	const FB16_BIT_OFFSET: u8 = 16;
	const FB16_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 16)
	pub fn get_fb16() -> u8 { ::read(REGISTER_ADDRESS, FB16_BIT_OFFSET, FB16_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 16)
	pub fn set_fb16(value: u8) { ::write(REGISTER_ADDRESS, FB16_BIT_OFFSET, FB16_BIT_WIDTH, value as u32); }

	const FB17_BIT_OFFSET: u8 = 17;
	const FB17_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 17)
	pub fn get_fb17() -> u8 { ::read(REGISTER_ADDRESS, FB17_BIT_OFFSET, FB17_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 17)
	pub fn set_fb17(value: u8) { ::write(REGISTER_ADDRESS, FB17_BIT_OFFSET, FB17_BIT_WIDTH, value as u32); }

	const FB18_BIT_OFFSET: u8 = 18;
	const FB18_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 18)
	pub fn get_fb18() -> u8 { ::read(REGISTER_ADDRESS, FB18_BIT_OFFSET, FB18_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 18)
	pub fn set_fb18(value: u8) { ::write(REGISTER_ADDRESS, FB18_BIT_OFFSET, FB18_BIT_WIDTH, value as u32); }

	const FB19_BIT_OFFSET: u8 = 19;
	const FB19_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 19)
	pub fn get_fb19() -> u8 { ::read(REGISTER_ADDRESS, FB19_BIT_OFFSET, FB19_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 19)
	pub fn set_fb19(value: u8) { ::write(REGISTER_ADDRESS, FB19_BIT_OFFSET, FB19_BIT_WIDTH, value as u32); }

	const FB20_BIT_OFFSET: u8 = 20;
	const FB20_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 20)
	pub fn get_fb20() -> u8 { ::read(REGISTER_ADDRESS, FB20_BIT_OFFSET, FB20_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 20)
	pub fn set_fb20(value: u8) { ::write(REGISTER_ADDRESS, FB20_BIT_OFFSET, FB20_BIT_WIDTH, value as u32); }

	const FB21_BIT_OFFSET: u8 = 21;
	const FB21_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 21)
	pub fn get_fb21() -> u8 { ::read(REGISTER_ADDRESS, FB21_BIT_OFFSET, FB21_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 21)
	pub fn set_fb21(value: u8) { ::write(REGISTER_ADDRESS, FB21_BIT_OFFSET, FB21_BIT_WIDTH, value as u32); }

	const FB22_BIT_OFFSET: u8 = 22;
	const FB22_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 22)
	pub fn get_fb22() -> u8 { ::read(REGISTER_ADDRESS, FB22_BIT_OFFSET, FB22_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 22)
	pub fn set_fb22(value: u8) { ::write(REGISTER_ADDRESS, FB22_BIT_OFFSET, FB22_BIT_WIDTH, value as u32); }

	const FB23_BIT_OFFSET: u8 = 23;
	const FB23_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 23)
	pub fn get_fb23() -> u8 { ::read(REGISTER_ADDRESS, FB23_BIT_OFFSET, FB23_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 23)
	pub fn set_fb23(value: u8) { ::write(REGISTER_ADDRESS, FB23_BIT_OFFSET, FB23_BIT_WIDTH, value as u32); }

	const FB24_BIT_OFFSET: u8 = 24;
	const FB24_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 24)
	pub fn get_fb24() -> u8 { ::read(REGISTER_ADDRESS, FB24_BIT_OFFSET, FB24_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 24)
	pub fn set_fb24(value: u8) { ::write(REGISTER_ADDRESS, FB24_BIT_OFFSET, FB24_BIT_WIDTH, value as u32); }

	const FB25_BIT_OFFSET: u8 = 25;
	const FB25_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 25)
	pub fn get_fb25() -> u8 { ::read(REGISTER_ADDRESS, FB25_BIT_OFFSET, FB25_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 25)
	pub fn set_fb25(value: u8) { ::write(REGISTER_ADDRESS, FB25_BIT_OFFSET, FB25_BIT_WIDTH, value as u32); }

	const FB26_BIT_OFFSET: u8 = 26;
	const FB26_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 26)
	pub fn get_fb26() -> u8 { ::read(REGISTER_ADDRESS, FB26_BIT_OFFSET, FB26_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 26)
	pub fn set_fb26(value: u8) { ::write(REGISTER_ADDRESS, FB26_BIT_OFFSET, FB26_BIT_WIDTH, value as u32); }

	const FB27_BIT_OFFSET: u8 = 27;
	const FB27_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 27)
	pub fn get_fb27() -> u8 { ::read(REGISTER_ADDRESS, FB27_BIT_OFFSET, FB27_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 27)
	pub fn set_fb27(value: u8) { ::write(REGISTER_ADDRESS, FB27_BIT_OFFSET, FB27_BIT_WIDTH, value as u32); }

	const FB28_BIT_OFFSET: u8 = 28;
	const FB28_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 28)
	pub fn get_fb28() -> u8 { ::read(REGISTER_ADDRESS, FB28_BIT_OFFSET, FB28_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 28)
	pub fn set_fb28(value: u8) { ::write(REGISTER_ADDRESS, FB28_BIT_OFFSET, FB28_BIT_WIDTH, value as u32); }

	const FB29_BIT_OFFSET: u8 = 29;
	const FB29_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 29)
	pub fn get_fb29() -> u8 { ::read(REGISTER_ADDRESS, FB29_BIT_OFFSET, FB29_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 29)
	pub fn set_fb29(value: u8) { ::write(REGISTER_ADDRESS, FB29_BIT_OFFSET, FB29_BIT_WIDTH, value as u32); }

	const FB30_BIT_OFFSET: u8 = 30;
	const FB30_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 30)
	pub fn get_fb30() -> u8 { ::read(REGISTER_ADDRESS, FB30_BIT_OFFSET, FB30_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 30)
	pub fn set_fb30(value: u8) { ::write(REGISTER_ADDRESS, FB30_BIT_OFFSET, FB30_BIT_WIDTH, value as u32); }

	const FB31_BIT_OFFSET: u8 = 31;
	const FB31_BIT_WIDTH: u8 = 1;
	/// Filter bits (Width: 1, Offset: 31)
	pub fn get_fb31() -> u8 { ::read(REGISTER_ADDRESS, FB31_BIT_OFFSET, FB31_BIT_WIDTH) as u8 }
	/// Filter bits (Width: 1, Offset: 31)
	pub fn set_fb31(value: u8) { ::write(REGISTER_ADDRESS, FB31_BIT_OFFSET, FB31_BIT_WIDTH, value as u32); }
}
/// USB High Priority/CAN_TX interrupts
pub const INTERRUPT_USB_HP_CAN_TX: u32 = 19;

/// USB Low Priority/CAN_RX0 interrupts
pub const INTERRUPT_USB_LP_CAN_RX0: u32 = 20;

/// CAN_RX1 interrupt
pub const INTERRUPT_CAN_RX1: u32 = 21;

/// CAN_SCE interrupt
pub const INTERRUPT_CAN_SCE: u32 = 22;

/*
<?xml version="1.0"?>
<peripheral xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
  <name>CAN</name>
  <description>Controller area network</description>
  <groupName>CAN</groupName>
  <baseAddress>0x40006400</baseAddress>
  <addressBlock>
    <offset>0x0</offset>
    <size>0x400</size>
    <usage>registers</usage>
  </addressBlock>
  <registers>
    <register>
      <name>MCR</name>
      <displayName>MCR</displayName>
      <description>master control register</description>
      <addressOffset>0x0</addressOffset>
      <size>0x20</size>
      <access>read-write</access>
      <resetValue>0x00010002</resetValue>
      <fields>
        <field>
          <name>DBF</name>
          <description>DBF</description>
          <bitOffset>16</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>RESET</name>
          <description>RESET</description>
          <bitOffset>15</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>TTCM</name>
          <description>TTCM</description>
          <bitOffset>7</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>ABOM</name>
          <description>ABOM</description>
          <bitOffset>6</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>AWUM</name>
          <description>AWUM</description>
          <bitOffset>5</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>NART</name>
          <description>NART</description>
          <bitOffset>4</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>RFLM</name>
          <description>RFLM</description>
          <bitOffset>3</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>TXFP</name>
          <description>TXFP</description>
          <bitOffset>2</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>SLEEP</name>
          <description>SLEEP</description>
          <bitOffset>1</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>INRQ</name>
          <description>INRQ</description>
          <bitOffset>0</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
      </fields>
    </register>
    <register>
      <name>MSR</name>
      <displayName>MSR</displayName>
      <description>master status register</description>
      <addressOffset>0x4</addressOffset>
      <size>0x20</size>
      <resetValue>0x00000C02</resetValue>
      <fields>
        <field>
          <name>RX</name>
          <description>RX</description>
          <bitOffset>11</bitOffset>
          <bitWidth>1</bitWidth>
          <access>read-only</access>
        </field>
        <field>
          <name>SAMP</name>
          <description>SAMP</description>
          <bitOffset>10</bitOffset>
          <bitWidth>1</bitWidth>
          <access>read-only</access>
        </field>
        <field>
          <name>RXM</name>
          <description>RXM</description>
          <bitOffset>9</bitOffset>
          <bitWidth>1</bitWidth>
          <access>read-only</access>
        </field>
        <field>
          <name>TXM</name>
          <description>TXM</description>
          <bitOffset>8</bitOffset>
          <bitWidth>1</bitWidth>
          <access>read-only</access>
        </field>
        <field>
          <name>SLAKI</name>
          <description>SLAKI</description>
          <bitOffset>4</bitOffset>
          <bitWidth>1</bitWidth>
          <access>read-write</access>
        </field>
        <field>
          <name>WKUI</name>
          <description>WKUI</description>
          <bitOffset>3</bitOffset>
          <bitWidth>1</bitWidth>
          <access>read-write</access>
        </field>
        <field>
          <name>ERRI</name>
          <description>ERRI</description>
          <bitOffset>2</bitOffset>
          <bitWidth>1</bitWidth>
          <access>read-write</access>
        </field>
        <field>
          <name>SLAK</name>
          <description>SLAK</description>
          <bitOffset>1</bitOffset>
          <bitWidth>1</bitWidth>
          <access>read-only</access>
        </field>
        <field>
          <name>INAK</name>
          <description>INAK</description>
          <bitOffset>0</bitOffset>
          <bitWidth>1</bitWidth>
          <access>read-only</access>
        </field>
      </fields>
    </register>
    <register>
      <name>TSR</name>
      <displayName>TSR</displayName>
      <description>transmit status register</description>
      <addressOffset>0x8</addressOffset>
      <size>0x20</size>
      <resetValue>0x1C000000</resetValue>
      <fields>
        <field>
          <name>LOW2</name>
          <description>Lowest priority flag for mailbox
              2</description>
          <bitOffset>31</bitOffset>
          <bitWidth>1</bitWidth>
          <access>read-only</access>
        </field>
        <field>
          <name>LOW1</name>
          <description>Lowest priority flag for mailbox
              1</description>
          <bitOffset>30</bitOffset>
          <bitWidth>1</bitWidth>
          <access>read-only</access>
        </field>
        <field>
          <name>LOW0</name>
          <description>Lowest priority flag for mailbox
              0</description>
          <bitOffset>29</bitOffset>
          <bitWidth>1</bitWidth>
          <access>read-only</access>
        </field>
        <field>
          <name>TME2</name>
          <description>Lowest priority flag for mailbox
              2</description>
          <bitOffset>28</bitOffset>
          <bitWidth>1</bitWidth>
          <access>read-only</access>
        </field>
        <field>
          <name>TME1</name>
          <description>Lowest priority flag for mailbox
              1</description>
          <bitOffset>27</bitOffset>
          <bitWidth>1</bitWidth>
          <access>read-only</access>
        </field>
        <field>
          <name>TME0</name>
          <description>Lowest priority flag for mailbox
              0</description>
          <bitOffset>26</bitOffset>
          <bitWidth>1</bitWidth>
          <access>read-only</access>
        </field>
        <field>
          <name>CODE</name>
          <description>CODE</description>
          <bitOffset>24</bitOffset>
          <bitWidth>2</bitWidth>
          <access>read-only</access>
        </field>
        <field>
          <name>ABRQ2</name>
          <description>ABRQ2</description>
          <bitOffset>23</bitOffset>
          <bitWidth>1</bitWidth>
          <access>read-write</access>
        </field>
        <field>
          <name>TERR2</name>
          <description>TERR2</description>
          <bitOffset>19</bitOffset>
          <bitWidth>1</bitWidth>
          <access>read-write</access>
        </field>
        <field>
          <name>ALST2</name>
          <description>ALST2</description>
          <bitOffset>18</bitOffset>
          <bitWidth>1</bitWidth>
          <access>read-write</access>
        </field>
        <field>
          <name>TXOK2</name>
          <description>TXOK2</description>
          <bitOffset>17</bitOffset>
          <bitWidth>1</bitWidth>
          <access>read-write</access>
        </field>
        <field>
          <name>RQCP2</name>
          <description>RQCP2</description>
          <bitOffset>16</bitOffset>
          <bitWidth>1</bitWidth>
          <access>read-write</access>
        </field>
        <field>
          <name>ABRQ1</name>
          <description>ABRQ1</description>
          <bitOffset>15</bitOffset>
          <bitWidth>1</bitWidth>
          <access>read-write</access>
        </field>
        <field>
          <name>TERR1</name>
          <description>TERR1</description>
          <bitOffset>11</bitOffset>
          <bitWidth>1</bitWidth>
          <access>read-write</access>
        </field>
        <field>
          <name>ALST1</name>
          <description>ALST1</description>
          <bitOffset>10</bitOffset>
          <bitWidth>1</bitWidth>
          <access>read-write</access>
        </field>
        <field>
          <name>TXOK1</name>
          <description>TXOK1</description>
          <bitOffset>9</bitOffset>
          <bitWidth>1</bitWidth>
          <access>read-write</access>
        </field>
        <field>
          <name>RQCP1</name>
          <description>RQCP1</description>
          <bitOffset>8</bitOffset>
          <bitWidth>1</bitWidth>
          <access>read-write</access>
        </field>
        <field>
          <name>ABRQ0</name>
          <description>ABRQ0</description>
          <bitOffset>7</bitOffset>
          <bitWidth>1</bitWidth>
          <access>read-write</access>
        </field>
        <field>
          <name>TERR0</name>
          <description>TERR0</description>
          <bitOffset>3</bitOffset>
          <bitWidth>1</bitWidth>
          <access>read-write</access>
        </field>
        <field>
          <name>ALST0</name>
          <description>ALST0</description>
          <bitOffset>2</bitOffset>
          <bitWidth>1</bitWidth>
          <access>read-write</access>
        </field>
        <field>
          <name>TXOK0</name>
          <description>TXOK0</description>
          <bitOffset>1</bitOffset>
          <bitWidth>1</bitWidth>
          <access>read-write</access>
        </field>
        <field>
          <name>RQCP0</name>
          <description>RQCP0</description>
          <bitOffset>0</bitOffset>
          <bitWidth>1</bitWidth>
          <access>read-write</access>
        </field>
      </fields>
    </register>
    <register>
      <name>RF0R</name>
      <displayName>RF0R</displayName>
      <description>receive FIFO 0 register</description>
      <addressOffset>0xC</addressOffset>
      <size>0x20</size>
      <resetValue>0x00000000</resetValue>
      <fields>
        <field>
          <name>RFOM0</name>
          <description>RFOM0</description>
          <bitOffset>5</bitOffset>
          <bitWidth>1</bitWidth>
          <access>read-write</access>
        </field>
        <field>
          <name>FOVR0</name>
          <description>FOVR0</description>
          <bitOffset>4</bitOffset>
          <bitWidth>1</bitWidth>
          <access>read-write</access>
        </field>
        <field>
          <name>FULL0</name>
          <description>FULL0</description>
          <bitOffset>3</bitOffset>
          <bitWidth>1</bitWidth>
          <access>read-write</access>
        </field>
        <field>
          <name>FMP0</name>
          <description>FMP0</description>
          <bitOffset>0</bitOffset>
          <bitWidth>2</bitWidth>
          <access>read-only</access>
        </field>
      </fields>
    </register>
    <register>
      <name>RF1R</name>
      <displayName>RF1R</displayName>
      <description>receive FIFO 1 register</description>
      <addressOffset>0x10</addressOffset>
      <size>0x20</size>
      <resetValue>0x00000000</resetValue>
      <fields>
        <field>
          <name>RFOM1</name>
          <description>RFOM1</description>
          <bitOffset>5</bitOffset>
          <bitWidth>1</bitWidth>
          <access>read-write</access>
        </field>
        <field>
          <name>FOVR1</name>
          <description>FOVR1</description>
          <bitOffset>4</bitOffset>
          <bitWidth>1</bitWidth>
          <access>read-write</access>
        </field>
        <field>
          <name>FULL1</name>
          <description>FULL1</description>
          <bitOffset>3</bitOffset>
          <bitWidth>1</bitWidth>
          <access>read-write</access>
        </field>
        <field>
          <name>FMP1</name>
          <description>FMP1</description>
          <bitOffset>0</bitOffset>
          <bitWidth>2</bitWidth>
          <access>read-only</access>
        </field>
      </fields>
    </register>
    <register>
      <name>IER</name>
      <displayName>IER</displayName>
      <description>interrupt enable register</description>
      <addressOffset>0x14</addressOffset>
      <size>0x20</size>
      <access>read-write</access>
      <resetValue>0x00000000</resetValue>
      <fields>
        <field>
          <name>SLKIE</name>
          <description>SLKIE</description>
          <bitOffset>17</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>WKUIE</name>
          <description>WKUIE</description>
          <bitOffset>16</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>ERRIE</name>
          <description>ERRIE</description>
          <bitOffset>15</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>LECIE</name>
          <description>LECIE</description>
          <bitOffset>11</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>BOFIE</name>
          <description>BOFIE</description>
          <bitOffset>10</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>EPVIE</name>
          <description>EPVIE</description>
          <bitOffset>9</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>EWGIE</name>
          <description>EWGIE</description>
          <bitOffset>8</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FOVIE1</name>
          <description>FOVIE1</description>
          <bitOffset>6</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FFIE1</name>
          <description>FFIE1</description>
          <bitOffset>5</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FMPIE1</name>
          <description>FMPIE1</description>
          <bitOffset>4</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FOVIE0</name>
          <description>FOVIE0</description>
          <bitOffset>3</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FFIE0</name>
          <description>FFIE0</description>
          <bitOffset>2</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FMPIE0</name>
          <description>FMPIE0</description>
          <bitOffset>1</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>TMEIE</name>
          <description>TMEIE</description>
          <bitOffset>0</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
      </fields>
    </register>
    <register>
      <name>ESR</name>
      <displayName>ESR</displayName>
      <description>error status register</description>
      <addressOffset>0x18</addressOffset>
      <size>0x20</size>
      <resetValue>0x00000000</resetValue>
      <fields>
        <field>
          <name>REC</name>
          <description>REC</description>
          <bitOffset>24</bitOffset>
          <bitWidth>8</bitWidth>
          <access>read-only</access>
        </field>
        <field>
          <name>TEC</name>
          <description>TEC</description>
          <bitOffset>16</bitOffset>
          <bitWidth>8</bitWidth>
          <access>read-only</access>
        </field>
        <field>
          <name>LEC</name>
          <description>LEC</description>
          <bitOffset>4</bitOffset>
          <bitWidth>3</bitWidth>
          <access>read-write</access>
        </field>
        <field>
          <name>BOFF</name>
          <description>BOFF</description>
          <bitOffset>2</bitOffset>
          <bitWidth>1</bitWidth>
          <access>read-only</access>
        </field>
        <field>
          <name>EPVF</name>
          <description>EPVF</description>
          <bitOffset>1</bitOffset>
          <bitWidth>1</bitWidth>
          <access>read-only</access>
        </field>
        <field>
          <name>EWGF</name>
          <description>EWGF</description>
          <bitOffset>0</bitOffset>
          <bitWidth>1</bitWidth>
          <access>read-only</access>
        </field>
      </fields>
    </register>
    <register>
      <name>BTR</name>
      <displayName>BTR</displayName>
      <description>bit timing register</description>
      <addressOffset>0x1C</addressOffset>
      <size>0x20</size>
      <access>read-write</access>
      <resetValue>0x01230000</resetValue>
      <fields>
        <field>
          <name>SILM</name>
          <description>SILM</description>
          <bitOffset>31</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>LBKM</name>
          <description>LBKM</description>
          <bitOffset>30</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>SJW</name>
          <description>SJW</description>
          <bitOffset>24</bitOffset>
          <bitWidth>2</bitWidth>
        </field>
        <field>
          <name>TS2</name>
          <description>TS2</description>
          <bitOffset>20</bitOffset>
          <bitWidth>3</bitWidth>
        </field>
        <field>
          <name>TS1</name>
          <description>TS1</description>
          <bitOffset>16</bitOffset>
          <bitWidth>4</bitWidth>
        </field>
        <field>
          <name>BRP</name>
          <description>BRP</description>
          <bitOffset>0</bitOffset>
          <bitWidth>10</bitWidth>
        </field>
      </fields>
    </register>
    <register>
      <name>TI0R</name>
      <displayName>TI0R</displayName>
      <description>TX mailbox identifier register</description>
      <addressOffset>0x180</addressOffset>
      <size>0x20</size>
      <access>read-write</access>
      <resetValue>0x00000000</resetValue>
      <fields>
        <field>
          <name>STID</name>
          <description>STID</description>
          <bitOffset>21</bitOffset>
          <bitWidth>11</bitWidth>
        </field>
        <field>
          <name>EXID</name>
          <description>EXID</description>
          <bitOffset>3</bitOffset>
          <bitWidth>18</bitWidth>
        </field>
        <field>
          <name>IDE</name>
          <description>IDE</description>
          <bitOffset>2</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>RTR</name>
          <description>RTR</description>
          <bitOffset>1</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>TXRQ</name>
          <description>TXRQ</description>
          <bitOffset>0</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
      </fields>
    </register>
    <register>
      <name>TDT0R</name>
      <displayName>TDT0R</displayName>
      <description>mailbox data length control and time stamp
          register</description>
      <addressOffset>0x184</addressOffset>
      <size>0x20</size>
      <access>read-write</access>
      <resetValue>0x00000000</resetValue>
      <fields>
        <field>
          <name>TIME</name>
          <description>TIME</description>
          <bitOffset>16</bitOffset>
          <bitWidth>16</bitWidth>
        </field>
        <field>
          <name>TGT</name>
          <description>TGT</description>
          <bitOffset>8</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>DLC</name>
          <description>DLC</description>
          <bitOffset>0</bitOffset>
          <bitWidth>4</bitWidth>
        </field>
      </fields>
    </register>
    <register>
      <name>TDL0R</name>
      <displayName>TDL0R</displayName>
      <description>mailbox data low register</description>
      <addressOffset>0x188</addressOffset>
      <size>0x20</size>
      <access>read-write</access>
      <resetValue>0x00000000</resetValue>
      <fields>
        <field>
          <name>DATA3</name>
          <description>DATA3</description>
          <bitOffset>24</bitOffset>
          <bitWidth>8</bitWidth>
        </field>
        <field>
          <name>DATA2</name>
          <description>DATA2</description>
          <bitOffset>16</bitOffset>
          <bitWidth>8</bitWidth>
        </field>
        <field>
          <name>DATA1</name>
          <description>DATA1</description>
          <bitOffset>8</bitOffset>
          <bitWidth>8</bitWidth>
        </field>
        <field>
          <name>DATA0</name>
          <description>DATA0</description>
          <bitOffset>0</bitOffset>
          <bitWidth>8</bitWidth>
        </field>
      </fields>
    </register>
    <register>
      <name>TDH0R</name>
      <displayName>TDH0R</displayName>
      <description>mailbox data high register</description>
      <addressOffset>0x18C</addressOffset>
      <size>0x20</size>
      <access>read-write</access>
      <resetValue>0x00000000</resetValue>
      <fields>
        <field>
          <name>DATA7</name>
          <description>DATA7</description>
          <bitOffset>24</bitOffset>
          <bitWidth>8</bitWidth>
        </field>
        <field>
          <name>DATA6</name>
          <description>DATA6</description>
          <bitOffset>16</bitOffset>
          <bitWidth>8</bitWidth>
        </field>
        <field>
          <name>DATA5</name>
          <description>DATA5</description>
          <bitOffset>8</bitOffset>
          <bitWidth>8</bitWidth>
        </field>
        <field>
          <name>DATA4</name>
          <description>DATA4</description>
          <bitOffset>0</bitOffset>
          <bitWidth>8</bitWidth>
        </field>
      </fields>
    </register>
    <register>
      <name>TI1R</name>
      <displayName>TI1R</displayName>
      <description>TX mailbox identifier register</description>
      <addressOffset>0x190</addressOffset>
      <size>0x20</size>
      <access>read-write</access>
      <resetValue>0x00000000</resetValue>
      <fields>
        <field>
          <name>STID</name>
          <description>STID</description>
          <bitOffset>21</bitOffset>
          <bitWidth>11</bitWidth>
        </field>
        <field>
          <name>EXID</name>
          <description>EXID</description>
          <bitOffset>3</bitOffset>
          <bitWidth>18</bitWidth>
        </field>
        <field>
          <name>IDE</name>
          <description>IDE</description>
          <bitOffset>2</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>RTR</name>
          <description>RTR</description>
          <bitOffset>1</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>TXRQ</name>
          <description>TXRQ</description>
          <bitOffset>0</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
      </fields>
    </register>
    <register>
      <name>TDT1R</name>
      <displayName>TDT1R</displayName>
      <description>mailbox data length control and time stamp
          register</description>
      <addressOffset>0x194</addressOffset>
      <size>0x20</size>
      <access>read-write</access>
      <resetValue>0x00000000</resetValue>
      <fields>
        <field>
          <name>TIME</name>
          <description>TIME</description>
          <bitOffset>16</bitOffset>
          <bitWidth>16</bitWidth>
        </field>
        <field>
          <name>TGT</name>
          <description>TGT</description>
          <bitOffset>8</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>DLC</name>
          <description>DLC</description>
          <bitOffset>0</bitOffset>
          <bitWidth>4</bitWidth>
        </field>
      </fields>
    </register>
    <register>
      <name>TDL1R</name>
      <displayName>TDL1R</displayName>
      <description>mailbox data low register</description>
      <addressOffset>0x198</addressOffset>
      <size>0x20</size>
      <access>read-write</access>
      <resetValue>0x00000000</resetValue>
      <fields>
        <field>
          <name>DATA3</name>
          <description>DATA3</description>
          <bitOffset>24</bitOffset>
          <bitWidth>8</bitWidth>
        </field>
        <field>
          <name>DATA2</name>
          <description>DATA2</description>
          <bitOffset>16</bitOffset>
          <bitWidth>8</bitWidth>
        </field>
        <field>
          <name>DATA1</name>
          <description>DATA1</description>
          <bitOffset>8</bitOffset>
          <bitWidth>8</bitWidth>
        </field>
        <field>
          <name>DATA0</name>
          <description>DATA0</description>
          <bitOffset>0</bitOffset>
          <bitWidth>8</bitWidth>
        </field>
      </fields>
    </register>
    <register>
      <name>TDH1R</name>
      <displayName>TDH1R</displayName>
      <description>mailbox data high register</description>
      <addressOffset>0x19C</addressOffset>
      <size>0x20</size>
      <access>read-write</access>
      <resetValue>0x00000000</resetValue>
      <fields>
        <field>
          <name>DATA7</name>
          <description>DATA7</description>
          <bitOffset>24</bitOffset>
          <bitWidth>8</bitWidth>
        </field>
        <field>
          <name>DATA6</name>
          <description>DATA6</description>
          <bitOffset>16</bitOffset>
          <bitWidth>8</bitWidth>
        </field>
        <field>
          <name>DATA5</name>
          <description>DATA5</description>
          <bitOffset>8</bitOffset>
          <bitWidth>8</bitWidth>
        </field>
        <field>
          <name>DATA4</name>
          <description>DATA4</description>
          <bitOffset>0</bitOffset>
          <bitWidth>8</bitWidth>
        </field>
      </fields>
    </register>
    <register>
      <name>TI2R</name>
      <displayName>TI2R</displayName>
      <description>TX mailbox identifier register</description>
      <addressOffset>0x1A0</addressOffset>
      <size>0x20</size>
      <access>read-write</access>
      <resetValue>0x00000000</resetValue>
      <fields>
        <field>
          <name>STID</name>
          <description>STID</description>
          <bitOffset>21</bitOffset>
          <bitWidth>11</bitWidth>
        </field>
        <field>
          <name>EXID</name>
          <description>EXID</description>
          <bitOffset>3</bitOffset>
          <bitWidth>18</bitWidth>
        </field>
        <field>
          <name>IDE</name>
          <description>IDE</description>
          <bitOffset>2</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>RTR</name>
          <description>RTR</description>
          <bitOffset>1</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>TXRQ</name>
          <description>TXRQ</description>
          <bitOffset>0</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
      </fields>
    </register>
    <register>
      <name>TDT2R</name>
      <displayName>TDT2R</displayName>
      <description>mailbox data length control and time stamp
          register</description>
      <addressOffset>0x1A4</addressOffset>
      <size>0x20</size>
      <access>read-write</access>
      <resetValue>0x00000000</resetValue>
      <fields>
        <field>
          <name>TIME</name>
          <description>TIME</description>
          <bitOffset>16</bitOffset>
          <bitWidth>16</bitWidth>
        </field>
        <field>
          <name>TGT</name>
          <description>TGT</description>
          <bitOffset>8</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>DLC</name>
          <description>DLC</description>
          <bitOffset>0</bitOffset>
          <bitWidth>4</bitWidth>
        </field>
      </fields>
    </register>
    <register>
      <name>TDL2R</name>
      <displayName>TDL2R</displayName>
      <description>mailbox data low register</description>
      <addressOffset>0x1A8</addressOffset>
      <size>0x20</size>
      <access>read-write</access>
      <resetValue>0x00000000</resetValue>
      <fields>
        <field>
          <name>DATA3</name>
          <description>DATA3</description>
          <bitOffset>24</bitOffset>
          <bitWidth>8</bitWidth>
        </field>
        <field>
          <name>DATA2</name>
          <description>DATA2</description>
          <bitOffset>16</bitOffset>
          <bitWidth>8</bitWidth>
        </field>
        <field>
          <name>DATA1</name>
          <description>DATA1</description>
          <bitOffset>8</bitOffset>
          <bitWidth>8</bitWidth>
        </field>
        <field>
          <name>DATA0</name>
          <description>DATA0</description>
          <bitOffset>0</bitOffset>
          <bitWidth>8</bitWidth>
        </field>
      </fields>
    </register>
    <register>
      <name>TDH2R</name>
      <displayName>TDH2R</displayName>
      <description>mailbox data high register</description>
      <addressOffset>0x1AC</addressOffset>
      <size>0x20</size>
      <access>read-write</access>
      <resetValue>0x00000000</resetValue>
      <fields>
        <field>
          <name>DATA7</name>
          <description>DATA7</description>
          <bitOffset>24</bitOffset>
          <bitWidth>8</bitWidth>
        </field>
        <field>
          <name>DATA6</name>
          <description>DATA6</description>
          <bitOffset>16</bitOffset>
          <bitWidth>8</bitWidth>
        </field>
        <field>
          <name>DATA5</name>
          <description>DATA5</description>
          <bitOffset>8</bitOffset>
          <bitWidth>8</bitWidth>
        </field>
        <field>
          <name>DATA4</name>
          <description>DATA4</description>
          <bitOffset>0</bitOffset>
          <bitWidth>8</bitWidth>
        </field>
      </fields>
    </register>
    <register>
      <name>RI0R</name>
      <displayName>RI0R</displayName>
      <description>receive FIFO mailbox identifier
          register</description>
      <addressOffset>0x1B0</addressOffset>
      <size>0x20</size>
      <access>read-only</access>
      <resetValue>0x00000000</resetValue>
      <fields>
        <field>
          <name>STID</name>
          <description>STID</description>
          <bitOffset>21</bitOffset>
          <bitWidth>11</bitWidth>
        </field>
        <field>
          <name>EXID</name>
          <description>EXID</description>
          <bitOffset>3</bitOffset>
          <bitWidth>18</bitWidth>
        </field>
        <field>
          <name>IDE</name>
          <description>IDE</description>
          <bitOffset>2</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>RTR</name>
          <description>RTR</description>
          <bitOffset>1</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
      </fields>
    </register>
    <register>
      <name>RDT0R</name>
      <displayName>RDT0R</displayName>
      <description>receive FIFO mailbox data length control and
          time stamp register</description>
      <addressOffset>0x1B4</addressOffset>
      <size>0x20</size>
      <access>read-only</access>
      <resetValue>0x00000000</resetValue>
      <fields>
        <field>
          <name>TIME</name>
          <description>TIME</description>
          <bitOffset>16</bitOffset>
          <bitWidth>16</bitWidth>
        </field>
        <field>
          <name>FMI</name>
          <description>FMI</description>
          <bitOffset>8</bitOffset>
          <bitWidth>8</bitWidth>
        </field>
        <field>
          <name>DLC</name>
          <description>DLC</description>
          <bitOffset>0</bitOffset>
          <bitWidth>4</bitWidth>
        </field>
      </fields>
    </register>
    <register>
      <name>RDL0R</name>
      <displayName>RDL0R</displayName>
      <description>receive FIFO mailbox data low
          register</description>
      <addressOffset>0x1B8</addressOffset>
      <size>0x20</size>
      <access>read-only</access>
      <resetValue>0x00000000</resetValue>
      <fields>
        <field>
          <name>DATA3</name>
          <description>DATA3</description>
          <bitOffset>24</bitOffset>
          <bitWidth>8</bitWidth>
        </field>
        <field>
          <name>DATA2</name>
          <description>DATA2</description>
          <bitOffset>16</bitOffset>
          <bitWidth>8</bitWidth>
        </field>
        <field>
          <name>DATA1</name>
          <description>DATA1</description>
          <bitOffset>8</bitOffset>
          <bitWidth>8</bitWidth>
        </field>
        <field>
          <name>DATA0</name>
          <description>DATA0</description>
          <bitOffset>0</bitOffset>
          <bitWidth>8</bitWidth>
        </field>
      </fields>
    </register>
    <register>
      <name>RDH0R</name>
      <displayName>RDH0R</displayName>
      <description>receive FIFO mailbox data high
          register</description>
      <addressOffset>0x1BC</addressOffset>
      <size>0x20</size>
      <access>read-only</access>
      <resetValue>0x00000000</resetValue>
      <fields>
        <field>
          <name>DATA7</name>
          <description>DATA7</description>
          <bitOffset>24</bitOffset>
          <bitWidth>8</bitWidth>
        </field>
        <field>
          <name>DATA6</name>
          <description>DATA6</description>
          <bitOffset>16</bitOffset>
          <bitWidth>8</bitWidth>
        </field>
        <field>
          <name>DATA5</name>
          <description>DATA5</description>
          <bitOffset>8</bitOffset>
          <bitWidth>8</bitWidth>
        </field>
        <field>
          <name>DATA4</name>
          <description>DATA4</description>
          <bitOffset>0</bitOffset>
          <bitWidth>8</bitWidth>
        </field>
      </fields>
    </register>
    <register>
      <name>RI1R</name>
      <displayName>RI1R</displayName>
      <description>receive FIFO mailbox identifier
          register</description>
      <addressOffset>0x1C0</addressOffset>
      <size>0x20</size>
      <access>read-only</access>
      <resetValue>0x00000000</resetValue>
      <fields>
        <field>
          <name>STID</name>
          <description>STID</description>
          <bitOffset>21</bitOffset>
          <bitWidth>11</bitWidth>
        </field>
        <field>
          <name>EXID</name>
          <description>EXID</description>
          <bitOffset>3</bitOffset>
          <bitWidth>18</bitWidth>
        </field>
        <field>
          <name>IDE</name>
          <description>IDE</description>
          <bitOffset>2</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>RTR</name>
          <description>RTR</description>
          <bitOffset>1</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
      </fields>
    </register>
    <register>
      <name>RDT1R</name>
      <displayName>RDT1R</displayName>
      <description>receive FIFO mailbox data length control and
          time stamp register</description>
      <addressOffset>0x1C4</addressOffset>
      <size>0x20</size>
      <access>read-only</access>
      <resetValue>0x00000000</resetValue>
      <fields>
        <field>
          <name>TIME</name>
          <description>TIME</description>
          <bitOffset>16</bitOffset>
          <bitWidth>16</bitWidth>
        </field>
        <field>
          <name>FMI</name>
          <description>FMI</description>
          <bitOffset>8</bitOffset>
          <bitWidth>8</bitWidth>
        </field>
        <field>
          <name>DLC</name>
          <description>DLC</description>
          <bitOffset>0</bitOffset>
          <bitWidth>4</bitWidth>
        </field>
      </fields>
    </register>
    <register>
      <name>RDL1R</name>
      <displayName>RDL1R</displayName>
      <description>receive FIFO mailbox data low
          register</description>
      <addressOffset>0x1C8</addressOffset>
      <size>0x20</size>
      <access>read-only</access>
      <resetValue>0x00000000</resetValue>
      <fields>
        <field>
          <name>DATA3</name>
          <description>DATA3</description>
          <bitOffset>24</bitOffset>
          <bitWidth>8</bitWidth>
        </field>
        <field>
          <name>DATA2</name>
          <description>DATA2</description>
          <bitOffset>16</bitOffset>
          <bitWidth>8</bitWidth>
        </field>
        <field>
          <name>DATA1</name>
          <description>DATA1</description>
          <bitOffset>8</bitOffset>
          <bitWidth>8</bitWidth>
        </field>
        <field>
          <name>DATA0</name>
          <description>DATA0</description>
          <bitOffset>0</bitOffset>
          <bitWidth>8</bitWidth>
        </field>
      </fields>
    </register>
    <register>
      <name>RDH1R</name>
      <displayName>RDH1R</displayName>
      <description>receive FIFO mailbox data high
          register</description>
      <addressOffset>0x1CC</addressOffset>
      <size>0x20</size>
      <access>read-only</access>
      <resetValue>0x00000000</resetValue>
      <fields>
        <field>
          <name>DATA7</name>
          <description>DATA7</description>
          <bitOffset>24</bitOffset>
          <bitWidth>8</bitWidth>
        </field>
        <field>
          <name>DATA6</name>
          <description>DATA6</description>
          <bitOffset>16</bitOffset>
          <bitWidth>8</bitWidth>
        </field>
        <field>
          <name>DATA5</name>
          <description>DATA5</description>
          <bitOffset>8</bitOffset>
          <bitWidth>8</bitWidth>
        </field>
        <field>
          <name>DATA4</name>
          <description>DATA4</description>
          <bitOffset>0</bitOffset>
          <bitWidth>8</bitWidth>
        </field>
      </fields>
    </register>
    <register>
      <name>FMR</name>
      <displayName>FMR</displayName>
      <description>filter master register</description>
      <addressOffset>0x200</addressOffset>
      <size>0x20</size>
      <access>read-write</access>
      <resetValue>0x2A1C0E01</resetValue>
      <fields>
        <field>
          <name>CAN2SB</name>
          <description>CAN2 start bank</description>
          <bitOffset>8</bitOffset>
          <bitWidth>6</bitWidth>
        </field>
        <field>
          <name>FINIT</name>
          <description>Filter init mode</description>
          <bitOffset>0</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
      </fields>
    </register>
    <register>
      <name>FM1R</name>
      <displayName>FM1R</displayName>
      <description>filter mode register</description>
      <addressOffset>0x204</addressOffset>
      <size>0x20</size>
      <access>read-write</access>
      <resetValue>0x00000000</resetValue>
      <fields>
        <field>
          <name>FBM0</name>
          <description>Filter mode</description>
          <bitOffset>0</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FBM1</name>
          <description>Filter mode</description>
          <bitOffset>1</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FBM2</name>
          <description>Filter mode</description>
          <bitOffset>2</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FBM3</name>
          <description>Filter mode</description>
          <bitOffset>3</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FBM4</name>
          <description>Filter mode</description>
          <bitOffset>4</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FBM5</name>
          <description>Filter mode</description>
          <bitOffset>5</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FBM6</name>
          <description>Filter mode</description>
          <bitOffset>6</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FBM7</name>
          <description>Filter mode</description>
          <bitOffset>7</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FBM8</name>
          <description>Filter mode</description>
          <bitOffset>8</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FBM9</name>
          <description>Filter mode</description>
          <bitOffset>9</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FBM10</name>
          <description>Filter mode</description>
          <bitOffset>10</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FBM11</name>
          <description>Filter mode</description>
          <bitOffset>11</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FBM12</name>
          <description>Filter mode</description>
          <bitOffset>12</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FBM13</name>
          <description>Filter mode</description>
          <bitOffset>13</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FBM14</name>
          <description>Filter mode</description>
          <bitOffset>14</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FBM15</name>
          <description>Filter mode</description>
          <bitOffset>15</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FBM16</name>
          <description>Filter mode</description>
          <bitOffset>16</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FBM17</name>
          <description>Filter mode</description>
          <bitOffset>17</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FBM18</name>
          <description>Filter mode</description>
          <bitOffset>18</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FBM19</name>
          <description>Filter mode</description>
          <bitOffset>19</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FBM20</name>
          <description>Filter mode</description>
          <bitOffset>20</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FBM21</name>
          <description>Filter mode</description>
          <bitOffset>21</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FBM22</name>
          <description>Filter mode</description>
          <bitOffset>22</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FBM23</name>
          <description>Filter mode</description>
          <bitOffset>23</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FBM24</name>
          <description>Filter mode</description>
          <bitOffset>24</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FBM25</name>
          <description>Filter mode</description>
          <bitOffset>25</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FBM26</name>
          <description>Filter mode</description>
          <bitOffset>26</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FBM27</name>
          <description>Filter mode</description>
          <bitOffset>27</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
      </fields>
    </register>
    <register>
      <name>FS1R</name>
      <displayName>FS1R</displayName>
      <description>filter scale register</description>
      <addressOffset>0x20C</addressOffset>
      <size>0x20</size>
      <access>read-write</access>
      <resetValue>0x00000000</resetValue>
      <fields>
        <field>
          <name>FSC0</name>
          <description>Filter scale configuration</description>
          <bitOffset>0</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FSC1</name>
          <description>Filter scale configuration</description>
          <bitOffset>1</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FSC2</name>
          <description>Filter scale configuration</description>
          <bitOffset>2</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FSC3</name>
          <description>Filter scale configuration</description>
          <bitOffset>3</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FSC4</name>
          <description>Filter scale configuration</description>
          <bitOffset>4</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FSC5</name>
          <description>Filter scale configuration</description>
          <bitOffset>5</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FSC6</name>
          <description>Filter scale configuration</description>
          <bitOffset>6</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FSC7</name>
          <description>Filter scale configuration</description>
          <bitOffset>7</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FSC8</name>
          <description>Filter scale configuration</description>
          <bitOffset>8</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FSC9</name>
          <description>Filter scale configuration</description>
          <bitOffset>9</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FSC10</name>
          <description>Filter scale configuration</description>
          <bitOffset>10</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FSC11</name>
          <description>Filter scale configuration</description>
          <bitOffset>11</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FSC12</name>
          <description>Filter scale configuration</description>
          <bitOffset>12</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FSC13</name>
          <description>Filter scale configuration</description>
          <bitOffset>13</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FSC14</name>
          <description>Filter scale configuration</description>
          <bitOffset>14</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FSC15</name>
          <description>Filter scale configuration</description>
          <bitOffset>15</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FSC16</name>
          <description>Filter scale configuration</description>
          <bitOffset>16</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FSC17</name>
          <description>Filter scale configuration</description>
          <bitOffset>17</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FSC18</name>
          <description>Filter scale configuration</description>
          <bitOffset>18</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FSC19</name>
          <description>Filter scale configuration</description>
          <bitOffset>19</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FSC20</name>
          <description>Filter scale configuration</description>
          <bitOffset>20</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FSC21</name>
          <description>Filter scale configuration</description>
          <bitOffset>21</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FSC22</name>
          <description>Filter scale configuration</description>
          <bitOffset>22</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FSC23</name>
          <description>Filter scale configuration</description>
          <bitOffset>23</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FSC24</name>
          <description>Filter scale configuration</description>
          <bitOffset>24</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FSC25</name>
          <description>Filter scale configuration</description>
          <bitOffset>25</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FSC26</name>
          <description>Filter scale configuration</description>
          <bitOffset>26</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FSC27</name>
          <description>Filter scale configuration</description>
          <bitOffset>27</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
      </fields>
    </register>
    <register>
      <name>FFA1R</name>
      <displayName>FFA1R</displayName>
      <description>filter FIFO assignment
          register</description>
      <addressOffset>0x214</addressOffset>
      <size>0x20</size>
      <access>read-write</access>
      <resetValue>0x00000000</resetValue>
      <fields>
        <field>
          <name>FFA0</name>
          <description>Filter FIFO assignment for filter
              0</description>
          <bitOffset>0</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FFA1</name>
          <description>Filter FIFO assignment for filter
              1</description>
          <bitOffset>1</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FFA2</name>
          <description>Filter FIFO assignment for filter
              2</description>
          <bitOffset>2</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FFA3</name>
          <description>Filter FIFO assignment for filter
              3</description>
          <bitOffset>3</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FFA4</name>
          <description>Filter FIFO assignment for filter
              4</description>
          <bitOffset>4</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FFA5</name>
          <description>Filter FIFO assignment for filter
              5</description>
          <bitOffset>5</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FFA6</name>
          <description>Filter FIFO assignment for filter
              6</description>
          <bitOffset>6</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FFA7</name>
          <description>Filter FIFO assignment for filter
              7</description>
          <bitOffset>7</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FFA8</name>
          <description>Filter FIFO assignment for filter
              8</description>
          <bitOffset>8</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FFA9</name>
          <description>Filter FIFO assignment for filter
              9</description>
          <bitOffset>9</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FFA10</name>
          <description>Filter FIFO assignment for filter
              10</description>
          <bitOffset>10</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FFA11</name>
          <description>Filter FIFO assignment for filter
              11</description>
          <bitOffset>11</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FFA12</name>
          <description>Filter FIFO assignment for filter
              12</description>
          <bitOffset>12</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FFA13</name>
          <description>Filter FIFO assignment for filter
              13</description>
          <bitOffset>13</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FFA14</name>
          <description>Filter FIFO assignment for filter
              14</description>
          <bitOffset>14</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FFA15</name>
          <description>Filter FIFO assignment for filter
              15</description>
          <bitOffset>15</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FFA16</name>
          <description>Filter FIFO assignment for filter
              16</description>
          <bitOffset>16</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FFA17</name>
          <description>Filter FIFO assignment for filter
              17</description>
          <bitOffset>17</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FFA18</name>
          <description>Filter FIFO assignment for filter
              18</description>
          <bitOffset>18</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FFA19</name>
          <description>Filter FIFO assignment for filter
              19</description>
          <bitOffset>19</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FFA20</name>
          <description>Filter FIFO assignment for filter
              20</description>
          <bitOffset>20</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FFA21</name>
          <description>Filter FIFO assignment for filter
              21</description>
          <bitOffset>21</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FFA22</name>
          <description>Filter FIFO assignment for filter
              22</description>
          <bitOffset>22</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FFA23</name>
          <description>Filter FIFO assignment for filter
              23</description>
          <bitOffset>23</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FFA24</name>
          <description>Filter FIFO assignment for filter
              24</description>
          <bitOffset>24</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FFA25</name>
          <description>Filter FIFO assignment for filter
              25</description>
          <bitOffset>25</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FFA26</name>
          <description>Filter FIFO assignment for filter
              26</description>
          <bitOffset>26</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FFA27</name>
          <description>Filter FIFO assignment for filter
              27</description>
          <bitOffset>27</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
      </fields>
    </register>
    <register>
      <name>FA1R</name>
      <displayName>FA1R</displayName>
      <description>CAN filter activation register</description>
      <addressOffset>0x21C</addressOffset>
      <size>0x20</size>
      <access>read-write</access>
      <resetValue>0x00000000</resetValue>
      <fields>
        <field>
          <name>FACT0</name>
          <description>Filter active</description>
          <bitOffset>0</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FACT1</name>
          <description>Filter active</description>
          <bitOffset>1</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FACT2</name>
          <description>Filter active</description>
          <bitOffset>2</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FACT3</name>
          <description>Filter active</description>
          <bitOffset>3</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FACT4</name>
          <description>Filter active</description>
          <bitOffset>4</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FACT5</name>
          <description>Filter active</description>
          <bitOffset>5</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FACT6</name>
          <description>Filter active</description>
          <bitOffset>6</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FACT7</name>
          <description>Filter active</description>
          <bitOffset>7</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FACT8</name>
          <description>Filter active</description>
          <bitOffset>8</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FACT9</name>
          <description>Filter active</description>
          <bitOffset>9</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FACT10</name>
          <description>Filter active</description>
          <bitOffset>10</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FACT11</name>
          <description>Filter active</description>
          <bitOffset>11</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FACT12</name>
          <description>Filter active</description>
          <bitOffset>12</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FACT13</name>
          <description>Filter active</description>
          <bitOffset>13</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FACT14</name>
          <description>Filter active</description>
          <bitOffset>14</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FACT15</name>
          <description>Filter active</description>
          <bitOffset>15</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FACT16</name>
          <description>Filter active</description>
          <bitOffset>16</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FACT17</name>
          <description>Filter active</description>
          <bitOffset>17</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FACT18</name>
          <description>Filter active</description>
          <bitOffset>18</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FACT19</name>
          <description>Filter active</description>
          <bitOffset>19</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FACT20</name>
          <description>Filter active</description>
          <bitOffset>20</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FACT21</name>
          <description>Filter active</description>
          <bitOffset>21</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FACT22</name>
          <description>Filter active</description>
          <bitOffset>22</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FACT23</name>
          <description>Filter active</description>
          <bitOffset>23</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FACT24</name>
          <description>Filter active</description>
          <bitOffset>24</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FACT25</name>
          <description>Filter active</description>
          <bitOffset>25</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FACT26</name>
          <description>Filter active</description>
          <bitOffset>26</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FACT27</name>
          <description>Filter active</description>
          <bitOffset>27</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
      </fields>
    </register>
    <register>
      <name>F0R1</name>
      <displayName>F0R1</displayName>
      <description>Filter bank 0 register 1</description>
      <addressOffset>0x240</addressOffset>
      <size>0x20</size>
      <access>read-write</access>
      <resetValue>0x00000000</resetValue>
      <fields>
        <field>
          <name>FB0</name>
          <description>Filter bits</description>
          <bitOffset>0</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB1</name>
          <description>Filter bits</description>
          <bitOffset>1</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB2</name>
          <description>Filter bits</description>
          <bitOffset>2</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB3</name>
          <description>Filter bits</description>
          <bitOffset>3</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB4</name>
          <description>Filter bits</description>
          <bitOffset>4</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB5</name>
          <description>Filter bits</description>
          <bitOffset>5</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB6</name>
          <description>Filter bits</description>
          <bitOffset>6</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB7</name>
          <description>Filter bits</description>
          <bitOffset>7</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB8</name>
          <description>Filter bits</description>
          <bitOffset>8</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB9</name>
          <description>Filter bits</description>
          <bitOffset>9</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB10</name>
          <description>Filter bits</description>
          <bitOffset>10</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB11</name>
          <description>Filter bits</description>
          <bitOffset>11</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB12</name>
          <description>Filter bits</description>
          <bitOffset>12</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB13</name>
          <description>Filter bits</description>
          <bitOffset>13</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB14</name>
          <description>Filter bits</description>
          <bitOffset>14</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB15</name>
          <description>Filter bits</description>
          <bitOffset>15</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB16</name>
          <description>Filter bits</description>
          <bitOffset>16</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB17</name>
          <description>Filter bits</description>
          <bitOffset>17</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB18</name>
          <description>Filter bits</description>
          <bitOffset>18</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB19</name>
          <description>Filter bits</description>
          <bitOffset>19</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB20</name>
          <description>Filter bits</description>
          <bitOffset>20</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB21</name>
          <description>Filter bits</description>
          <bitOffset>21</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB22</name>
          <description>Filter bits</description>
          <bitOffset>22</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB23</name>
          <description>Filter bits</description>
          <bitOffset>23</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB24</name>
          <description>Filter bits</description>
          <bitOffset>24</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB25</name>
          <description>Filter bits</description>
          <bitOffset>25</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB26</name>
          <description>Filter bits</description>
          <bitOffset>26</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB27</name>
          <description>Filter bits</description>
          <bitOffset>27</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB28</name>
          <description>Filter bits</description>
          <bitOffset>28</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB29</name>
          <description>Filter bits</description>
          <bitOffset>29</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB30</name>
          <description>Filter bits</description>
          <bitOffset>30</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB31</name>
          <description>Filter bits</description>
          <bitOffset>31</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
      </fields>
    </register>
    <register>
      <name>F0R2</name>
      <displayName>F0R2</displayName>
      <description>Filter bank 0 register 2</description>
      <addressOffset>0x244</addressOffset>
      <size>0x20</size>
      <access>read-write</access>
      <resetValue>0x00000000</resetValue>
      <fields>
        <field>
          <name>FB0</name>
          <description>Filter bits</description>
          <bitOffset>0</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB1</name>
          <description>Filter bits</description>
          <bitOffset>1</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB2</name>
          <description>Filter bits</description>
          <bitOffset>2</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB3</name>
          <description>Filter bits</description>
          <bitOffset>3</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB4</name>
          <description>Filter bits</description>
          <bitOffset>4</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB5</name>
          <description>Filter bits</description>
          <bitOffset>5</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB6</name>
          <description>Filter bits</description>
          <bitOffset>6</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB7</name>
          <description>Filter bits</description>
          <bitOffset>7</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB8</name>
          <description>Filter bits</description>
          <bitOffset>8</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB9</name>
          <description>Filter bits</description>
          <bitOffset>9</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB10</name>
          <description>Filter bits</description>
          <bitOffset>10</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB11</name>
          <description>Filter bits</description>
          <bitOffset>11</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB12</name>
          <description>Filter bits</description>
          <bitOffset>12</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB13</name>
          <description>Filter bits</description>
          <bitOffset>13</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB14</name>
          <description>Filter bits</description>
          <bitOffset>14</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB15</name>
          <description>Filter bits</description>
          <bitOffset>15</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB16</name>
          <description>Filter bits</description>
          <bitOffset>16</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB17</name>
          <description>Filter bits</description>
          <bitOffset>17</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB18</name>
          <description>Filter bits</description>
          <bitOffset>18</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB19</name>
          <description>Filter bits</description>
          <bitOffset>19</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB20</name>
          <description>Filter bits</description>
          <bitOffset>20</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB21</name>
          <description>Filter bits</description>
          <bitOffset>21</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB22</name>
          <description>Filter bits</description>
          <bitOffset>22</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB23</name>
          <description>Filter bits</description>
          <bitOffset>23</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB24</name>
          <description>Filter bits</description>
          <bitOffset>24</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB25</name>
          <description>Filter bits</description>
          <bitOffset>25</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB26</name>
          <description>Filter bits</description>
          <bitOffset>26</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB27</name>
          <description>Filter bits</description>
          <bitOffset>27</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB28</name>
          <description>Filter bits</description>
          <bitOffset>28</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB29</name>
          <description>Filter bits</description>
          <bitOffset>29</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB30</name>
          <description>Filter bits</description>
          <bitOffset>30</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB31</name>
          <description>Filter bits</description>
          <bitOffset>31</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
      </fields>
    </register>
    <register>
      <name>F1R1</name>
      <displayName>F1R1</displayName>
      <description>Filter bank 1 register 1</description>
      <addressOffset>0x248</addressOffset>
      <size>0x20</size>
      <access>read-write</access>
      <resetValue>0x00000000</resetValue>
      <fields>
        <field>
          <name>FB0</name>
          <description>Filter bits</description>
          <bitOffset>0</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB1</name>
          <description>Filter bits</description>
          <bitOffset>1</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB2</name>
          <description>Filter bits</description>
          <bitOffset>2</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB3</name>
          <description>Filter bits</description>
          <bitOffset>3</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB4</name>
          <description>Filter bits</description>
          <bitOffset>4</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB5</name>
          <description>Filter bits</description>
          <bitOffset>5</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB6</name>
          <description>Filter bits</description>
          <bitOffset>6</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB7</name>
          <description>Filter bits</description>
          <bitOffset>7</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB8</name>
          <description>Filter bits</description>
          <bitOffset>8</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB9</name>
          <description>Filter bits</description>
          <bitOffset>9</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB10</name>
          <description>Filter bits</description>
          <bitOffset>10</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB11</name>
          <description>Filter bits</description>
          <bitOffset>11</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB12</name>
          <description>Filter bits</description>
          <bitOffset>12</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB13</name>
          <description>Filter bits</description>
          <bitOffset>13</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB14</name>
          <description>Filter bits</description>
          <bitOffset>14</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB15</name>
          <description>Filter bits</description>
          <bitOffset>15</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB16</name>
          <description>Filter bits</description>
          <bitOffset>16</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB17</name>
          <description>Filter bits</description>
          <bitOffset>17</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB18</name>
          <description>Filter bits</description>
          <bitOffset>18</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB19</name>
          <description>Filter bits</description>
          <bitOffset>19</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB20</name>
          <description>Filter bits</description>
          <bitOffset>20</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB21</name>
          <description>Filter bits</description>
          <bitOffset>21</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB22</name>
          <description>Filter bits</description>
          <bitOffset>22</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB23</name>
          <description>Filter bits</description>
          <bitOffset>23</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB24</name>
          <description>Filter bits</description>
          <bitOffset>24</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB25</name>
          <description>Filter bits</description>
          <bitOffset>25</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB26</name>
          <description>Filter bits</description>
          <bitOffset>26</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB27</name>
          <description>Filter bits</description>
          <bitOffset>27</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB28</name>
          <description>Filter bits</description>
          <bitOffset>28</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB29</name>
          <description>Filter bits</description>
          <bitOffset>29</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB30</name>
          <description>Filter bits</description>
          <bitOffset>30</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB31</name>
          <description>Filter bits</description>
          <bitOffset>31</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
      </fields>
    </register>
    <register>
      <name>F1R2</name>
      <displayName>F1R2</displayName>
      <description>Filter bank 1 register 2</description>
      <addressOffset>0x24C</addressOffset>
      <size>0x20</size>
      <access>read-write</access>
      <resetValue>0x00000000</resetValue>
      <fields>
        <field>
          <name>FB0</name>
          <description>Filter bits</description>
          <bitOffset>0</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB1</name>
          <description>Filter bits</description>
          <bitOffset>1</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB2</name>
          <description>Filter bits</description>
          <bitOffset>2</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB3</name>
          <description>Filter bits</description>
          <bitOffset>3</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB4</name>
          <description>Filter bits</description>
          <bitOffset>4</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB5</name>
          <description>Filter bits</description>
          <bitOffset>5</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB6</name>
          <description>Filter bits</description>
          <bitOffset>6</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB7</name>
          <description>Filter bits</description>
          <bitOffset>7</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB8</name>
          <description>Filter bits</description>
          <bitOffset>8</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB9</name>
          <description>Filter bits</description>
          <bitOffset>9</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB10</name>
          <description>Filter bits</description>
          <bitOffset>10</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB11</name>
          <description>Filter bits</description>
          <bitOffset>11</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB12</name>
          <description>Filter bits</description>
          <bitOffset>12</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB13</name>
          <description>Filter bits</description>
          <bitOffset>13</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB14</name>
          <description>Filter bits</description>
          <bitOffset>14</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB15</name>
          <description>Filter bits</description>
          <bitOffset>15</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB16</name>
          <description>Filter bits</description>
          <bitOffset>16</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB17</name>
          <description>Filter bits</description>
          <bitOffset>17</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB18</name>
          <description>Filter bits</description>
          <bitOffset>18</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB19</name>
          <description>Filter bits</description>
          <bitOffset>19</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB20</name>
          <description>Filter bits</description>
          <bitOffset>20</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB21</name>
          <description>Filter bits</description>
          <bitOffset>21</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB22</name>
          <description>Filter bits</description>
          <bitOffset>22</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB23</name>
          <description>Filter bits</description>
          <bitOffset>23</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB24</name>
          <description>Filter bits</description>
          <bitOffset>24</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB25</name>
          <description>Filter bits</description>
          <bitOffset>25</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB26</name>
          <description>Filter bits</description>
          <bitOffset>26</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB27</name>
          <description>Filter bits</description>
          <bitOffset>27</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB28</name>
          <description>Filter bits</description>
          <bitOffset>28</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB29</name>
          <description>Filter bits</description>
          <bitOffset>29</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB30</name>
          <description>Filter bits</description>
          <bitOffset>30</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB31</name>
          <description>Filter bits</description>
          <bitOffset>31</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
      </fields>
    </register>
    <register>
      <name>F2R1</name>
      <displayName>F2R1</displayName>
      <description>Filter bank 2 register 1</description>
      <addressOffset>0x250</addressOffset>
      <size>0x20</size>
      <access>read-write</access>
      <resetValue>0x00000000</resetValue>
      <fields>
        <field>
          <name>FB0</name>
          <description>Filter bits</description>
          <bitOffset>0</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB1</name>
          <description>Filter bits</description>
          <bitOffset>1</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB2</name>
          <description>Filter bits</description>
          <bitOffset>2</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB3</name>
          <description>Filter bits</description>
          <bitOffset>3</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB4</name>
          <description>Filter bits</description>
          <bitOffset>4</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB5</name>
          <description>Filter bits</description>
          <bitOffset>5</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB6</name>
          <description>Filter bits</description>
          <bitOffset>6</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB7</name>
          <description>Filter bits</description>
          <bitOffset>7</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB8</name>
          <description>Filter bits</description>
          <bitOffset>8</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB9</name>
          <description>Filter bits</description>
          <bitOffset>9</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB10</name>
          <description>Filter bits</description>
          <bitOffset>10</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB11</name>
          <description>Filter bits</description>
          <bitOffset>11</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB12</name>
          <description>Filter bits</description>
          <bitOffset>12</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB13</name>
          <description>Filter bits</description>
          <bitOffset>13</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB14</name>
          <description>Filter bits</description>
          <bitOffset>14</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB15</name>
          <description>Filter bits</description>
          <bitOffset>15</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB16</name>
          <description>Filter bits</description>
          <bitOffset>16</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB17</name>
          <description>Filter bits</description>
          <bitOffset>17</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB18</name>
          <description>Filter bits</description>
          <bitOffset>18</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB19</name>
          <description>Filter bits</description>
          <bitOffset>19</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB20</name>
          <description>Filter bits</description>
          <bitOffset>20</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB21</name>
          <description>Filter bits</description>
          <bitOffset>21</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB22</name>
          <description>Filter bits</description>
          <bitOffset>22</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB23</name>
          <description>Filter bits</description>
          <bitOffset>23</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB24</name>
          <description>Filter bits</description>
          <bitOffset>24</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB25</name>
          <description>Filter bits</description>
          <bitOffset>25</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB26</name>
          <description>Filter bits</description>
          <bitOffset>26</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB27</name>
          <description>Filter bits</description>
          <bitOffset>27</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB28</name>
          <description>Filter bits</description>
          <bitOffset>28</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB29</name>
          <description>Filter bits</description>
          <bitOffset>29</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB30</name>
          <description>Filter bits</description>
          <bitOffset>30</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB31</name>
          <description>Filter bits</description>
          <bitOffset>31</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
      </fields>
    </register>
    <register>
      <name>F2R2</name>
      <displayName>F2R2</displayName>
      <description>Filter bank 2 register 2</description>
      <addressOffset>0x254</addressOffset>
      <size>0x20</size>
      <access>read-write</access>
      <resetValue>0x00000000</resetValue>
      <fields>
        <field>
          <name>FB0</name>
          <description>Filter bits</description>
          <bitOffset>0</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB1</name>
          <description>Filter bits</description>
          <bitOffset>1</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB2</name>
          <description>Filter bits</description>
          <bitOffset>2</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB3</name>
          <description>Filter bits</description>
          <bitOffset>3</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB4</name>
          <description>Filter bits</description>
          <bitOffset>4</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB5</name>
          <description>Filter bits</description>
          <bitOffset>5</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB6</name>
          <description>Filter bits</description>
          <bitOffset>6</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB7</name>
          <description>Filter bits</description>
          <bitOffset>7</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB8</name>
          <description>Filter bits</description>
          <bitOffset>8</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB9</name>
          <description>Filter bits</description>
          <bitOffset>9</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB10</name>
          <description>Filter bits</description>
          <bitOffset>10</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB11</name>
          <description>Filter bits</description>
          <bitOffset>11</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB12</name>
          <description>Filter bits</description>
          <bitOffset>12</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB13</name>
          <description>Filter bits</description>
          <bitOffset>13</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB14</name>
          <description>Filter bits</description>
          <bitOffset>14</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB15</name>
          <description>Filter bits</description>
          <bitOffset>15</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB16</name>
          <description>Filter bits</description>
          <bitOffset>16</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB17</name>
          <description>Filter bits</description>
          <bitOffset>17</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB18</name>
          <description>Filter bits</description>
          <bitOffset>18</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB19</name>
          <description>Filter bits</description>
          <bitOffset>19</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB20</name>
          <description>Filter bits</description>
          <bitOffset>20</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB21</name>
          <description>Filter bits</description>
          <bitOffset>21</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB22</name>
          <description>Filter bits</description>
          <bitOffset>22</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB23</name>
          <description>Filter bits</description>
          <bitOffset>23</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB24</name>
          <description>Filter bits</description>
          <bitOffset>24</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB25</name>
          <description>Filter bits</description>
          <bitOffset>25</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB26</name>
          <description>Filter bits</description>
          <bitOffset>26</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB27</name>
          <description>Filter bits</description>
          <bitOffset>27</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB28</name>
          <description>Filter bits</description>
          <bitOffset>28</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB29</name>
          <description>Filter bits</description>
          <bitOffset>29</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB30</name>
          <description>Filter bits</description>
          <bitOffset>30</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB31</name>
          <description>Filter bits</description>
          <bitOffset>31</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
      </fields>
    </register>
    <register>
      <name>F3R1</name>
      <displayName>F3R1</displayName>
      <description>Filter bank 3 register 1</description>
      <addressOffset>0x258</addressOffset>
      <size>0x20</size>
      <access>read-write</access>
      <resetValue>0x00000000</resetValue>
      <fields>
        <field>
          <name>FB0</name>
          <description>Filter bits</description>
          <bitOffset>0</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB1</name>
          <description>Filter bits</description>
          <bitOffset>1</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB2</name>
          <description>Filter bits</description>
          <bitOffset>2</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB3</name>
          <description>Filter bits</description>
          <bitOffset>3</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB4</name>
          <description>Filter bits</description>
          <bitOffset>4</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB5</name>
          <description>Filter bits</description>
          <bitOffset>5</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB6</name>
          <description>Filter bits</description>
          <bitOffset>6</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB7</name>
          <description>Filter bits</description>
          <bitOffset>7</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB8</name>
          <description>Filter bits</description>
          <bitOffset>8</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB9</name>
          <description>Filter bits</description>
          <bitOffset>9</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB10</name>
          <description>Filter bits</description>
          <bitOffset>10</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB11</name>
          <description>Filter bits</description>
          <bitOffset>11</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB12</name>
          <description>Filter bits</description>
          <bitOffset>12</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB13</name>
          <description>Filter bits</description>
          <bitOffset>13</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB14</name>
          <description>Filter bits</description>
          <bitOffset>14</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB15</name>
          <description>Filter bits</description>
          <bitOffset>15</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB16</name>
          <description>Filter bits</description>
          <bitOffset>16</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB17</name>
          <description>Filter bits</description>
          <bitOffset>17</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB18</name>
          <description>Filter bits</description>
          <bitOffset>18</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB19</name>
          <description>Filter bits</description>
          <bitOffset>19</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB20</name>
          <description>Filter bits</description>
          <bitOffset>20</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB21</name>
          <description>Filter bits</description>
          <bitOffset>21</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB22</name>
          <description>Filter bits</description>
          <bitOffset>22</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB23</name>
          <description>Filter bits</description>
          <bitOffset>23</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB24</name>
          <description>Filter bits</description>
          <bitOffset>24</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB25</name>
          <description>Filter bits</description>
          <bitOffset>25</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB26</name>
          <description>Filter bits</description>
          <bitOffset>26</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB27</name>
          <description>Filter bits</description>
          <bitOffset>27</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB28</name>
          <description>Filter bits</description>
          <bitOffset>28</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB29</name>
          <description>Filter bits</description>
          <bitOffset>29</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB30</name>
          <description>Filter bits</description>
          <bitOffset>30</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB31</name>
          <description>Filter bits</description>
          <bitOffset>31</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
      </fields>
    </register>
    <register>
      <name>F3R2</name>
      <displayName>F3R2</displayName>
      <description>Filter bank 3 register 2</description>
      <addressOffset>0x25C</addressOffset>
      <size>0x20</size>
      <access>read-write</access>
      <resetValue>0x00000000</resetValue>
      <fields>
        <field>
          <name>FB0</name>
          <description>Filter bits</description>
          <bitOffset>0</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB1</name>
          <description>Filter bits</description>
          <bitOffset>1</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB2</name>
          <description>Filter bits</description>
          <bitOffset>2</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB3</name>
          <description>Filter bits</description>
          <bitOffset>3</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB4</name>
          <description>Filter bits</description>
          <bitOffset>4</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB5</name>
          <description>Filter bits</description>
          <bitOffset>5</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB6</name>
          <description>Filter bits</description>
          <bitOffset>6</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB7</name>
          <description>Filter bits</description>
          <bitOffset>7</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB8</name>
          <description>Filter bits</description>
          <bitOffset>8</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB9</name>
          <description>Filter bits</description>
          <bitOffset>9</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB10</name>
          <description>Filter bits</description>
          <bitOffset>10</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB11</name>
          <description>Filter bits</description>
          <bitOffset>11</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB12</name>
          <description>Filter bits</description>
          <bitOffset>12</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB13</name>
          <description>Filter bits</description>
          <bitOffset>13</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB14</name>
          <description>Filter bits</description>
          <bitOffset>14</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB15</name>
          <description>Filter bits</description>
          <bitOffset>15</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB16</name>
          <description>Filter bits</description>
          <bitOffset>16</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB17</name>
          <description>Filter bits</description>
          <bitOffset>17</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB18</name>
          <description>Filter bits</description>
          <bitOffset>18</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB19</name>
          <description>Filter bits</description>
          <bitOffset>19</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB20</name>
          <description>Filter bits</description>
          <bitOffset>20</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB21</name>
          <description>Filter bits</description>
          <bitOffset>21</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB22</name>
          <description>Filter bits</description>
          <bitOffset>22</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB23</name>
          <description>Filter bits</description>
          <bitOffset>23</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB24</name>
          <description>Filter bits</description>
          <bitOffset>24</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB25</name>
          <description>Filter bits</description>
          <bitOffset>25</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB26</name>
          <description>Filter bits</description>
          <bitOffset>26</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB27</name>
          <description>Filter bits</description>
          <bitOffset>27</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB28</name>
          <description>Filter bits</description>
          <bitOffset>28</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB29</name>
          <description>Filter bits</description>
          <bitOffset>29</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB30</name>
          <description>Filter bits</description>
          <bitOffset>30</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB31</name>
          <description>Filter bits</description>
          <bitOffset>31</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
      </fields>
    </register>
    <register>
      <name>F4R1</name>
      <displayName>F4R1</displayName>
      <description>Filter bank 4 register 1</description>
      <addressOffset>0x260</addressOffset>
      <size>0x20</size>
      <access>read-write</access>
      <resetValue>0x00000000</resetValue>
      <fields>
        <field>
          <name>FB0</name>
          <description>Filter bits</description>
          <bitOffset>0</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB1</name>
          <description>Filter bits</description>
          <bitOffset>1</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB2</name>
          <description>Filter bits</description>
          <bitOffset>2</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB3</name>
          <description>Filter bits</description>
          <bitOffset>3</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB4</name>
          <description>Filter bits</description>
          <bitOffset>4</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB5</name>
          <description>Filter bits</description>
          <bitOffset>5</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB6</name>
          <description>Filter bits</description>
          <bitOffset>6</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB7</name>
          <description>Filter bits</description>
          <bitOffset>7</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB8</name>
          <description>Filter bits</description>
          <bitOffset>8</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB9</name>
          <description>Filter bits</description>
          <bitOffset>9</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB10</name>
          <description>Filter bits</description>
          <bitOffset>10</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB11</name>
          <description>Filter bits</description>
          <bitOffset>11</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB12</name>
          <description>Filter bits</description>
          <bitOffset>12</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB13</name>
          <description>Filter bits</description>
          <bitOffset>13</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB14</name>
          <description>Filter bits</description>
          <bitOffset>14</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB15</name>
          <description>Filter bits</description>
          <bitOffset>15</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB16</name>
          <description>Filter bits</description>
          <bitOffset>16</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB17</name>
          <description>Filter bits</description>
          <bitOffset>17</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB18</name>
          <description>Filter bits</description>
          <bitOffset>18</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB19</name>
          <description>Filter bits</description>
          <bitOffset>19</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB20</name>
          <description>Filter bits</description>
          <bitOffset>20</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB21</name>
          <description>Filter bits</description>
          <bitOffset>21</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB22</name>
          <description>Filter bits</description>
          <bitOffset>22</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB23</name>
          <description>Filter bits</description>
          <bitOffset>23</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB24</name>
          <description>Filter bits</description>
          <bitOffset>24</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB25</name>
          <description>Filter bits</description>
          <bitOffset>25</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB26</name>
          <description>Filter bits</description>
          <bitOffset>26</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB27</name>
          <description>Filter bits</description>
          <bitOffset>27</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB28</name>
          <description>Filter bits</description>
          <bitOffset>28</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB29</name>
          <description>Filter bits</description>
          <bitOffset>29</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB30</name>
          <description>Filter bits</description>
          <bitOffset>30</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB31</name>
          <description>Filter bits</description>
          <bitOffset>31</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
      </fields>
    </register>
    <register>
      <name>F4R2</name>
      <displayName>F4R2</displayName>
      <description>Filter bank 4 register 2</description>
      <addressOffset>0x264</addressOffset>
      <size>0x20</size>
      <access>read-write</access>
      <resetValue>0x00000000</resetValue>
      <fields>
        <field>
          <name>FB0</name>
          <description>Filter bits</description>
          <bitOffset>0</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB1</name>
          <description>Filter bits</description>
          <bitOffset>1</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB2</name>
          <description>Filter bits</description>
          <bitOffset>2</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB3</name>
          <description>Filter bits</description>
          <bitOffset>3</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB4</name>
          <description>Filter bits</description>
          <bitOffset>4</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB5</name>
          <description>Filter bits</description>
          <bitOffset>5</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB6</name>
          <description>Filter bits</description>
          <bitOffset>6</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB7</name>
          <description>Filter bits</description>
          <bitOffset>7</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB8</name>
          <description>Filter bits</description>
          <bitOffset>8</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB9</name>
          <description>Filter bits</description>
          <bitOffset>9</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB10</name>
          <description>Filter bits</description>
          <bitOffset>10</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB11</name>
          <description>Filter bits</description>
          <bitOffset>11</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB12</name>
          <description>Filter bits</description>
          <bitOffset>12</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB13</name>
          <description>Filter bits</description>
          <bitOffset>13</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB14</name>
          <description>Filter bits</description>
          <bitOffset>14</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB15</name>
          <description>Filter bits</description>
          <bitOffset>15</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB16</name>
          <description>Filter bits</description>
          <bitOffset>16</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB17</name>
          <description>Filter bits</description>
          <bitOffset>17</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB18</name>
          <description>Filter bits</description>
          <bitOffset>18</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB19</name>
          <description>Filter bits</description>
          <bitOffset>19</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB20</name>
          <description>Filter bits</description>
          <bitOffset>20</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB21</name>
          <description>Filter bits</description>
          <bitOffset>21</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB22</name>
          <description>Filter bits</description>
          <bitOffset>22</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB23</name>
          <description>Filter bits</description>
          <bitOffset>23</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB24</name>
          <description>Filter bits</description>
          <bitOffset>24</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB25</name>
          <description>Filter bits</description>
          <bitOffset>25</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB26</name>
          <description>Filter bits</description>
          <bitOffset>26</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB27</name>
          <description>Filter bits</description>
          <bitOffset>27</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB28</name>
          <description>Filter bits</description>
          <bitOffset>28</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB29</name>
          <description>Filter bits</description>
          <bitOffset>29</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB30</name>
          <description>Filter bits</description>
          <bitOffset>30</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB31</name>
          <description>Filter bits</description>
          <bitOffset>31</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
      </fields>
    </register>
    <register>
      <name>F5R1</name>
      <displayName>F5R1</displayName>
      <description>Filter bank 5 register 1</description>
      <addressOffset>0x268</addressOffset>
      <size>0x20</size>
      <access>read-write</access>
      <resetValue>0x00000000</resetValue>
      <fields>
        <field>
          <name>FB0</name>
          <description>Filter bits</description>
          <bitOffset>0</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB1</name>
          <description>Filter bits</description>
          <bitOffset>1</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB2</name>
          <description>Filter bits</description>
          <bitOffset>2</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB3</name>
          <description>Filter bits</description>
          <bitOffset>3</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB4</name>
          <description>Filter bits</description>
          <bitOffset>4</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB5</name>
          <description>Filter bits</description>
          <bitOffset>5</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB6</name>
          <description>Filter bits</description>
          <bitOffset>6</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB7</name>
          <description>Filter bits</description>
          <bitOffset>7</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB8</name>
          <description>Filter bits</description>
          <bitOffset>8</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB9</name>
          <description>Filter bits</description>
          <bitOffset>9</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB10</name>
          <description>Filter bits</description>
          <bitOffset>10</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB11</name>
          <description>Filter bits</description>
          <bitOffset>11</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB12</name>
          <description>Filter bits</description>
          <bitOffset>12</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB13</name>
          <description>Filter bits</description>
          <bitOffset>13</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB14</name>
          <description>Filter bits</description>
          <bitOffset>14</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB15</name>
          <description>Filter bits</description>
          <bitOffset>15</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB16</name>
          <description>Filter bits</description>
          <bitOffset>16</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB17</name>
          <description>Filter bits</description>
          <bitOffset>17</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB18</name>
          <description>Filter bits</description>
          <bitOffset>18</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB19</name>
          <description>Filter bits</description>
          <bitOffset>19</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB20</name>
          <description>Filter bits</description>
          <bitOffset>20</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB21</name>
          <description>Filter bits</description>
          <bitOffset>21</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB22</name>
          <description>Filter bits</description>
          <bitOffset>22</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB23</name>
          <description>Filter bits</description>
          <bitOffset>23</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB24</name>
          <description>Filter bits</description>
          <bitOffset>24</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB25</name>
          <description>Filter bits</description>
          <bitOffset>25</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB26</name>
          <description>Filter bits</description>
          <bitOffset>26</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB27</name>
          <description>Filter bits</description>
          <bitOffset>27</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB28</name>
          <description>Filter bits</description>
          <bitOffset>28</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB29</name>
          <description>Filter bits</description>
          <bitOffset>29</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB30</name>
          <description>Filter bits</description>
          <bitOffset>30</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB31</name>
          <description>Filter bits</description>
          <bitOffset>31</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
      </fields>
    </register>
    <register>
      <name>F5R2</name>
      <displayName>F5R2</displayName>
      <description>Filter bank 5 register 2</description>
      <addressOffset>0x26C</addressOffset>
      <size>0x20</size>
      <access>read-write</access>
      <resetValue>0x00000000</resetValue>
      <fields>
        <field>
          <name>FB0</name>
          <description>Filter bits</description>
          <bitOffset>0</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB1</name>
          <description>Filter bits</description>
          <bitOffset>1</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB2</name>
          <description>Filter bits</description>
          <bitOffset>2</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB3</name>
          <description>Filter bits</description>
          <bitOffset>3</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB4</name>
          <description>Filter bits</description>
          <bitOffset>4</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB5</name>
          <description>Filter bits</description>
          <bitOffset>5</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB6</name>
          <description>Filter bits</description>
          <bitOffset>6</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB7</name>
          <description>Filter bits</description>
          <bitOffset>7</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB8</name>
          <description>Filter bits</description>
          <bitOffset>8</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB9</name>
          <description>Filter bits</description>
          <bitOffset>9</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB10</name>
          <description>Filter bits</description>
          <bitOffset>10</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB11</name>
          <description>Filter bits</description>
          <bitOffset>11</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB12</name>
          <description>Filter bits</description>
          <bitOffset>12</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB13</name>
          <description>Filter bits</description>
          <bitOffset>13</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB14</name>
          <description>Filter bits</description>
          <bitOffset>14</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB15</name>
          <description>Filter bits</description>
          <bitOffset>15</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB16</name>
          <description>Filter bits</description>
          <bitOffset>16</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB17</name>
          <description>Filter bits</description>
          <bitOffset>17</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB18</name>
          <description>Filter bits</description>
          <bitOffset>18</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB19</name>
          <description>Filter bits</description>
          <bitOffset>19</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB20</name>
          <description>Filter bits</description>
          <bitOffset>20</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB21</name>
          <description>Filter bits</description>
          <bitOffset>21</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB22</name>
          <description>Filter bits</description>
          <bitOffset>22</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB23</name>
          <description>Filter bits</description>
          <bitOffset>23</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB24</name>
          <description>Filter bits</description>
          <bitOffset>24</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB25</name>
          <description>Filter bits</description>
          <bitOffset>25</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB26</name>
          <description>Filter bits</description>
          <bitOffset>26</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB27</name>
          <description>Filter bits</description>
          <bitOffset>27</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB28</name>
          <description>Filter bits</description>
          <bitOffset>28</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB29</name>
          <description>Filter bits</description>
          <bitOffset>29</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB30</name>
          <description>Filter bits</description>
          <bitOffset>30</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB31</name>
          <description>Filter bits</description>
          <bitOffset>31</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
      </fields>
    </register>
    <register>
      <name>F6R1</name>
      <displayName>F6R1</displayName>
      <description>Filter bank 6 register 1</description>
      <addressOffset>0x270</addressOffset>
      <size>0x20</size>
      <access>read-write</access>
      <resetValue>0x00000000</resetValue>
      <fields>
        <field>
          <name>FB0</name>
          <description>Filter bits</description>
          <bitOffset>0</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB1</name>
          <description>Filter bits</description>
          <bitOffset>1</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB2</name>
          <description>Filter bits</description>
          <bitOffset>2</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB3</name>
          <description>Filter bits</description>
          <bitOffset>3</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB4</name>
          <description>Filter bits</description>
          <bitOffset>4</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB5</name>
          <description>Filter bits</description>
          <bitOffset>5</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB6</name>
          <description>Filter bits</description>
          <bitOffset>6</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB7</name>
          <description>Filter bits</description>
          <bitOffset>7</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB8</name>
          <description>Filter bits</description>
          <bitOffset>8</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB9</name>
          <description>Filter bits</description>
          <bitOffset>9</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB10</name>
          <description>Filter bits</description>
          <bitOffset>10</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB11</name>
          <description>Filter bits</description>
          <bitOffset>11</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB12</name>
          <description>Filter bits</description>
          <bitOffset>12</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB13</name>
          <description>Filter bits</description>
          <bitOffset>13</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB14</name>
          <description>Filter bits</description>
          <bitOffset>14</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB15</name>
          <description>Filter bits</description>
          <bitOffset>15</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB16</name>
          <description>Filter bits</description>
          <bitOffset>16</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB17</name>
          <description>Filter bits</description>
          <bitOffset>17</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB18</name>
          <description>Filter bits</description>
          <bitOffset>18</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB19</name>
          <description>Filter bits</description>
          <bitOffset>19</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB20</name>
          <description>Filter bits</description>
          <bitOffset>20</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB21</name>
          <description>Filter bits</description>
          <bitOffset>21</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB22</name>
          <description>Filter bits</description>
          <bitOffset>22</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB23</name>
          <description>Filter bits</description>
          <bitOffset>23</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB24</name>
          <description>Filter bits</description>
          <bitOffset>24</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB25</name>
          <description>Filter bits</description>
          <bitOffset>25</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB26</name>
          <description>Filter bits</description>
          <bitOffset>26</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB27</name>
          <description>Filter bits</description>
          <bitOffset>27</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB28</name>
          <description>Filter bits</description>
          <bitOffset>28</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB29</name>
          <description>Filter bits</description>
          <bitOffset>29</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB30</name>
          <description>Filter bits</description>
          <bitOffset>30</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB31</name>
          <description>Filter bits</description>
          <bitOffset>31</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
      </fields>
    </register>
    <register>
      <name>F6R2</name>
      <displayName>F6R2</displayName>
      <description>Filter bank 6 register 2</description>
      <addressOffset>0x274</addressOffset>
      <size>0x20</size>
      <access>read-write</access>
      <resetValue>0x00000000</resetValue>
      <fields>
        <field>
          <name>FB0</name>
          <description>Filter bits</description>
          <bitOffset>0</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB1</name>
          <description>Filter bits</description>
          <bitOffset>1</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB2</name>
          <description>Filter bits</description>
          <bitOffset>2</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB3</name>
          <description>Filter bits</description>
          <bitOffset>3</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB4</name>
          <description>Filter bits</description>
          <bitOffset>4</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB5</name>
          <description>Filter bits</description>
          <bitOffset>5</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB6</name>
          <description>Filter bits</description>
          <bitOffset>6</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB7</name>
          <description>Filter bits</description>
          <bitOffset>7</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB8</name>
          <description>Filter bits</description>
          <bitOffset>8</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB9</name>
          <description>Filter bits</description>
          <bitOffset>9</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB10</name>
          <description>Filter bits</description>
          <bitOffset>10</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB11</name>
          <description>Filter bits</description>
          <bitOffset>11</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB12</name>
          <description>Filter bits</description>
          <bitOffset>12</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB13</name>
          <description>Filter bits</description>
          <bitOffset>13</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB14</name>
          <description>Filter bits</description>
          <bitOffset>14</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB15</name>
          <description>Filter bits</description>
          <bitOffset>15</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB16</name>
          <description>Filter bits</description>
          <bitOffset>16</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB17</name>
          <description>Filter bits</description>
          <bitOffset>17</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB18</name>
          <description>Filter bits</description>
          <bitOffset>18</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB19</name>
          <description>Filter bits</description>
          <bitOffset>19</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB20</name>
          <description>Filter bits</description>
          <bitOffset>20</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB21</name>
          <description>Filter bits</description>
          <bitOffset>21</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB22</name>
          <description>Filter bits</description>
          <bitOffset>22</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB23</name>
          <description>Filter bits</description>
          <bitOffset>23</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB24</name>
          <description>Filter bits</description>
          <bitOffset>24</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB25</name>
          <description>Filter bits</description>
          <bitOffset>25</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB26</name>
          <description>Filter bits</description>
          <bitOffset>26</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB27</name>
          <description>Filter bits</description>
          <bitOffset>27</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB28</name>
          <description>Filter bits</description>
          <bitOffset>28</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB29</name>
          <description>Filter bits</description>
          <bitOffset>29</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB30</name>
          <description>Filter bits</description>
          <bitOffset>30</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB31</name>
          <description>Filter bits</description>
          <bitOffset>31</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
      </fields>
    </register>
    <register>
      <name>F7R1</name>
      <displayName>F7R1</displayName>
      <description>Filter bank 7 register 1</description>
      <addressOffset>0x278</addressOffset>
      <size>0x20</size>
      <access>read-write</access>
      <resetValue>0x00000000</resetValue>
      <fields>
        <field>
          <name>FB0</name>
          <description>Filter bits</description>
          <bitOffset>0</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB1</name>
          <description>Filter bits</description>
          <bitOffset>1</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB2</name>
          <description>Filter bits</description>
          <bitOffset>2</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB3</name>
          <description>Filter bits</description>
          <bitOffset>3</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB4</name>
          <description>Filter bits</description>
          <bitOffset>4</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB5</name>
          <description>Filter bits</description>
          <bitOffset>5</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB6</name>
          <description>Filter bits</description>
          <bitOffset>6</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB7</name>
          <description>Filter bits</description>
          <bitOffset>7</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB8</name>
          <description>Filter bits</description>
          <bitOffset>8</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB9</name>
          <description>Filter bits</description>
          <bitOffset>9</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB10</name>
          <description>Filter bits</description>
          <bitOffset>10</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB11</name>
          <description>Filter bits</description>
          <bitOffset>11</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB12</name>
          <description>Filter bits</description>
          <bitOffset>12</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB13</name>
          <description>Filter bits</description>
          <bitOffset>13</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB14</name>
          <description>Filter bits</description>
          <bitOffset>14</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB15</name>
          <description>Filter bits</description>
          <bitOffset>15</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB16</name>
          <description>Filter bits</description>
          <bitOffset>16</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB17</name>
          <description>Filter bits</description>
          <bitOffset>17</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB18</name>
          <description>Filter bits</description>
          <bitOffset>18</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB19</name>
          <description>Filter bits</description>
          <bitOffset>19</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB20</name>
          <description>Filter bits</description>
          <bitOffset>20</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB21</name>
          <description>Filter bits</description>
          <bitOffset>21</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB22</name>
          <description>Filter bits</description>
          <bitOffset>22</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB23</name>
          <description>Filter bits</description>
          <bitOffset>23</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB24</name>
          <description>Filter bits</description>
          <bitOffset>24</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB25</name>
          <description>Filter bits</description>
          <bitOffset>25</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB26</name>
          <description>Filter bits</description>
          <bitOffset>26</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB27</name>
          <description>Filter bits</description>
          <bitOffset>27</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB28</name>
          <description>Filter bits</description>
          <bitOffset>28</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB29</name>
          <description>Filter bits</description>
          <bitOffset>29</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB30</name>
          <description>Filter bits</description>
          <bitOffset>30</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB31</name>
          <description>Filter bits</description>
          <bitOffset>31</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
      </fields>
    </register>
    <register>
      <name>F7R2</name>
      <displayName>F7R2</displayName>
      <description>Filter bank 7 register 2</description>
      <addressOffset>0x27C</addressOffset>
      <size>0x20</size>
      <access>read-write</access>
      <resetValue>0x00000000</resetValue>
      <fields>
        <field>
          <name>FB0</name>
          <description>Filter bits</description>
          <bitOffset>0</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB1</name>
          <description>Filter bits</description>
          <bitOffset>1</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB2</name>
          <description>Filter bits</description>
          <bitOffset>2</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB3</name>
          <description>Filter bits</description>
          <bitOffset>3</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB4</name>
          <description>Filter bits</description>
          <bitOffset>4</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB5</name>
          <description>Filter bits</description>
          <bitOffset>5</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB6</name>
          <description>Filter bits</description>
          <bitOffset>6</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB7</name>
          <description>Filter bits</description>
          <bitOffset>7</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB8</name>
          <description>Filter bits</description>
          <bitOffset>8</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB9</name>
          <description>Filter bits</description>
          <bitOffset>9</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB10</name>
          <description>Filter bits</description>
          <bitOffset>10</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB11</name>
          <description>Filter bits</description>
          <bitOffset>11</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB12</name>
          <description>Filter bits</description>
          <bitOffset>12</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB13</name>
          <description>Filter bits</description>
          <bitOffset>13</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB14</name>
          <description>Filter bits</description>
          <bitOffset>14</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB15</name>
          <description>Filter bits</description>
          <bitOffset>15</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB16</name>
          <description>Filter bits</description>
          <bitOffset>16</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB17</name>
          <description>Filter bits</description>
          <bitOffset>17</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB18</name>
          <description>Filter bits</description>
          <bitOffset>18</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB19</name>
          <description>Filter bits</description>
          <bitOffset>19</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB20</name>
          <description>Filter bits</description>
          <bitOffset>20</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB21</name>
          <description>Filter bits</description>
          <bitOffset>21</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB22</name>
          <description>Filter bits</description>
          <bitOffset>22</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB23</name>
          <description>Filter bits</description>
          <bitOffset>23</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB24</name>
          <description>Filter bits</description>
          <bitOffset>24</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB25</name>
          <description>Filter bits</description>
          <bitOffset>25</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB26</name>
          <description>Filter bits</description>
          <bitOffset>26</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB27</name>
          <description>Filter bits</description>
          <bitOffset>27</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB28</name>
          <description>Filter bits</description>
          <bitOffset>28</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB29</name>
          <description>Filter bits</description>
          <bitOffset>29</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB30</name>
          <description>Filter bits</description>
          <bitOffset>30</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB31</name>
          <description>Filter bits</description>
          <bitOffset>31</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
      </fields>
    </register>
    <register>
      <name>F8R1</name>
      <displayName>F8R1</displayName>
      <description>Filter bank 8 register 1</description>
      <addressOffset>0x280</addressOffset>
      <size>0x20</size>
      <access>read-write</access>
      <resetValue>0x00000000</resetValue>
      <fields>
        <field>
          <name>FB0</name>
          <description>Filter bits</description>
          <bitOffset>0</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB1</name>
          <description>Filter bits</description>
          <bitOffset>1</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB2</name>
          <description>Filter bits</description>
          <bitOffset>2</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB3</name>
          <description>Filter bits</description>
          <bitOffset>3</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB4</name>
          <description>Filter bits</description>
          <bitOffset>4</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB5</name>
          <description>Filter bits</description>
          <bitOffset>5</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB6</name>
          <description>Filter bits</description>
          <bitOffset>6</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB7</name>
          <description>Filter bits</description>
          <bitOffset>7</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB8</name>
          <description>Filter bits</description>
          <bitOffset>8</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB9</name>
          <description>Filter bits</description>
          <bitOffset>9</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB10</name>
          <description>Filter bits</description>
          <bitOffset>10</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB11</name>
          <description>Filter bits</description>
          <bitOffset>11</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB12</name>
          <description>Filter bits</description>
          <bitOffset>12</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB13</name>
          <description>Filter bits</description>
          <bitOffset>13</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB14</name>
          <description>Filter bits</description>
          <bitOffset>14</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB15</name>
          <description>Filter bits</description>
          <bitOffset>15</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB16</name>
          <description>Filter bits</description>
          <bitOffset>16</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB17</name>
          <description>Filter bits</description>
          <bitOffset>17</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB18</name>
          <description>Filter bits</description>
          <bitOffset>18</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB19</name>
          <description>Filter bits</description>
          <bitOffset>19</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB20</name>
          <description>Filter bits</description>
          <bitOffset>20</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB21</name>
          <description>Filter bits</description>
          <bitOffset>21</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB22</name>
          <description>Filter bits</description>
          <bitOffset>22</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB23</name>
          <description>Filter bits</description>
          <bitOffset>23</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB24</name>
          <description>Filter bits</description>
          <bitOffset>24</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB25</name>
          <description>Filter bits</description>
          <bitOffset>25</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB26</name>
          <description>Filter bits</description>
          <bitOffset>26</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB27</name>
          <description>Filter bits</description>
          <bitOffset>27</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB28</name>
          <description>Filter bits</description>
          <bitOffset>28</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB29</name>
          <description>Filter bits</description>
          <bitOffset>29</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB30</name>
          <description>Filter bits</description>
          <bitOffset>30</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB31</name>
          <description>Filter bits</description>
          <bitOffset>31</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
      </fields>
    </register>
    <register>
      <name>F8R2</name>
      <displayName>F8R2</displayName>
      <description>Filter bank 8 register 2</description>
      <addressOffset>0x284</addressOffset>
      <size>0x20</size>
      <access>read-write</access>
      <resetValue>0x00000000</resetValue>
      <fields>
        <field>
          <name>FB0</name>
          <description>Filter bits</description>
          <bitOffset>0</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB1</name>
          <description>Filter bits</description>
          <bitOffset>1</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB2</name>
          <description>Filter bits</description>
          <bitOffset>2</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB3</name>
          <description>Filter bits</description>
          <bitOffset>3</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB4</name>
          <description>Filter bits</description>
          <bitOffset>4</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB5</name>
          <description>Filter bits</description>
          <bitOffset>5</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB6</name>
          <description>Filter bits</description>
          <bitOffset>6</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB7</name>
          <description>Filter bits</description>
          <bitOffset>7</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB8</name>
          <description>Filter bits</description>
          <bitOffset>8</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB9</name>
          <description>Filter bits</description>
          <bitOffset>9</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB10</name>
          <description>Filter bits</description>
          <bitOffset>10</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB11</name>
          <description>Filter bits</description>
          <bitOffset>11</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB12</name>
          <description>Filter bits</description>
          <bitOffset>12</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB13</name>
          <description>Filter bits</description>
          <bitOffset>13</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB14</name>
          <description>Filter bits</description>
          <bitOffset>14</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB15</name>
          <description>Filter bits</description>
          <bitOffset>15</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB16</name>
          <description>Filter bits</description>
          <bitOffset>16</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB17</name>
          <description>Filter bits</description>
          <bitOffset>17</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB18</name>
          <description>Filter bits</description>
          <bitOffset>18</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB19</name>
          <description>Filter bits</description>
          <bitOffset>19</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB20</name>
          <description>Filter bits</description>
          <bitOffset>20</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB21</name>
          <description>Filter bits</description>
          <bitOffset>21</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB22</name>
          <description>Filter bits</description>
          <bitOffset>22</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB23</name>
          <description>Filter bits</description>
          <bitOffset>23</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB24</name>
          <description>Filter bits</description>
          <bitOffset>24</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB25</name>
          <description>Filter bits</description>
          <bitOffset>25</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB26</name>
          <description>Filter bits</description>
          <bitOffset>26</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB27</name>
          <description>Filter bits</description>
          <bitOffset>27</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB28</name>
          <description>Filter bits</description>
          <bitOffset>28</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB29</name>
          <description>Filter bits</description>
          <bitOffset>29</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB30</name>
          <description>Filter bits</description>
          <bitOffset>30</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB31</name>
          <description>Filter bits</description>
          <bitOffset>31</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
      </fields>
    </register>
    <register>
      <name>F9R1</name>
      <displayName>F9R1</displayName>
      <description>Filter bank 9 register 1</description>
      <addressOffset>0x288</addressOffset>
      <size>0x20</size>
      <access>read-write</access>
      <resetValue>0x00000000</resetValue>
      <fields>
        <field>
          <name>FB0</name>
          <description>Filter bits</description>
          <bitOffset>0</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB1</name>
          <description>Filter bits</description>
          <bitOffset>1</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB2</name>
          <description>Filter bits</description>
          <bitOffset>2</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB3</name>
          <description>Filter bits</description>
          <bitOffset>3</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB4</name>
          <description>Filter bits</description>
          <bitOffset>4</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB5</name>
          <description>Filter bits</description>
          <bitOffset>5</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB6</name>
          <description>Filter bits</description>
          <bitOffset>6</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB7</name>
          <description>Filter bits</description>
          <bitOffset>7</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB8</name>
          <description>Filter bits</description>
          <bitOffset>8</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB9</name>
          <description>Filter bits</description>
          <bitOffset>9</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB10</name>
          <description>Filter bits</description>
          <bitOffset>10</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB11</name>
          <description>Filter bits</description>
          <bitOffset>11</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB12</name>
          <description>Filter bits</description>
          <bitOffset>12</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB13</name>
          <description>Filter bits</description>
          <bitOffset>13</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB14</name>
          <description>Filter bits</description>
          <bitOffset>14</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB15</name>
          <description>Filter bits</description>
          <bitOffset>15</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB16</name>
          <description>Filter bits</description>
          <bitOffset>16</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB17</name>
          <description>Filter bits</description>
          <bitOffset>17</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB18</name>
          <description>Filter bits</description>
          <bitOffset>18</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB19</name>
          <description>Filter bits</description>
          <bitOffset>19</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB20</name>
          <description>Filter bits</description>
          <bitOffset>20</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB21</name>
          <description>Filter bits</description>
          <bitOffset>21</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB22</name>
          <description>Filter bits</description>
          <bitOffset>22</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB23</name>
          <description>Filter bits</description>
          <bitOffset>23</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB24</name>
          <description>Filter bits</description>
          <bitOffset>24</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB25</name>
          <description>Filter bits</description>
          <bitOffset>25</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB26</name>
          <description>Filter bits</description>
          <bitOffset>26</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB27</name>
          <description>Filter bits</description>
          <bitOffset>27</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB28</name>
          <description>Filter bits</description>
          <bitOffset>28</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB29</name>
          <description>Filter bits</description>
          <bitOffset>29</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB30</name>
          <description>Filter bits</description>
          <bitOffset>30</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB31</name>
          <description>Filter bits</description>
          <bitOffset>31</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
      </fields>
    </register>
    <register>
      <name>F9R2</name>
      <displayName>F9R2</displayName>
      <description>Filter bank 9 register 2</description>
      <addressOffset>0x28C</addressOffset>
      <size>0x20</size>
      <access>read-write</access>
      <resetValue>0x00000000</resetValue>
      <fields>
        <field>
          <name>FB0</name>
          <description>Filter bits</description>
          <bitOffset>0</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB1</name>
          <description>Filter bits</description>
          <bitOffset>1</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB2</name>
          <description>Filter bits</description>
          <bitOffset>2</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB3</name>
          <description>Filter bits</description>
          <bitOffset>3</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB4</name>
          <description>Filter bits</description>
          <bitOffset>4</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB5</name>
          <description>Filter bits</description>
          <bitOffset>5</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB6</name>
          <description>Filter bits</description>
          <bitOffset>6</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB7</name>
          <description>Filter bits</description>
          <bitOffset>7</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB8</name>
          <description>Filter bits</description>
          <bitOffset>8</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB9</name>
          <description>Filter bits</description>
          <bitOffset>9</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB10</name>
          <description>Filter bits</description>
          <bitOffset>10</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB11</name>
          <description>Filter bits</description>
          <bitOffset>11</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB12</name>
          <description>Filter bits</description>
          <bitOffset>12</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB13</name>
          <description>Filter bits</description>
          <bitOffset>13</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB14</name>
          <description>Filter bits</description>
          <bitOffset>14</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB15</name>
          <description>Filter bits</description>
          <bitOffset>15</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB16</name>
          <description>Filter bits</description>
          <bitOffset>16</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB17</name>
          <description>Filter bits</description>
          <bitOffset>17</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB18</name>
          <description>Filter bits</description>
          <bitOffset>18</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB19</name>
          <description>Filter bits</description>
          <bitOffset>19</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB20</name>
          <description>Filter bits</description>
          <bitOffset>20</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB21</name>
          <description>Filter bits</description>
          <bitOffset>21</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB22</name>
          <description>Filter bits</description>
          <bitOffset>22</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB23</name>
          <description>Filter bits</description>
          <bitOffset>23</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB24</name>
          <description>Filter bits</description>
          <bitOffset>24</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB25</name>
          <description>Filter bits</description>
          <bitOffset>25</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB26</name>
          <description>Filter bits</description>
          <bitOffset>26</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB27</name>
          <description>Filter bits</description>
          <bitOffset>27</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB28</name>
          <description>Filter bits</description>
          <bitOffset>28</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB29</name>
          <description>Filter bits</description>
          <bitOffset>29</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB30</name>
          <description>Filter bits</description>
          <bitOffset>30</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB31</name>
          <description>Filter bits</description>
          <bitOffset>31</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
      </fields>
    </register>
    <register>
      <name>F10R1</name>
      <displayName>F10R1</displayName>
      <description>Filter bank 10 register 1</description>
      <addressOffset>0x290</addressOffset>
      <size>0x20</size>
      <access>read-write</access>
      <resetValue>0x00000000</resetValue>
      <fields>
        <field>
          <name>FB0</name>
          <description>Filter bits</description>
          <bitOffset>0</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB1</name>
          <description>Filter bits</description>
          <bitOffset>1</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB2</name>
          <description>Filter bits</description>
          <bitOffset>2</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB3</name>
          <description>Filter bits</description>
          <bitOffset>3</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB4</name>
          <description>Filter bits</description>
          <bitOffset>4</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB5</name>
          <description>Filter bits</description>
          <bitOffset>5</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB6</name>
          <description>Filter bits</description>
          <bitOffset>6</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB7</name>
          <description>Filter bits</description>
          <bitOffset>7</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB8</name>
          <description>Filter bits</description>
          <bitOffset>8</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB9</name>
          <description>Filter bits</description>
          <bitOffset>9</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB10</name>
          <description>Filter bits</description>
          <bitOffset>10</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB11</name>
          <description>Filter bits</description>
          <bitOffset>11</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB12</name>
          <description>Filter bits</description>
          <bitOffset>12</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB13</name>
          <description>Filter bits</description>
          <bitOffset>13</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB14</name>
          <description>Filter bits</description>
          <bitOffset>14</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB15</name>
          <description>Filter bits</description>
          <bitOffset>15</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB16</name>
          <description>Filter bits</description>
          <bitOffset>16</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB17</name>
          <description>Filter bits</description>
          <bitOffset>17</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB18</name>
          <description>Filter bits</description>
          <bitOffset>18</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB19</name>
          <description>Filter bits</description>
          <bitOffset>19</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB20</name>
          <description>Filter bits</description>
          <bitOffset>20</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB21</name>
          <description>Filter bits</description>
          <bitOffset>21</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB22</name>
          <description>Filter bits</description>
          <bitOffset>22</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB23</name>
          <description>Filter bits</description>
          <bitOffset>23</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB24</name>
          <description>Filter bits</description>
          <bitOffset>24</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB25</name>
          <description>Filter bits</description>
          <bitOffset>25</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB26</name>
          <description>Filter bits</description>
          <bitOffset>26</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB27</name>
          <description>Filter bits</description>
          <bitOffset>27</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB28</name>
          <description>Filter bits</description>
          <bitOffset>28</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB29</name>
          <description>Filter bits</description>
          <bitOffset>29</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB30</name>
          <description>Filter bits</description>
          <bitOffset>30</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB31</name>
          <description>Filter bits</description>
          <bitOffset>31</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
      </fields>
    </register>
    <register>
      <name>F10R2</name>
      <displayName>F10R2</displayName>
      <description>Filter bank 10 register 2</description>
      <addressOffset>0x294</addressOffset>
      <size>0x20</size>
      <access>read-write</access>
      <resetValue>0x00000000</resetValue>
      <fields>
        <field>
          <name>FB0</name>
          <description>Filter bits</description>
          <bitOffset>0</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB1</name>
          <description>Filter bits</description>
          <bitOffset>1</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB2</name>
          <description>Filter bits</description>
          <bitOffset>2</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB3</name>
          <description>Filter bits</description>
          <bitOffset>3</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB4</name>
          <description>Filter bits</description>
          <bitOffset>4</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB5</name>
          <description>Filter bits</description>
          <bitOffset>5</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB6</name>
          <description>Filter bits</description>
          <bitOffset>6</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB7</name>
          <description>Filter bits</description>
          <bitOffset>7</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB8</name>
          <description>Filter bits</description>
          <bitOffset>8</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB9</name>
          <description>Filter bits</description>
          <bitOffset>9</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB10</name>
          <description>Filter bits</description>
          <bitOffset>10</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB11</name>
          <description>Filter bits</description>
          <bitOffset>11</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB12</name>
          <description>Filter bits</description>
          <bitOffset>12</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB13</name>
          <description>Filter bits</description>
          <bitOffset>13</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB14</name>
          <description>Filter bits</description>
          <bitOffset>14</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB15</name>
          <description>Filter bits</description>
          <bitOffset>15</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB16</name>
          <description>Filter bits</description>
          <bitOffset>16</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB17</name>
          <description>Filter bits</description>
          <bitOffset>17</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB18</name>
          <description>Filter bits</description>
          <bitOffset>18</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB19</name>
          <description>Filter bits</description>
          <bitOffset>19</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB20</name>
          <description>Filter bits</description>
          <bitOffset>20</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB21</name>
          <description>Filter bits</description>
          <bitOffset>21</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB22</name>
          <description>Filter bits</description>
          <bitOffset>22</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB23</name>
          <description>Filter bits</description>
          <bitOffset>23</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB24</name>
          <description>Filter bits</description>
          <bitOffset>24</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB25</name>
          <description>Filter bits</description>
          <bitOffset>25</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB26</name>
          <description>Filter bits</description>
          <bitOffset>26</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB27</name>
          <description>Filter bits</description>
          <bitOffset>27</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB28</name>
          <description>Filter bits</description>
          <bitOffset>28</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB29</name>
          <description>Filter bits</description>
          <bitOffset>29</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB30</name>
          <description>Filter bits</description>
          <bitOffset>30</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB31</name>
          <description>Filter bits</description>
          <bitOffset>31</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
      </fields>
    </register>
    <register>
      <name>F11R1</name>
      <displayName>F11R1</displayName>
      <description>Filter bank 11 register 1</description>
      <addressOffset>0x298</addressOffset>
      <size>0x20</size>
      <access>read-write</access>
      <resetValue>0x00000000</resetValue>
      <fields>
        <field>
          <name>FB0</name>
          <description>Filter bits</description>
          <bitOffset>0</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB1</name>
          <description>Filter bits</description>
          <bitOffset>1</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB2</name>
          <description>Filter bits</description>
          <bitOffset>2</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB3</name>
          <description>Filter bits</description>
          <bitOffset>3</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB4</name>
          <description>Filter bits</description>
          <bitOffset>4</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB5</name>
          <description>Filter bits</description>
          <bitOffset>5</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB6</name>
          <description>Filter bits</description>
          <bitOffset>6</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB7</name>
          <description>Filter bits</description>
          <bitOffset>7</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB8</name>
          <description>Filter bits</description>
          <bitOffset>8</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB9</name>
          <description>Filter bits</description>
          <bitOffset>9</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB10</name>
          <description>Filter bits</description>
          <bitOffset>10</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB11</name>
          <description>Filter bits</description>
          <bitOffset>11</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB12</name>
          <description>Filter bits</description>
          <bitOffset>12</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB13</name>
          <description>Filter bits</description>
          <bitOffset>13</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB14</name>
          <description>Filter bits</description>
          <bitOffset>14</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB15</name>
          <description>Filter bits</description>
          <bitOffset>15</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB16</name>
          <description>Filter bits</description>
          <bitOffset>16</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB17</name>
          <description>Filter bits</description>
          <bitOffset>17</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB18</name>
          <description>Filter bits</description>
          <bitOffset>18</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB19</name>
          <description>Filter bits</description>
          <bitOffset>19</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB20</name>
          <description>Filter bits</description>
          <bitOffset>20</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB21</name>
          <description>Filter bits</description>
          <bitOffset>21</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB22</name>
          <description>Filter bits</description>
          <bitOffset>22</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB23</name>
          <description>Filter bits</description>
          <bitOffset>23</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB24</name>
          <description>Filter bits</description>
          <bitOffset>24</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB25</name>
          <description>Filter bits</description>
          <bitOffset>25</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB26</name>
          <description>Filter bits</description>
          <bitOffset>26</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB27</name>
          <description>Filter bits</description>
          <bitOffset>27</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB28</name>
          <description>Filter bits</description>
          <bitOffset>28</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB29</name>
          <description>Filter bits</description>
          <bitOffset>29</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB30</name>
          <description>Filter bits</description>
          <bitOffset>30</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB31</name>
          <description>Filter bits</description>
          <bitOffset>31</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
      </fields>
    </register>
    <register>
      <name>F11R2</name>
      <displayName>F11R2</displayName>
      <description>Filter bank 11 register 2</description>
      <addressOffset>0x29C</addressOffset>
      <size>0x20</size>
      <access>read-write</access>
      <resetValue>0x00000000</resetValue>
      <fields>
        <field>
          <name>FB0</name>
          <description>Filter bits</description>
          <bitOffset>0</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB1</name>
          <description>Filter bits</description>
          <bitOffset>1</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB2</name>
          <description>Filter bits</description>
          <bitOffset>2</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB3</name>
          <description>Filter bits</description>
          <bitOffset>3</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB4</name>
          <description>Filter bits</description>
          <bitOffset>4</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB5</name>
          <description>Filter bits</description>
          <bitOffset>5</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB6</name>
          <description>Filter bits</description>
          <bitOffset>6</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB7</name>
          <description>Filter bits</description>
          <bitOffset>7</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB8</name>
          <description>Filter bits</description>
          <bitOffset>8</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB9</name>
          <description>Filter bits</description>
          <bitOffset>9</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB10</name>
          <description>Filter bits</description>
          <bitOffset>10</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB11</name>
          <description>Filter bits</description>
          <bitOffset>11</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB12</name>
          <description>Filter bits</description>
          <bitOffset>12</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB13</name>
          <description>Filter bits</description>
          <bitOffset>13</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB14</name>
          <description>Filter bits</description>
          <bitOffset>14</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB15</name>
          <description>Filter bits</description>
          <bitOffset>15</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB16</name>
          <description>Filter bits</description>
          <bitOffset>16</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB17</name>
          <description>Filter bits</description>
          <bitOffset>17</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB18</name>
          <description>Filter bits</description>
          <bitOffset>18</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB19</name>
          <description>Filter bits</description>
          <bitOffset>19</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB20</name>
          <description>Filter bits</description>
          <bitOffset>20</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB21</name>
          <description>Filter bits</description>
          <bitOffset>21</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB22</name>
          <description>Filter bits</description>
          <bitOffset>22</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB23</name>
          <description>Filter bits</description>
          <bitOffset>23</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB24</name>
          <description>Filter bits</description>
          <bitOffset>24</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB25</name>
          <description>Filter bits</description>
          <bitOffset>25</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB26</name>
          <description>Filter bits</description>
          <bitOffset>26</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB27</name>
          <description>Filter bits</description>
          <bitOffset>27</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB28</name>
          <description>Filter bits</description>
          <bitOffset>28</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB29</name>
          <description>Filter bits</description>
          <bitOffset>29</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB30</name>
          <description>Filter bits</description>
          <bitOffset>30</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB31</name>
          <description>Filter bits</description>
          <bitOffset>31</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
      </fields>
    </register>
    <register>
      <name>F12R1</name>
      <displayName>F12R1</displayName>
      <description>Filter bank 4 register 1</description>
      <addressOffset>0x2A0</addressOffset>
      <size>0x20</size>
      <access>read-write</access>
      <resetValue>0x00000000</resetValue>
      <fields>
        <field>
          <name>FB0</name>
          <description>Filter bits</description>
          <bitOffset>0</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB1</name>
          <description>Filter bits</description>
          <bitOffset>1</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB2</name>
          <description>Filter bits</description>
          <bitOffset>2</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB3</name>
          <description>Filter bits</description>
          <bitOffset>3</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB4</name>
          <description>Filter bits</description>
          <bitOffset>4</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB5</name>
          <description>Filter bits</description>
          <bitOffset>5</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB6</name>
          <description>Filter bits</description>
          <bitOffset>6</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB7</name>
          <description>Filter bits</description>
          <bitOffset>7</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB8</name>
          <description>Filter bits</description>
          <bitOffset>8</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB9</name>
          <description>Filter bits</description>
          <bitOffset>9</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB10</name>
          <description>Filter bits</description>
          <bitOffset>10</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB11</name>
          <description>Filter bits</description>
          <bitOffset>11</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB12</name>
          <description>Filter bits</description>
          <bitOffset>12</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB13</name>
          <description>Filter bits</description>
          <bitOffset>13</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB14</name>
          <description>Filter bits</description>
          <bitOffset>14</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB15</name>
          <description>Filter bits</description>
          <bitOffset>15</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB16</name>
          <description>Filter bits</description>
          <bitOffset>16</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB17</name>
          <description>Filter bits</description>
          <bitOffset>17</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB18</name>
          <description>Filter bits</description>
          <bitOffset>18</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB19</name>
          <description>Filter bits</description>
          <bitOffset>19</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB20</name>
          <description>Filter bits</description>
          <bitOffset>20</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB21</name>
          <description>Filter bits</description>
          <bitOffset>21</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB22</name>
          <description>Filter bits</description>
          <bitOffset>22</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB23</name>
          <description>Filter bits</description>
          <bitOffset>23</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB24</name>
          <description>Filter bits</description>
          <bitOffset>24</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB25</name>
          <description>Filter bits</description>
          <bitOffset>25</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB26</name>
          <description>Filter bits</description>
          <bitOffset>26</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB27</name>
          <description>Filter bits</description>
          <bitOffset>27</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB28</name>
          <description>Filter bits</description>
          <bitOffset>28</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB29</name>
          <description>Filter bits</description>
          <bitOffset>29</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB30</name>
          <description>Filter bits</description>
          <bitOffset>30</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB31</name>
          <description>Filter bits</description>
          <bitOffset>31</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
      </fields>
    </register>
    <register>
      <name>F12R2</name>
      <displayName>F12R2</displayName>
      <description>Filter bank 12 register 2</description>
      <addressOffset>0x2A4</addressOffset>
      <size>0x20</size>
      <access>read-write</access>
      <resetValue>0x00000000</resetValue>
      <fields>
        <field>
          <name>FB0</name>
          <description>Filter bits</description>
          <bitOffset>0</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB1</name>
          <description>Filter bits</description>
          <bitOffset>1</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB2</name>
          <description>Filter bits</description>
          <bitOffset>2</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB3</name>
          <description>Filter bits</description>
          <bitOffset>3</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB4</name>
          <description>Filter bits</description>
          <bitOffset>4</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB5</name>
          <description>Filter bits</description>
          <bitOffset>5</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB6</name>
          <description>Filter bits</description>
          <bitOffset>6</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB7</name>
          <description>Filter bits</description>
          <bitOffset>7</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB8</name>
          <description>Filter bits</description>
          <bitOffset>8</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB9</name>
          <description>Filter bits</description>
          <bitOffset>9</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB10</name>
          <description>Filter bits</description>
          <bitOffset>10</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB11</name>
          <description>Filter bits</description>
          <bitOffset>11</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB12</name>
          <description>Filter bits</description>
          <bitOffset>12</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB13</name>
          <description>Filter bits</description>
          <bitOffset>13</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB14</name>
          <description>Filter bits</description>
          <bitOffset>14</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB15</name>
          <description>Filter bits</description>
          <bitOffset>15</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB16</name>
          <description>Filter bits</description>
          <bitOffset>16</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB17</name>
          <description>Filter bits</description>
          <bitOffset>17</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB18</name>
          <description>Filter bits</description>
          <bitOffset>18</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB19</name>
          <description>Filter bits</description>
          <bitOffset>19</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB20</name>
          <description>Filter bits</description>
          <bitOffset>20</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB21</name>
          <description>Filter bits</description>
          <bitOffset>21</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB22</name>
          <description>Filter bits</description>
          <bitOffset>22</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB23</name>
          <description>Filter bits</description>
          <bitOffset>23</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB24</name>
          <description>Filter bits</description>
          <bitOffset>24</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB25</name>
          <description>Filter bits</description>
          <bitOffset>25</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB26</name>
          <description>Filter bits</description>
          <bitOffset>26</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB27</name>
          <description>Filter bits</description>
          <bitOffset>27</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB28</name>
          <description>Filter bits</description>
          <bitOffset>28</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB29</name>
          <description>Filter bits</description>
          <bitOffset>29</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB30</name>
          <description>Filter bits</description>
          <bitOffset>30</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB31</name>
          <description>Filter bits</description>
          <bitOffset>31</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
      </fields>
    </register>
    <register>
      <name>F13R1</name>
      <displayName>F13R1</displayName>
      <description>Filter bank 13 register 1</description>
      <addressOffset>0x2A8</addressOffset>
      <size>0x20</size>
      <access>read-write</access>
      <resetValue>0x00000000</resetValue>
      <fields>
        <field>
          <name>FB0</name>
          <description>Filter bits</description>
          <bitOffset>0</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB1</name>
          <description>Filter bits</description>
          <bitOffset>1</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB2</name>
          <description>Filter bits</description>
          <bitOffset>2</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB3</name>
          <description>Filter bits</description>
          <bitOffset>3</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB4</name>
          <description>Filter bits</description>
          <bitOffset>4</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB5</name>
          <description>Filter bits</description>
          <bitOffset>5</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB6</name>
          <description>Filter bits</description>
          <bitOffset>6</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB7</name>
          <description>Filter bits</description>
          <bitOffset>7</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB8</name>
          <description>Filter bits</description>
          <bitOffset>8</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB9</name>
          <description>Filter bits</description>
          <bitOffset>9</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB10</name>
          <description>Filter bits</description>
          <bitOffset>10</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB11</name>
          <description>Filter bits</description>
          <bitOffset>11</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB12</name>
          <description>Filter bits</description>
          <bitOffset>12</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB13</name>
          <description>Filter bits</description>
          <bitOffset>13</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB14</name>
          <description>Filter bits</description>
          <bitOffset>14</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB15</name>
          <description>Filter bits</description>
          <bitOffset>15</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB16</name>
          <description>Filter bits</description>
          <bitOffset>16</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB17</name>
          <description>Filter bits</description>
          <bitOffset>17</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB18</name>
          <description>Filter bits</description>
          <bitOffset>18</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB19</name>
          <description>Filter bits</description>
          <bitOffset>19</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB20</name>
          <description>Filter bits</description>
          <bitOffset>20</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB21</name>
          <description>Filter bits</description>
          <bitOffset>21</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB22</name>
          <description>Filter bits</description>
          <bitOffset>22</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB23</name>
          <description>Filter bits</description>
          <bitOffset>23</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB24</name>
          <description>Filter bits</description>
          <bitOffset>24</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB25</name>
          <description>Filter bits</description>
          <bitOffset>25</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB26</name>
          <description>Filter bits</description>
          <bitOffset>26</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB27</name>
          <description>Filter bits</description>
          <bitOffset>27</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB28</name>
          <description>Filter bits</description>
          <bitOffset>28</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB29</name>
          <description>Filter bits</description>
          <bitOffset>29</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB30</name>
          <description>Filter bits</description>
          <bitOffset>30</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB31</name>
          <description>Filter bits</description>
          <bitOffset>31</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
      </fields>
    </register>
    <register>
      <name>F13R2</name>
      <displayName>F13R2</displayName>
      <description>Filter bank 13 register 2</description>
      <addressOffset>0x2AC</addressOffset>
      <size>0x20</size>
      <access>read-write</access>
      <resetValue>0x00000000</resetValue>
      <fields>
        <field>
          <name>FB0</name>
          <description>Filter bits</description>
          <bitOffset>0</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB1</name>
          <description>Filter bits</description>
          <bitOffset>1</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB2</name>
          <description>Filter bits</description>
          <bitOffset>2</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB3</name>
          <description>Filter bits</description>
          <bitOffset>3</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB4</name>
          <description>Filter bits</description>
          <bitOffset>4</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB5</name>
          <description>Filter bits</description>
          <bitOffset>5</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB6</name>
          <description>Filter bits</description>
          <bitOffset>6</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB7</name>
          <description>Filter bits</description>
          <bitOffset>7</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB8</name>
          <description>Filter bits</description>
          <bitOffset>8</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB9</name>
          <description>Filter bits</description>
          <bitOffset>9</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB10</name>
          <description>Filter bits</description>
          <bitOffset>10</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB11</name>
          <description>Filter bits</description>
          <bitOffset>11</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB12</name>
          <description>Filter bits</description>
          <bitOffset>12</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB13</name>
          <description>Filter bits</description>
          <bitOffset>13</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB14</name>
          <description>Filter bits</description>
          <bitOffset>14</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB15</name>
          <description>Filter bits</description>
          <bitOffset>15</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB16</name>
          <description>Filter bits</description>
          <bitOffset>16</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB17</name>
          <description>Filter bits</description>
          <bitOffset>17</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB18</name>
          <description>Filter bits</description>
          <bitOffset>18</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB19</name>
          <description>Filter bits</description>
          <bitOffset>19</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB20</name>
          <description>Filter bits</description>
          <bitOffset>20</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB21</name>
          <description>Filter bits</description>
          <bitOffset>21</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB22</name>
          <description>Filter bits</description>
          <bitOffset>22</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB23</name>
          <description>Filter bits</description>
          <bitOffset>23</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB24</name>
          <description>Filter bits</description>
          <bitOffset>24</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB25</name>
          <description>Filter bits</description>
          <bitOffset>25</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB26</name>
          <description>Filter bits</description>
          <bitOffset>26</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB27</name>
          <description>Filter bits</description>
          <bitOffset>27</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB28</name>
          <description>Filter bits</description>
          <bitOffset>28</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB29</name>
          <description>Filter bits</description>
          <bitOffset>29</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB30</name>
          <description>Filter bits</description>
          <bitOffset>30</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB31</name>
          <description>Filter bits</description>
          <bitOffset>31</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
      </fields>
    </register>
    <register>
      <name>F14R1</name>
      <displayName>F14R1</displayName>
      <description>Filter bank 14 register 1</description>
      <addressOffset>0x2B0</addressOffset>
      <size>0x20</size>
      <access>read-write</access>
      <resetValue>0x00000000</resetValue>
      <fields>
        <field>
          <name>FB0</name>
          <description>Filter bits</description>
          <bitOffset>0</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB1</name>
          <description>Filter bits</description>
          <bitOffset>1</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB2</name>
          <description>Filter bits</description>
          <bitOffset>2</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB3</name>
          <description>Filter bits</description>
          <bitOffset>3</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB4</name>
          <description>Filter bits</description>
          <bitOffset>4</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB5</name>
          <description>Filter bits</description>
          <bitOffset>5</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB6</name>
          <description>Filter bits</description>
          <bitOffset>6</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB7</name>
          <description>Filter bits</description>
          <bitOffset>7</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB8</name>
          <description>Filter bits</description>
          <bitOffset>8</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB9</name>
          <description>Filter bits</description>
          <bitOffset>9</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB10</name>
          <description>Filter bits</description>
          <bitOffset>10</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB11</name>
          <description>Filter bits</description>
          <bitOffset>11</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB12</name>
          <description>Filter bits</description>
          <bitOffset>12</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB13</name>
          <description>Filter bits</description>
          <bitOffset>13</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB14</name>
          <description>Filter bits</description>
          <bitOffset>14</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB15</name>
          <description>Filter bits</description>
          <bitOffset>15</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB16</name>
          <description>Filter bits</description>
          <bitOffset>16</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB17</name>
          <description>Filter bits</description>
          <bitOffset>17</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB18</name>
          <description>Filter bits</description>
          <bitOffset>18</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB19</name>
          <description>Filter bits</description>
          <bitOffset>19</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB20</name>
          <description>Filter bits</description>
          <bitOffset>20</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB21</name>
          <description>Filter bits</description>
          <bitOffset>21</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB22</name>
          <description>Filter bits</description>
          <bitOffset>22</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB23</name>
          <description>Filter bits</description>
          <bitOffset>23</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB24</name>
          <description>Filter bits</description>
          <bitOffset>24</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB25</name>
          <description>Filter bits</description>
          <bitOffset>25</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB26</name>
          <description>Filter bits</description>
          <bitOffset>26</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB27</name>
          <description>Filter bits</description>
          <bitOffset>27</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB28</name>
          <description>Filter bits</description>
          <bitOffset>28</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB29</name>
          <description>Filter bits</description>
          <bitOffset>29</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB30</name>
          <description>Filter bits</description>
          <bitOffset>30</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB31</name>
          <description>Filter bits</description>
          <bitOffset>31</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
      </fields>
    </register>
    <register>
      <name>F14R2</name>
      <displayName>F14R2</displayName>
      <description>Filter bank 14 register 2</description>
      <addressOffset>0x2B4</addressOffset>
      <size>0x20</size>
      <access>read-write</access>
      <resetValue>0x00000000</resetValue>
      <fields>
        <field>
          <name>FB0</name>
          <description>Filter bits</description>
          <bitOffset>0</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB1</name>
          <description>Filter bits</description>
          <bitOffset>1</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB2</name>
          <description>Filter bits</description>
          <bitOffset>2</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB3</name>
          <description>Filter bits</description>
          <bitOffset>3</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB4</name>
          <description>Filter bits</description>
          <bitOffset>4</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB5</name>
          <description>Filter bits</description>
          <bitOffset>5</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB6</name>
          <description>Filter bits</description>
          <bitOffset>6</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB7</name>
          <description>Filter bits</description>
          <bitOffset>7</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB8</name>
          <description>Filter bits</description>
          <bitOffset>8</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB9</name>
          <description>Filter bits</description>
          <bitOffset>9</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB10</name>
          <description>Filter bits</description>
          <bitOffset>10</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB11</name>
          <description>Filter bits</description>
          <bitOffset>11</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB12</name>
          <description>Filter bits</description>
          <bitOffset>12</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB13</name>
          <description>Filter bits</description>
          <bitOffset>13</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB14</name>
          <description>Filter bits</description>
          <bitOffset>14</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB15</name>
          <description>Filter bits</description>
          <bitOffset>15</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB16</name>
          <description>Filter bits</description>
          <bitOffset>16</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB17</name>
          <description>Filter bits</description>
          <bitOffset>17</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB18</name>
          <description>Filter bits</description>
          <bitOffset>18</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB19</name>
          <description>Filter bits</description>
          <bitOffset>19</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB20</name>
          <description>Filter bits</description>
          <bitOffset>20</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB21</name>
          <description>Filter bits</description>
          <bitOffset>21</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB22</name>
          <description>Filter bits</description>
          <bitOffset>22</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB23</name>
          <description>Filter bits</description>
          <bitOffset>23</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB24</name>
          <description>Filter bits</description>
          <bitOffset>24</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB25</name>
          <description>Filter bits</description>
          <bitOffset>25</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB26</name>
          <description>Filter bits</description>
          <bitOffset>26</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB27</name>
          <description>Filter bits</description>
          <bitOffset>27</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB28</name>
          <description>Filter bits</description>
          <bitOffset>28</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB29</name>
          <description>Filter bits</description>
          <bitOffset>29</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB30</name>
          <description>Filter bits</description>
          <bitOffset>30</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB31</name>
          <description>Filter bits</description>
          <bitOffset>31</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
      </fields>
    </register>
    <register>
      <name>F15R1</name>
      <displayName>F15R1</displayName>
      <description>Filter bank 15 register 1</description>
      <addressOffset>0x2B8</addressOffset>
      <size>0x20</size>
      <access>read-write</access>
      <resetValue>0x00000000</resetValue>
      <fields>
        <field>
          <name>FB0</name>
          <description>Filter bits</description>
          <bitOffset>0</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB1</name>
          <description>Filter bits</description>
          <bitOffset>1</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB2</name>
          <description>Filter bits</description>
          <bitOffset>2</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB3</name>
          <description>Filter bits</description>
          <bitOffset>3</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB4</name>
          <description>Filter bits</description>
          <bitOffset>4</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB5</name>
          <description>Filter bits</description>
          <bitOffset>5</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB6</name>
          <description>Filter bits</description>
          <bitOffset>6</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB7</name>
          <description>Filter bits</description>
          <bitOffset>7</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB8</name>
          <description>Filter bits</description>
          <bitOffset>8</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB9</name>
          <description>Filter bits</description>
          <bitOffset>9</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB10</name>
          <description>Filter bits</description>
          <bitOffset>10</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB11</name>
          <description>Filter bits</description>
          <bitOffset>11</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB12</name>
          <description>Filter bits</description>
          <bitOffset>12</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB13</name>
          <description>Filter bits</description>
          <bitOffset>13</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB14</name>
          <description>Filter bits</description>
          <bitOffset>14</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB15</name>
          <description>Filter bits</description>
          <bitOffset>15</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB16</name>
          <description>Filter bits</description>
          <bitOffset>16</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB17</name>
          <description>Filter bits</description>
          <bitOffset>17</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB18</name>
          <description>Filter bits</description>
          <bitOffset>18</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB19</name>
          <description>Filter bits</description>
          <bitOffset>19</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB20</name>
          <description>Filter bits</description>
          <bitOffset>20</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB21</name>
          <description>Filter bits</description>
          <bitOffset>21</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB22</name>
          <description>Filter bits</description>
          <bitOffset>22</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB23</name>
          <description>Filter bits</description>
          <bitOffset>23</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB24</name>
          <description>Filter bits</description>
          <bitOffset>24</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB25</name>
          <description>Filter bits</description>
          <bitOffset>25</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB26</name>
          <description>Filter bits</description>
          <bitOffset>26</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB27</name>
          <description>Filter bits</description>
          <bitOffset>27</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB28</name>
          <description>Filter bits</description>
          <bitOffset>28</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB29</name>
          <description>Filter bits</description>
          <bitOffset>29</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB30</name>
          <description>Filter bits</description>
          <bitOffset>30</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB31</name>
          <description>Filter bits</description>
          <bitOffset>31</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
      </fields>
    </register>
    <register>
      <name>F15R2</name>
      <displayName>F15R2</displayName>
      <description>Filter bank 15 register 2</description>
      <addressOffset>0x2BC</addressOffset>
      <size>0x20</size>
      <access>read-write</access>
      <resetValue>0x00000000</resetValue>
      <fields>
        <field>
          <name>FB0</name>
          <description>Filter bits</description>
          <bitOffset>0</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB1</name>
          <description>Filter bits</description>
          <bitOffset>1</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB2</name>
          <description>Filter bits</description>
          <bitOffset>2</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB3</name>
          <description>Filter bits</description>
          <bitOffset>3</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB4</name>
          <description>Filter bits</description>
          <bitOffset>4</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB5</name>
          <description>Filter bits</description>
          <bitOffset>5</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB6</name>
          <description>Filter bits</description>
          <bitOffset>6</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB7</name>
          <description>Filter bits</description>
          <bitOffset>7</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB8</name>
          <description>Filter bits</description>
          <bitOffset>8</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB9</name>
          <description>Filter bits</description>
          <bitOffset>9</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB10</name>
          <description>Filter bits</description>
          <bitOffset>10</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB11</name>
          <description>Filter bits</description>
          <bitOffset>11</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB12</name>
          <description>Filter bits</description>
          <bitOffset>12</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB13</name>
          <description>Filter bits</description>
          <bitOffset>13</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB14</name>
          <description>Filter bits</description>
          <bitOffset>14</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB15</name>
          <description>Filter bits</description>
          <bitOffset>15</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB16</name>
          <description>Filter bits</description>
          <bitOffset>16</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB17</name>
          <description>Filter bits</description>
          <bitOffset>17</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB18</name>
          <description>Filter bits</description>
          <bitOffset>18</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB19</name>
          <description>Filter bits</description>
          <bitOffset>19</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB20</name>
          <description>Filter bits</description>
          <bitOffset>20</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB21</name>
          <description>Filter bits</description>
          <bitOffset>21</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB22</name>
          <description>Filter bits</description>
          <bitOffset>22</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB23</name>
          <description>Filter bits</description>
          <bitOffset>23</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB24</name>
          <description>Filter bits</description>
          <bitOffset>24</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB25</name>
          <description>Filter bits</description>
          <bitOffset>25</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB26</name>
          <description>Filter bits</description>
          <bitOffset>26</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB27</name>
          <description>Filter bits</description>
          <bitOffset>27</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB28</name>
          <description>Filter bits</description>
          <bitOffset>28</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB29</name>
          <description>Filter bits</description>
          <bitOffset>29</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB30</name>
          <description>Filter bits</description>
          <bitOffset>30</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB31</name>
          <description>Filter bits</description>
          <bitOffset>31</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
      </fields>
    </register>
    <register>
      <name>F16R1</name>
      <displayName>F16R1</displayName>
      <description>Filter bank 16 register 1</description>
      <addressOffset>0x2C0</addressOffset>
      <size>0x20</size>
      <access>read-write</access>
      <resetValue>0x00000000</resetValue>
      <fields>
        <field>
          <name>FB0</name>
          <description>Filter bits</description>
          <bitOffset>0</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB1</name>
          <description>Filter bits</description>
          <bitOffset>1</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB2</name>
          <description>Filter bits</description>
          <bitOffset>2</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB3</name>
          <description>Filter bits</description>
          <bitOffset>3</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB4</name>
          <description>Filter bits</description>
          <bitOffset>4</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB5</name>
          <description>Filter bits</description>
          <bitOffset>5</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB6</name>
          <description>Filter bits</description>
          <bitOffset>6</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB7</name>
          <description>Filter bits</description>
          <bitOffset>7</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB8</name>
          <description>Filter bits</description>
          <bitOffset>8</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB9</name>
          <description>Filter bits</description>
          <bitOffset>9</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB10</name>
          <description>Filter bits</description>
          <bitOffset>10</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB11</name>
          <description>Filter bits</description>
          <bitOffset>11</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB12</name>
          <description>Filter bits</description>
          <bitOffset>12</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB13</name>
          <description>Filter bits</description>
          <bitOffset>13</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB14</name>
          <description>Filter bits</description>
          <bitOffset>14</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB15</name>
          <description>Filter bits</description>
          <bitOffset>15</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB16</name>
          <description>Filter bits</description>
          <bitOffset>16</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB17</name>
          <description>Filter bits</description>
          <bitOffset>17</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB18</name>
          <description>Filter bits</description>
          <bitOffset>18</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB19</name>
          <description>Filter bits</description>
          <bitOffset>19</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB20</name>
          <description>Filter bits</description>
          <bitOffset>20</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB21</name>
          <description>Filter bits</description>
          <bitOffset>21</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB22</name>
          <description>Filter bits</description>
          <bitOffset>22</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB23</name>
          <description>Filter bits</description>
          <bitOffset>23</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB24</name>
          <description>Filter bits</description>
          <bitOffset>24</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB25</name>
          <description>Filter bits</description>
          <bitOffset>25</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB26</name>
          <description>Filter bits</description>
          <bitOffset>26</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB27</name>
          <description>Filter bits</description>
          <bitOffset>27</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB28</name>
          <description>Filter bits</description>
          <bitOffset>28</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB29</name>
          <description>Filter bits</description>
          <bitOffset>29</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB30</name>
          <description>Filter bits</description>
          <bitOffset>30</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB31</name>
          <description>Filter bits</description>
          <bitOffset>31</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
      </fields>
    </register>
    <register>
      <name>F16R2</name>
      <displayName>F16R2</displayName>
      <description>Filter bank 16 register 2</description>
      <addressOffset>0x2C4</addressOffset>
      <size>0x20</size>
      <access>read-write</access>
      <resetValue>0x00000000</resetValue>
      <fields>
        <field>
          <name>FB0</name>
          <description>Filter bits</description>
          <bitOffset>0</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB1</name>
          <description>Filter bits</description>
          <bitOffset>1</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB2</name>
          <description>Filter bits</description>
          <bitOffset>2</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB3</name>
          <description>Filter bits</description>
          <bitOffset>3</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB4</name>
          <description>Filter bits</description>
          <bitOffset>4</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB5</name>
          <description>Filter bits</description>
          <bitOffset>5</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB6</name>
          <description>Filter bits</description>
          <bitOffset>6</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB7</name>
          <description>Filter bits</description>
          <bitOffset>7</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB8</name>
          <description>Filter bits</description>
          <bitOffset>8</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB9</name>
          <description>Filter bits</description>
          <bitOffset>9</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB10</name>
          <description>Filter bits</description>
          <bitOffset>10</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB11</name>
          <description>Filter bits</description>
          <bitOffset>11</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB12</name>
          <description>Filter bits</description>
          <bitOffset>12</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB13</name>
          <description>Filter bits</description>
          <bitOffset>13</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB14</name>
          <description>Filter bits</description>
          <bitOffset>14</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB15</name>
          <description>Filter bits</description>
          <bitOffset>15</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB16</name>
          <description>Filter bits</description>
          <bitOffset>16</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB17</name>
          <description>Filter bits</description>
          <bitOffset>17</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB18</name>
          <description>Filter bits</description>
          <bitOffset>18</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB19</name>
          <description>Filter bits</description>
          <bitOffset>19</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB20</name>
          <description>Filter bits</description>
          <bitOffset>20</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB21</name>
          <description>Filter bits</description>
          <bitOffset>21</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB22</name>
          <description>Filter bits</description>
          <bitOffset>22</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB23</name>
          <description>Filter bits</description>
          <bitOffset>23</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB24</name>
          <description>Filter bits</description>
          <bitOffset>24</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB25</name>
          <description>Filter bits</description>
          <bitOffset>25</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB26</name>
          <description>Filter bits</description>
          <bitOffset>26</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB27</name>
          <description>Filter bits</description>
          <bitOffset>27</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB28</name>
          <description>Filter bits</description>
          <bitOffset>28</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB29</name>
          <description>Filter bits</description>
          <bitOffset>29</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB30</name>
          <description>Filter bits</description>
          <bitOffset>30</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB31</name>
          <description>Filter bits</description>
          <bitOffset>31</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
      </fields>
    </register>
    <register>
      <name>F17R1</name>
      <displayName>F17R1</displayName>
      <description>Filter bank 17 register 1</description>
      <addressOffset>0x2C8</addressOffset>
      <size>0x20</size>
      <access>read-write</access>
      <resetValue>0x00000000</resetValue>
      <fields>
        <field>
          <name>FB0</name>
          <description>Filter bits</description>
          <bitOffset>0</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB1</name>
          <description>Filter bits</description>
          <bitOffset>1</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB2</name>
          <description>Filter bits</description>
          <bitOffset>2</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB3</name>
          <description>Filter bits</description>
          <bitOffset>3</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB4</name>
          <description>Filter bits</description>
          <bitOffset>4</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB5</name>
          <description>Filter bits</description>
          <bitOffset>5</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB6</name>
          <description>Filter bits</description>
          <bitOffset>6</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB7</name>
          <description>Filter bits</description>
          <bitOffset>7</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB8</name>
          <description>Filter bits</description>
          <bitOffset>8</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB9</name>
          <description>Filter bits</description>
          <bitOffset>9</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB10</name>
          <description>Filter bits</description>
          <bitOffset>10</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB11</name>
          <description>Filter bits</description>
          <bitOffset>11</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB12</name>
          <description>Filter bits</description>
          <bitOffset>12</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB13</name>
          <description>Filter bits</description>
          <bitOffset>13</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB14</name>
          <description>Filter bits</description>
          <bitOffset>14</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB15</name>
          <description>Filter bits</description>
          <bitOffset>15</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB16</name>
          <description>Filter bits</description>
          <bitOffset>16</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB17</name>
          <description>Filter bits</description>
          <bitOffset>17</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB18</name>
          <description>Filter bits</description>
          <bitOffset>18</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB19</name>
          <description>Filter bits</description>
          <bitOffset>19</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB20</name>
          <description>Filter bits</description>
          <bitOffset>20</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB21</name>
          <description>Filter bits</description>
          <bitOffset>21</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB22</name>
          <description>Filter bits</description>
          <bitOffset>22</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB23</name>
          <description>Filter bits</description>
          <bitOffset>23</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB24</name>
          <description>Filter bits</description>
          <bitOffset>24</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB25</name>
          <description>Filter bits</description>
          <bitOffset>25</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB26</name>
          <description>Filter bits</description>
          <bitOffset>26</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB27</name>
          <description>Filter bits</description>
          <bitOffset>27</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB28</name>
          <description>Filter bits</description>
          <bitOffset>28</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB29</name>
          <description>Filter bits</description>
          <bitOffset>29</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB30</name>
          <description>Filter bits</description>
          <bitOffset>30</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB31</name>
          <description>Filter bits</description>
          <bitOffset>31</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
      </fields>
    </register>
    <register>
      <name>F17R2</name>
      <displayName>F17R2</displayName>
      <description>Filter bank 17 register 2</description>
      <addressOffset>0x2CC</addressOffset>
      <size>0x20</size>
      <access>read-write</access>
      <resetValue>0x00000000</resetValue>
      <fields>
        <field>
          <name>FB0</name>
          <description>Filter bits</description>
          <bitOffset>0</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB1</name>
          <description>Filter bits</description>
          <bitOffset>1</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB2</name>
          <description>Filter bits</description>
          <bitOffset>2</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB3</name>
          <description>Filter bits</description>
          <bitOffset>3</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB4</name>
          <description>Filter bits</description>
          <bitOffset>4</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB5</name>
          <description>Filter bits</description>
          <bitOffset>5</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB6</name>
          <description>Filter bits</description>
          <bitOffset>6</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB7</name>
          <description>Filter bits</description>
          <bitOffset>7</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB8</name>
          <description>Filter bits</description>
          <bitOffset>8</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB9</name>
          <description>Filter bits</description>
          <bitOffset>9</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB10</name>
          <description>Filter bits</description>
          <bitOffset>10</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB11</name>
          <description>Filter bits</description>
          <bitOffset>11</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB12</name>
          <description>Filter bits</description>
          <bitOffset>12</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB13</name>
          <description>Filter bits</description>
          <bitOffset>13</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB14</name>
          <description>Filter bits</description>
          <bitOffset>14</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB15</name>
          <description>Filter bits</description>
          <bitOffset>15</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB16</name>
          <description>Filter bits</description>
          <bitOffset>16</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB17</name>
          <description>Filter bits</description>
          <bitOffset>17</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB18</name>
          <description>Filter bits</description>
          <bitOffset>18</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB19</name>
          <description>Filter bits</description>
          <bitOffset>19</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB20</name>
          <description>Filter bits</description>
          <bitOffset>20</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB21</name>
          <description>Filter bits</description>
          <bitOffset>21</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB22</name>
          <description>Filter bits</description>
          <bitOffset>22</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB23</name>
          <description>Filter bits</description>
          <bitOffset>23</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB24</name>
          <description>Filter bits</description>
          <bitOffset>24</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB25</name>
          <description>Filter bits</description>
          <bitOffset>25</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB26</name>
          <description>Filter bits</description>
          <bitOffset>26</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB27</name>
          <description>Filter bits</description>
          <bitOffset>27</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB28</name>
          <description>Filter bits</description>
          <bitOffset>28</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB29</name>
          <description>Filter bits</description>
          <bitOffset>29</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB30</name>
          <description>Filter bits</description>
          <bitOffset>30</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB31</name>
          <description>Filter bits</description>
          <bitOffset>31</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
      </fields>
    </register>
    <register>
      <name>F18R1</name>
      <displayName>F18R1</displayName>
      <description>Filter bank 18 register 1</description>
      <addressOffset>0x2D0</addressOffset>
      <size>0x20</size>
      <access>read-write</access>
      <resetValue>0x00000000</resetValue>
      <fields>
        <field>
          <name>FB0</name>
          <description>Filter bits</description>
          <bitOffset>0</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB1</name>
          <description>Filter bits</description>
          <bitOffset>1</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB2</name>
          <description>Filter bits</description>
          <bitOffset>2</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB3</name>
          <description>Filter bits</description>
          <bitOffset>3</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB4</name>
          <description>Filter bits</description>
          <bitOffset>4</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB5</name>
          <description>Filter bits</description>
          <bitOffset>5</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB6</name>
          <description>Filter bits</description>
          <bitOffset>6</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB7</name>
          <description>Filter bits</description>
          <bitOffset>7</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB8</name>
          <description>Filter bits</description>
          <bitOffset>8</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB9</name>
          <description>Filter bits</description>
          <bitOffset>9</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB10</name>
          <description>Filter bits</description>
          <bitOffset>10</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB11</name>
          <description>Filter bits</description>
          <bitOffset>11</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB12</name>
          <description>Filter bits</description>
          <bitOffset>12</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB13</name>
          <description>Filter bits</description>
          <bitOffset>13</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB14</name>
          <description>Filter bits</description>
          <bitOffset>14</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB15</name>
          <description>Filter bits</description>
          <bitOffset>15</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB16</name>
          <description>Filter bits</description>
          <bitOffset>16</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB17</name>
          <description>Filter bits</description>
          <bitOffset>17</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB18</name>
          <description>Filter bits</description>
          <bitOffset>18</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB19</name>
          <description>Filter bits</description>
          <bitOffset>19</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB20</name>
          <description>Filter bits</description>
          <bitOffset>20</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB21</name>
          <description>Filter bits</description>
          <bitOffset>21</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB22</name>
          <description>Filter bits</description>
          <bitOffset>22</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB23</name>
          <description>Filter bits</description>
          <bitOffset>23</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB24</name>
          <description>Filter bits</description>
          <bitOffset>24</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB25</name>
          <description>Filter bits</description>
          <bitOffset>25</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB26</name>
          <description>Filter bits</description>
          <bitOffset>26</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB27</name>
          <description>Filter bits</description>
          <bitOffset>27</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB28</name>
          <description>Filter bits</description>
          <bitOffset>28</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB29</name>
          <description>Filter bits</description>
          <bitOffset>29</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB30</name>
          <description>Filter bits</description>
          <bitOffset>30</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB31</name>
          <description>Filter bits</description>
          <bitOffset>31</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
      </fields>
    </register>
    <register>
      <name>F18R2</name>
      <displayName>F18R2</displayName>
      <description>Filter bank 18 register 2</description>
      <addressOffset>0x2D4</addressOffset>
      <size>0x20</size>
      <access>read-write</access>
      <resetValue>0x00000000</resetValue>
      <fields>
        <field>
          <name>FB0</name>
          <description>Filter bits</description>
          <bitOffset>0</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB1</name>
          <description>Filter bits</description>
          <bitOffset>1</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB2</name>
          <description>Filter bits</description>
          <bitOffset>2</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB3</name>
          <description>Filter bits</description>
          <bitOffset>3</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB4</name>
          <description>Filter bits</description>
          <bitOffset>4</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB5</name>
          <description>Filter bits</description>
          <bitOffset>5</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB6</name>
          <description>Filter bits</description>
          <bitOffset>6</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB7</name>
          <description>Filter bits</description>
          <bitOffset>7</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB8</name>
          <description>Filter bits</description>
          <bitOffset>8</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB9</name>
          <description>Filter bits</description>
          <bitOffset>9</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB10</name>
          <description>Filter bits</description>
          <bitOffset>10</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB11</name>
          <description>Filter bits</description>
          <bitOffset>11</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB12</name>
          <description>Filter bits</description>
          <bitOffset>12</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB13</name>
          <description>Filter bits</description>
          <bitOffset>13</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB14</name>
          <description>Filter bits</description>
          <bitOffset>14</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB15</name>
          <description>Filter bits</description>
          <bitOffset>15</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB16</name>
          <description>Filter bits</description>
          <bitOffset>16</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB17</name>
          <description>Filter bits</description>
          <bitOffset>17</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB18</name>
          <description>Filter bits</description>
          <bitOffset>18</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB19</name>
          <description>Filter bits</description>
          <bitOffset>19</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB20</name>
          <description>Filter bits</description>
          <bitOffset>20</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB21</name>
          <description>Filter bits</description>
          <bitOffset>21</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB22</name>
          <description>Filter bits</description>
          <bitOffset>22</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB23</name>
          <description>Filter bits</description>
          <bitOffset>23</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB24</name>
          <description>Filter bits</description>
          <bitOffset>24</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB25</name>
          <description>Filter bits</description>
          <bitOffset>25</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB26</name>
          <description>Filter bits</description>
          <bitOffset>26</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB27</name>
          <description>Filter bits</description>
          <bitOffset>27</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB28</name>
          <description>Filter bits</description>
          <bitOffset>28</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB29</name>
          <description>Filter bits</description>
          <bitOffset>29</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB30</name>
          <description>Filter bits</description>
          <bitOffset>30</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB31</name>
          <description>Filter bits</description>
          <bitOffset>31</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
      </fields>
    </register>
    <register>
      <name>F19R1</name>
      <displayName>F19R1</displayName>
      <description>Filter bank 19 register 1</description>
      <addressOffset>0x2D8</addressOffset>
      <size>0x20</size>
      <access>read-write</access>
      <resetValue>0x00000000</resetValue>
      <fields>
        <field>
          <name>FB0</name>
          <description>Filter bits</description>
          <bitOffset>0</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB1</name>
          <description>Filter bits</description>
          <bitOffset>1</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB2</name>
          <description>Filter bits</description>
          <bitOffset>2</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB3</name>
          <description>Filter bits</description>
          <bitOffset>3</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB4</name>
          <description>Filter bits</description>
          <bitOffset>4</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB5</name>
          <description>Filter bits</description>
          <bitOffset>5</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB6</name>
          <description>Filter bits</description>
          <bitOffset>6</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB7</name>
          <description>Filter bits</description>
          <bitOffset>7</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB8</name>
          <description>Filter bits</description>
          <bitOffset>8</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB9</name>
          <description>Filter bits</description>
          <bitOffset>9</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB10</name>
          <description>Filter bits</description>
          <bitOffset>10</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB11</name>
          <description>Filter bits</description>
          <bitOffset>11</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB12</name>
          <description>Filter bits</description>
          <bitOffset>12</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB13</name>
          <description>Filter bits</description>
          <bitOffset>13</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB14</name>
          <description>Filter bits</description>
          <bitOffset>14</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB15</name>
          <description>Filter bits</description>
          <bitOffset>15</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB16</name>
          <description>Filter bits</description>
          <bitOffset>16</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB17</name>
          <description>Filter bits</description>
          <bitOffset>17</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB18</name>
          <description>Filter bits</description>
          <bitOffset>18</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB19</name>
          <description>Filter bits</description>
          <bitOffset>19</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB20</name>
          <description>Filter bits</description>
          <bitOffset>20</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB21</name>
          <description>Filter bits</description>
          <bitOffset>21</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB22</name>
          <description>Filter bits</description>
          <bitOffset>22</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB23</name>
          <description>Filter bits</description>
          <bitOffset>23</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB24</name>
          <description>Filter bits</description>
          <bitOffset>24</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB25</name>
          <description>Filter bits</description>
          <bitOffset>25</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB26</name>
          <description>Filter bits</description>
          <bitOffset>26</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB27</name>
          <description>Filter bits</description>
          <bitOffset>27</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB28</name>
          <description>Filter bits</description>
          <bitOffset>28</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB29</name>
          <description>Filter bits</description>
          <bitOffset>29</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB30</name>
          <description>Filter bits</description>
          <bitOffset>30</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB31</name>
          <description>Filter bits</description>
          <bitOffset>31</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
      </fields>
    </register>
    <register>
      <name>F19R2</name>
      <displayName>F19R2</displayName>
      <description>Filter bank 19 register 2</description>
      <addressOffset>0x2DC</addressOffset>
      <size>0x20</size>
      <access>read-write</access>
      <resetValue>0x00000000</resetValue>
      <fields>
        <field>
          <name>FB0</name>
          <description>Filter bits</description>
          <bitOffset>0</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB1</name>
          <description>Filter bits</description>
          <bitOffset>1</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB2</name>
          <description>Filter bits</description>
          <bitOffset>2</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB3</name>
          <description>Filter bits</description>
          <bitOffset>3</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB4</name>
          <description>Filter bits</description>
          <bitOffset>4</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB5</name>
          <description>Filter bits</description>
          <bitOffset>5</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB6</name>
          <description>Filter bits</description>
          <bitOffset>6</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB7</name>
          <description>Filter bits</description>
          <bitOffset>7</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB8</name>
          <description>Filter bits</description>
          <bitOffset>8</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB9</name>
          <description>Filter bits</description>
          <bitOffset>9</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB10</name>
          <description>Filter bits</description>
          <bitOffset>10</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB11</name>
          <description>Filter bits</description>
          <bitOffset>11</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB12</name>
          <description>Filter bits</description>
          <bitOffset>12</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB13</name>
          <description>Filter bits</description>
          <bitOffset>13</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB14</name>
          <description>Filter bits</description>
          <bitOffset>14</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB15</name>
          <description>Filter bits</description>
          <bitOffset>15</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB16</name>
          <description>Filter bits</description>
          <bitOffset>16</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB17</name>
          <description>Filter bits</description>
          <bitOffset>17</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB18</name>
          <description>Filter bits</description>
          <bitOffset>18</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB19</name>
          <description>Filter bits</description>
          <bitOffset>19</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB20</name>
          <description>Filter bits</description>
          <bitOffset>20</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB21</name>
          <description>Filter bits</description>
          <bitOffset>21</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB22</name>
          <description>Filter bits</description>
          <bitOffset>22</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB23</name>
          <description>Filter bits</description>
          <bitOffset>23</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB24</name>
          <description>Filter bits</description>
          <bitOffset>24</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB25</name>
          <description>Filter bits</description>
          <bitOffset>25</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB26</name>
          <description>Filter bits</description>
          <bitOffset>26</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB27</name>
          <description>Filter bits</description>
          <bitOffset>27</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB28</name>
          <description>Filter bits</description>
          <bitOffset>28</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB29</name>
          <description>Filter bits</description>
          <bitOffset>29</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB30</name>
          <description>Filter bits</description>
          <bitOffset>30</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB31</name>
          <description>Filter bits</description>
          <bitOffset>31</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
      </fields>
    </register>
    <register>
      <name>F20R1</name>
      <displayName>F20R1</displayName>
      <description>Filter bank 20 register 1</description>
      <addressOffset>0x2E0</addressOffset>
      <size>0x20</size>
      <access>read-write</access>
      <resetValue>0x00000000</resetValue>
      <fields>
        <field>
          <name>FB0</name>
          <description>Filter bits</description>
          <bitOffset>0</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB1</name>
          <description>Filter bits</description>
          <bitOffset>1</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB2</name>
          <description>Filter bits</description>
          <bitOffset>2</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB3</name>
          <description>Filter bits</description>
          <bitOffset>3</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB4</name>
          <description>Filter bits</description>
          <bitOffset>4</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB5</name>
          <description>Filter bits</description>
          <bitOffset>5</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB6</name>
          <description>Filter bits</description>
          <bitOffset>6</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB7</name>
          <description>Filter bits</description>
          <bitOffset>7</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB8</name>
          <description>Filter bits</description>
          <bitOffset>8</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB9</name>
          <description>Filter bits</description>
          <bitOffset>9</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB10</name>
          <description>Filter bits</description>
          <bitOffset>10</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB11</name>
          <description>Filter bits</description>
          <bitOffset>11</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB12</name>
          <description>Filter bits</description>
          <bitOffset>12</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB13</name>
          <description>Filter bits</description>
          <bitOffset>13</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB14</name>
          <description>Filter bits</description>
          <bitOffset>14</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB15</name>
          <description>Filter bits</description>
          <bitOffset>15</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB16</name>
          <description>Filter bits</description>
          <bitOffset>16</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB17</name>
          <description>Filter bits</description>
          <bitOffset>17</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB18</name>
          <description>Filter bits</description>
          <bitOffset>18</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB19</name>
          <description>Filter bits</description>
          <bitOffset>19</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB20</name>
          <description>Filter bits</description>
          <bitOffset>20</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB21</name>
          <description>Filter bits</description>
          <bitOffset>21</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB22</name>
          <description>Filter bits</description>
          <bitOffset>22</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB23</name>
          <description>Filter bits</description>
          <bitOffset>23</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB24</name>
          <description>Filter bits</description>
          <bitOffset>24</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB25</name>
          <description>Filter bits</description>
          <bitOffset>25</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB26</name>
          <description>Filter bits</description>
          <bitOffset>26</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB27</name>
          <description>Filter bits</description>
          <bitOffset>27</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB28</name>
          <description>Filter bits</description>
          <bitOffset>28</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB29</name>
          <description>Filter bits</description>
          <bitOffset>29</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB30</name>
          <description>Filter bits</description>
          <bitOffset>30</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB31</name>
          <description>Filter bits</description>
          <bitOffset>31</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
      </fields>
    </register>
    <register>
      <name>F20R2</name>
      <displayName>F20R2</displayName>
      <description>Filter bank 20 register 2</description>
      <addressOffset>0x2E4</addressOffset>
      <size>0x20</size>
      <access>read-write</access>
      <resetValue>0x00000000</resetValue>
      <fields>
        <field>
          <name>FB0</name>
          <description>Filter bits</description>
          <bitOffset>0</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB1</name>
          <description>Filter bits</description>
          <bitOffset>1</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB2</name>
          <description>Filter bits</description>
          <bitOffset>2</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB3</name>
          <description>Filter bits</description>
          <bitOffset>3</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB4</name>
          <description>Filter bits</description>
          <bitOffset>4</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB5</name>
          <description>Filter bits</description>
          <bitOffset>5</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB6</name>
          <description>Filter bits</description>
          <bitOffset>6</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB7</name>
          <description>Filter bits</description>
          <bitOffset>7</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB8</name>
          <description>Filter bits</description>
          <bitOffset>8</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB9</name>
          <description>Filter bits</description>
          <bitOffset>9</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB10</name>
          <description>Filter bits</description>
          <bitOffset>10</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB11</name>
          <description>Filter bits</description>
          <bitOffset>11</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB12</name>
          <description>Filter bits</description>
          <bitOffset>12</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB13</name>
          <description>Filter bits</description>
          <bitOffset>13</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB14</name>
          <description>Filter bits</description>
          <bitOffset>14</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB15</name>
          <description>Filter bits</description>
          <bitOffset>15</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB16</name>
          <description>Filter bits</description>
          <bitOffset>16</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB17</name>
          <description>Filter bits</description>
          <bitOffset>17</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB18</name>
          <description>Filter bits</description>
          <bitOffset>18</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB19</name>
          <description>Filter bits</description>
          <bitOffset>19</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB20</name>
          <description>Filter bits</description>
          <bitOffset>20</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB21</name>
          <description>Filter bits</description>
          <bitOffset>21</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB22</name>
          <description>Filter bits</description>
          <bitOffset>22</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB23</name>
          <description>Filter bits</description>
          <bitOffset>23</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB24</name>
          <description>Filter bits</description>
          <bitOffset>24</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB25</name>
          <description>Filter bits</description>
          <bitOffset>25</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB26</name>
          <description>Filter bits</description>
          <bitOffset>26</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB27</name>
          <description>Filter bits</description>
          <bitOffset>27</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB28</name>
          <description>Filter bits</description>
          <bitOffset>28</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB29</name>
          <description>Filter bits</description>
          <bitOffset>29</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB30</name>
          <description>Filter bits</description>
          <bitOffset>30</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB31</name>
          <description>Filter bits</description>
          <bitOffset>31</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
      </fields>
    </register>
    <register>
      <name>F21R1</name>
      <displayName>F21R1</displayName>
      <description>Filter bank 21 register 1</description>
      <addressOffset>0x2E8</addressOffset>
      <size>0x20</size>
      <access>read-write</access>
      <resetValue>0x00000000</resetValue>
      <fields>
        <field>
          <name>FB0</name>
          <description>Filter bits</description>
          <bitOffset>0</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB1</name>
          <description>Filter bits</description>
          <bitOffset>1</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB2</name>
          <description>Filter bits</description>
          <bitOffset>2</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB3</name>
          <description>Filter bits</description>
          <bitOffset>3</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB4</name>
          <description>Filter bits</description>
          <bitOffset>4</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB5</name>
          <description>Filter bits</description>
          <bitOffset>5</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB6</name>
          <description>Filter bits</description>
          <bitOffset>6</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB7</name>
          <description>Filter bits</description>
          <bitOffset>7</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB8</name>
          <description>Filter bits</description>
          <bitOffset>8</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB9</name>
          <description>Filter bits</description>
          <bitOffset>9</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB10</name>
          <description>Filter bits</description>
          <bitOffset>10</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB11</name>
          <description>Filter bits</description>
          <bitOffset>11</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB12</name>
          <description>Filter bits</description>
          <bitOffset>12</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB13</name>
          <description>Filter bits</description>
          <bitOffset>13</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB14</name>
          <description>Filter bits</description>
          <bitOffset>14</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB15</name>
          <description>Filter bits</description>
          <bitOffset>15</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB16</name>
          <description>Filter bits</description>
          <bitOffset>16</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB17</name>
          <description>Filter bits</description>
          <bitOffset>17</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB18</name>
          <description>Filter bits</description>
          <bitOffset>18</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB19</name>
          <description>Filter bits</description>
          <bitOffset>19</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB20</name>
          <description>Filter bits</description>
          <bitOffset>20</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB21</name>
          <description>Filter bits</description>
          <bitOffset>21</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB22</name>
          <description>Filter bits</description>
          <bitOffset>22</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB23</name>
          <description>Filter bits</description>
          <bitOffset>23</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB24</name>
          <description>Filter bits</description>
          <bitOffset>24</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB25</name>
          <description>Filter bits</description>
          <bitOffset>25</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB26</name>
          <description>Filter bits</description>
          <bitOffset>26</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB27</name>
          <description>Filter bits</description>
          <bitOffset>27</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB28</name>
          <description>Filter bits</description>
          <bitOffset>28</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB29</name>
          <description>Filter bits</description>
          <bitOffset>29</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB30</name>
          <description>Filter bits</description>
          <bitOffset>30</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB31</name>
          <description>Filter bits</description>
          <bitOffset>31</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
      </fields>
    </register>
    <register>
      <name>F21R2</name>
      <displayName>F21R2</displayName>
      <description>Filter bank 21 register 2</description>
      <addressOffset>0x2EC</addressOffset>
      <size>0x20</size>
      <access>read-write</access>
      <resetValue>0x00000000</resetValue>
      <fields>
        <field>
          <name>FB0</name>
          <description>Filter bits</description>
          <bitOffset>0</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB1</name>
          <description>Filter bits</description>
          <bitOffset>1</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB2</name>
          <description>Filter bits</description>
          <bitOffset>2</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB3</name>
          <description>Filter bits</description>
          <bitOffset>3</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB4</name>
          <description>Filter bits</description>
          <bitOffset>4</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB5</name>
          <description>Filter bits</description>
          <bitOffset>5</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB6</name>
          <description>Filter bits</description>
          <bitOffset>6</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB7</name>
          <description>Filter bits</description>
          <bitOffset>7</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB8</name>
          <description>Filter bits</description>
          <bitOffset>8</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB9</name>
          <description>Filter bits</description>
          <bitOffset>9</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB10</name>
          <description>Filter bits</description>
          <bitOffset>10</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB11</name>
          <description>Filter bits</description>
          <bitOffset>11</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB12</name>
          <description>Filter bits</description>
          <bitOffset>12</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB13</name>
          <description>Filter bits</description>
          <bitOffset>13</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB14</name>
          <description>Filter bits</description>
          <bitOffset>14</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB15</name>
          <description>Filter bits</description>
          <bitOffset>15</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB16</name>
          <description>Filter bits</description>
          <bitOffset>16</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB17</name>
          <description>Filter bits</description>
          <bitOffset>17</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB18</name>
          <description>Filter bits</description>
          <bitOffset>18</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB19</name>
          <description>Filter bits</description>
          <bitOffset>19</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB20</name>
          <description>Filter bits</description>
          <bitOffset>20</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB21</name>
          <description>Filter bits</description>
          <bitOffset>21</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB22</name>
          <description>Filter bits</description>
          <bitOffset>22</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB23</name>
          <description>Filter bits</description>
          <bitOffset>23</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB24</name>
          <description>Filter bits</description>
          <bitOffset>24</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB25</name>
          <description>Filter bits</description>
          <bitOffset>25</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB26</name>
          <description>Filter bits</description>
          <bitOffset>26</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB27</name>
          <description>Filter bits</description>
          <bitOffset>27</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB28</name>
          <description>Filter bits</description>
          <bitOffset>28</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB29</name>
          <description>Filter bits</description>
          <bitOffset>29</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB30</name>
          <description>Filter bits</description>
          <bitOffset>30</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB31</name>
          <description>Filter bits</description>
          <bitOffset>31</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
      </fields>
    </register>
    <register>
      <name>F22R1</name>
      <displayName>F22R1</displayName>
      <description>Filter bank 22 register 1</description>
      <addressOffset>0x2F0</addressOffset>
      <size>0x20</size>
      <access>read-write</access>
      <resetValue>0x00000000</resetValue>
      <fields>
        <field>
          <name>FB0</name>
          <description>Filter bits</description>
          <bitOffset>0</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB1</name>
          <description>Filter bits</description>
          <bitOffset>1</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB2</name>
          <description>Filter bits</description>
          <bitOffset>2</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB3</name>
          <description>Filter bits</description>
          <bitOffset>3</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB4</name>
          <description>Filter bits</description>
          <bitOffset>4</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB5</name>
          <description>Filter bits</description>
          <bitOffset>5</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB6</name>
          <description>Filter bits</description>
          <bitOffset>6</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB7</name>
          <description>Filter bits</description>
          <bitOffset>7</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB8</name>
          <description>Filter bits</description>
          <bitOffset>8</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB9</name>
          <description>Filter bits</description>
          <bitOffset>9</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB10</name>
          <description>Filter bits</description>
          <bitOffset>10</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB11</name>
          <description>Filter bits</description>
          <bitOffset>11</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB12</name>
          <description>Filter bits</description>
          <bitOffset>12</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB13</name>
          <description>Filter bits</description>
          <bitOffset>13</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB14</name>
          <description>Filter bits</description>
          <bitOffset>14</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB15</name>
          <description>Filter bits</description>
          <bitOffset>15</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB16</name>
          <description>Filter bits</description>
          <bitOffset>16</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB17</name>
          <description>Filter bits</description>
          <bitOffset>17</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB18</name>
          <description>Filter bits</description>
          <bitOffset>18</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB19</name>
          <description>Filter bits</description>
          <bitOffset>19</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB20</name>
          <description>Filter bits</description>
          <bitOffset>20</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB21</name>
          <description>Filter bits</description>
          <bitOffset>21</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB22</name>
          <description>Filter bits</description>
          <bitOffset>22</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB23</name>
          <description>Filter bits</description>
          <bitOffset>23</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB24</name>
          <description>Filter bits</description>
          <bitOffset>24</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB25</name>
          <description>Filter bits</description>
          <bitOffset>25</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB26</name>
          <description>Filter bits</description>
          <bitOffset>26</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB27</name>
          <description>Filter bits</description>
          <bitOffset>27</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB28</name>
          <description>Filter bits</description>
          <bitOffset>28</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB29</name>
          <description>Filter bits</description>
          <bitOffset>29</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB30</name>
          <description>Filter bits</description>
          <bitOffset>30</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB31</name>
          <description>Filter bits</description>
          <bitOffset>31</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
      </fields>
    </register>
    <register>
      <name>F22R2</name>
      <displayName>F22R2</displayName>
      <description>Filter bank 22 register 2</description>
      <addressOffset>0x2F4</addressOffset>
      <size>0x20</size>
      <access>read-write</access>
      <resetValue>0x00000000</resetValue>
      <fields>
        <field>
          <name>FB0</name>
          <description>Filter bits</description>
          <bitOffset>0</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB1</name>
          <description>Filter bits</description>
          <bitOffset>1</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB2</name>
          <description>Filter bits</description>
          <bitOffset>2</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB3</name>
          <description>Filter bits</description>
          <bitOffset>3</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB4</name>
          <description>Filter bits</description>
          <bitOffset>4</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB5</name>
          <description>Filter bits</description>
          <bitOffset>5</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB6</name>
          <description>Filter bits</description>
          <bitOffset>6</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB7</name>
          <description>Filter bits</description>
          <bitOffset>7</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB8</name>
          <description>Filter bits</description>
          <bitOffset>8</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB9</name>
          <description>Filter bits</description>
          <bitOffset>9</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB10</name>
          <description>Filter bits</description>
          <bitOffset>10</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB11</name>
          <description>Filter bits</description>
          <bitOffset>11</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB12</name>
          <description>Filter bits</description>
          <bitOffset>12</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB13</name>
          <description>Filter bits</description>
          <bitOffset>13</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB14</name>
          <description>Filter bits</description>
          <bitOffset>14</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB15</name>
          <description>Filter bits</description>
          <bitOffset>15</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB16</name>
          <description>Filter bits</description>
          <bitOffset>16</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB17</name>
          <description>Filter bits</description>
          <bitOffset>17</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB18</name>
          <description>Filter bits</description>
          <bitOffset>18</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB19</name>
          <description>Filter bits</description>
          <bitOffset>19</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB20</name>
          <description>Filter bits</description>
          <bitOffset>20</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB21</name>
          <description>Filter bits</description>
          <bitOffset>21</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB22</name>
          <description>Filter bits</description>
          <bitOffset>22</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB23</name>
          <description>Filter bits</description>
          <bitOffset>23</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB24</name>
          <description>Filter bits</description>
          <bitOffset>24</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB25</name>
          <description>Filter bits</description>
          <bitOffset>25</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB26</name>
          <description>Filter bits</description>
          <bitOffset>26</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB27</name>
          <description>Filter bits</description>
          <bitOffset>27</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB28</name>
          <description>Filter bits</description>
          <bitOffset>28</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB29</name>
          <description>Filter bits</description>
          <bitOffset>29</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB30</name>
          <description>Filter bits</description>
          <bitOffset>30</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB31</name>
          <description>Filter bits</description>
          <bitOffset>31</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
      </fields>
    </register>
    <register>
      <name>F23R1</name>
      <displayName>F23R1</displayName>
      <description>Filter bank 23 register 1</description>
      <addressOffset>0x2F8</addressOffset>
      <size>0x20</size>
      <access>read-write</access>
      <resetValue>0x00000000</resetValue>
      <fields>
        <field>
          <name>FB0</name>
          <description>Filter bits</description>
          <bitOffset>0</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB1</name>
          <description>Filter bits</description>
          <bitOffset>1</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB2</name>
          <description>Filter bits</description>
          <bitOffset>2</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB3</name>
          <description>Filter bits</description>
          <bitOffset>3</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB4</name>
          <description>Filter bits</description>
          <bitOffset>4</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB5</name>
          <description>Filter bits</description>
          <bitOffset>5</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB6</name>
          <description>Filter bits</description>
          <bitOffset>6</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB7</name>
          <description>Filter bits</description>
          <bitOffset>7</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB8</name>
          <description>Filter bits</description>
          <bitOffset>8</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB9</name>
          <description>Filter bits</description>
          <bitOffset>9</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB10</name>
          <description>Filter bits</description>
          <bitOffset>10</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB11</name>
          <description>Filter bits</description>
          <bitOffset>11</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB12</name>
          <description>Filter bits</description>
          <bitOffset>12</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB13</name>
          <description>Filter bits</description>
          <bitOffset>13</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB14</name>
          <description>Filter bits</description>
          <bitOffset>14</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB15</name>
          <description>Filter bits</description>
          <bitOffset>15</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB16</name>
          <description>Filter bits</description>
          <bitOffset>16</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB17</name>
          <description>Filter bits</description>
          <bitOffset>17</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB18</name>
          <description>Filter bits</description>
          <bitOffset>18</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB19</name>
          <description>Filter bits</description>
          <bitOffset>19</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB20</name>
          <description>Filter bits</description>
          <bitOffset>20</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB21</name>
          <description>Filter bits</description>
          <bitOffset>21</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB22</name>
          <description>Filter bits</description>
          <bitOffset>22</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB23</name>
          <description>Filter bits</description>
          <bitOffset>23</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB24</name>
          <description>Filter bits</description>
          <bitOffset>24</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB25</name>
          <description>Filter bits</description>
          <bitOffset>25</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB26</name>
          <description>Filter bits</description>
          <bitOffset>26</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB27</name>
          <description>Filter bits</description>
          <bitOffset>27</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB28</name>
          <description>Filter bits</description>
          <bitOffset>28</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB29</name>
          <description>Filter bits</description>
          <bitOffset>29</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB30</name>
          <description>Filter bits</description>
          <bitOffset>30</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB31</name>
          <description>Filter bits</description>
          <bitOffset>31</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
      </fields>
    </register>
    <register>
      <name>F23R2</name>
      <displayName>F23R2</displayName>
      <description>Filter bank 23 register 2</description>
      <addressOffset>0x2FC</addressOffset>
      <size>0x20</size>
      <access>read-write</access>
      <resetValue>0x00000000</resetValue>
      <fields>
        <field>
          <name>FB0</name>
          <description>Filter bits</description>
          <bitOffset>0</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB1</name>
          <description>Filter bits</description>
          <bitOffset>1</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB2</name>
          <description>Filter bits</description>
          <bitOffset>2</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB3</name>
          <description>Filter bits</description>
          <bitOffset>3</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB4</name>
          <description>Filter bits</description>
          <bitOffset>4</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB5</name>
          <description>Filter bits</description>
          <bitOffset>5</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB6</name>
          <description>Filter bits</description>
          <bitOffset>6</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB7</name>
          <description>Filter bits</description>
          <bitOffset>7</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB8</name>
          <description>Filter bits</description>
          <bitOffset>8</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB9</name>
          <description>Filter bits</description>
          <bitOffset>9</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB10</name>
          <description>Filter bits</description>
          <bitOffset>10</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB11</name>
          <description>Filter bits</description>
          <bitOffset>11</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB12</name>
          <description>Filter bits</description>
          <bitOffset>12</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB13</name>
          <description>Filter bits</description>
          <bitOffset>13</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB14</name>
          <description>Filter bits</description>
          <bitOffset>14</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB15</name>
          <description>Filter bits</description>
          <bitOffset>15</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB16</name>
          <description>Filter bits</description>
          <bitOffset>16</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB17</name>
          <description>Filter bits</description>
          <bitOffset>17</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB18</name>
          <description>Filter bits</description>
          <bitOffset>18</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB19</name>
          <description>Filter bits</description>
          <bitOffset>19</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB20</name>
          <description>Filter bits</description>
          <bitOffset>20</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB21</name>
          <description>Filter bits</description>
          <bitOffset>21</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB22</name>
          <description>Filter bits</description>
          <bitOffset>22</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB23</name>
          <description>Filter bits</description>
          <bitOffset>23</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB24</name>
          <description>Filter bits</description>
          <bitOffset>24</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB25</name>
          <description>Filter bits</description>
          <bitOffset>25</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB26</name>
          <description>Filter bits</description>
          <bitOffset>26</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB27</name>
          <description>Filter bits</description>
          <bitOffset>27</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB28</name>
          <description>Filter bits</description>
          <bitOffset>28</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB29</name>
          <description>Filter bits</description>
          <bitOffset>29</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB30</name>
          <description>Filter bits</description>
          <bitOffset>30</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB31</name>
          <description>Filter bits</description>
          <bitOffset>31</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
      </fields>
    </register>
    <register>
      <name>F24R1</name>
      <displayName>F24R1</displayName>
      <description>Filter bank 24 register 1</description>
      <addressOffset>0x300</addressOffset>
      <size>0x20</size>
      <access>read-write</access>
      <resetValue>0x00000000</resetValue>
      <fields>
        <field>
          <name>FB0</name>
          <description>Filter bits</description>
          <bitOffset>0</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB1</name>
          <description>Filter bits</description>
          <bitOffset>1</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB2</name>
          <description>Filter bits</description>
          <bitOffset>2</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB3</name>
          <description>Filter bits</description>
          <bitOffset>3</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB4</name>
          <description>Filter bits</description>
          <bitOffset>4</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB5</name>
          <description>Filter bits</description>
          <bitOffset>5</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB6</name>
          <description>Filter bits</description>
          <bitOffset>6</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB7</name>
          <description>Filter bits</description>
          <bitOffset>7</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB8</name>
          <description>Filter bits</description>
          <bitOffset>8</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB9</name>
          <description>Filter bits</description>
          <bitOffset>9</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB10</name>
          <description>Filter bits</description>
          <bitOffset>10</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB11</name>
          <description>Filter bits</description>
          <bitOffset>11</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB12</name>
          <description>Filter bits</description>
          <bitOffset>12</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB13</name>
          <description>Filter bits</description>
          <bitOffset>13</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB14</name>
          <description>Filter bits</description>
          <bitOffset>14</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB15</name>
          <description>Filter bits</description>
          <bitOffset>15</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB16</name>
          <description>Filter bits</description>
          <bitOffset>16</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB17</name>
          <description>Filter bits</description>
          <bitOffset>17</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB18</name>
          <description>Filter bits</description>
          <bitOffset>18</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB19</name>
          <description>Filter bits</description>
          <bitOffset>19</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB20</name>
          <description>Filter bits</description>
          <bitOffset>20</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB21</name>
          <description>Filter bits</description>
          <bitOffset>21</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB22</name>
          <description>Filter bits</description>
          <bitOffset>22</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB23</name>
          <description>Filter bits</description>
          <bitOffset>23</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB24</name>
          <description>Filter bits</description>
          <bitOffset>24</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB25</name>
          <description>Filter bits</description>
          <bitOffset>25</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB26</name>
          <description>Filter bits</description>
          <bitOffset>26</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB27</name>
          <description>Filter bits</description>
          <bitOffset>27</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB28</name>
          <description>Filter bits</description>
          <bitOffset>28</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB29</name>
          <description>Filter bits</description>
          <bitOffset>29</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB30</name>
          <description>Filter bits</description>
          <bitOffset>30</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB31</name>
          <description>Filter bits</description>
          <bitOffset>31</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
      </fields>
    </register>
    <register>
      <name>F24R2</name>
      <displayName>F24R2</displayName>
      <description>Filter bank 24 register 2</description>
      <addressOffset>0x304</addressOffset>
      <size>0x20</size>
      <access>read-write</access>
      <resetValue>0x00000000</resetValue>
      <fields>
        <field>
          <name>FB0</name>
          <description>Filter bits</description>
          <bitOffset>0</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB1</name>
          <description>Filter bits</description>
          <bitOffset>1</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB2</name>
          <description>Filter bits</description>
          <bitOffset>2</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB3</name>
          <description>Filter bits</description>
          <bitOffset>3</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB4</name>
          <description>Filter bits</description>
          <bitOffset>4</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB5</name>
          <description>Filter bits</description>
          <bitOffset>5</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB6</name>
          <description>Filter bits</description>
          <bitOffset>6</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB7</name>
          <description>Filter bits</description>
          <bitOffset>7</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB8</name>
          <description>Filter bits</description>
          <bitOffset>8</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB9</name>
          <description>Filter bits</description>
          <bitOffset>9</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB10</name>
          <description>Filter bits</description>
          <bitOffset>10</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB11</name>
          <description>Filter bits</description>
          <bitOffset>11</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB12</name>
          <description>Filter bits</description>
          <bitOffset>12</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB13</name>
          <description>Filter bits</description>
          <bitOffset>13</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB14</name>
          <description>Filter bits</description>
          <bitOffset>14</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB15</name>
          <description>Filter bits</description>
          <bitOffset>15</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB16</name>
          <description>Filter bits</description>
          <bitOffset>16</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB17</name>
          <description>Filter bits</description>
          <bitOffset>17</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB18</name>
          <description>Filter bits</description>
          <bitOffset>18</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB19</name>
          <description>Filter bits</description>
          <bitOffset>19</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB20</name>
          <description>Filter bits</description>
          <bitOffset>20</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB21</name>
          <description>Filter bits</description>
          <bitOffset>21</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB22</name>
          <description>Filter bits</description>
          <bitOffset>22</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB23</name>
          <description>Filter bits</description>
          <bitOffset>23</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB24</name>
          <description>Filter bits</description>
          <bitOffset>24</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB25</name>
          <description>Filter bits</description>
          <bitOffset>25</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB26</name>
          <description>Filter bits</description>
          <bitOffset>26</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB27</name>
          <description>Filter bits</description>
          <bitOffset>27</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB28</name>
          <description>Filter bits</description>
          <bitOffset>28</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB29</name>
          <description>Filter bits</description>
          <bitOffset>29</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB30</name>
          <description>Filter bits</description>
          <bitOffset>30</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB31</name>
          <description>Filter bits</description>
          <bitOffset>31</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
      </fields>
    </register>
    <register>
      <name>F25R1</name>
      <displayName>F25R1</displayName>
      <description>Filter bank 25 register 1</description>
      <addressOffset>0x308</addressOffset>
      <size>0x20</size>
      <access>read-write</access>
      <resetValue>0x00000000</resetValue>
      <fields>
        <field>
          <name>FB0</name>
          <description>Filter bits</description>
          <bitOffset>0</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB1</name>
          <description>Filter bits</description>
          <bitOffset>1</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB2</name>
          <description>Filter bits</description>
          <bitOffset>2</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB3</name>
          <description>Filter bits</description>
          <bitOffset>3</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB4</name>
          <description>Filter bits</description>
          <bitOffset>4</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB5</name>
          <description>Filter bits</description>
          <bitOffset>5</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB6</name>
          <description>Filter bits</description>
          <bitOffset>6</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB7</name>
          <description>Filter bits</description>
          <bitOffset>7</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB8</name>
          <description>Filter bits</description>
          <bitOffset>8</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB9</name>
          <description>Filter bits</description>
          <bitOffset>9</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB10</name>
          <description>Filter bits</description>
          <bitOffset>10</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB11</name>
          <description>Filter bits</description>
          <bitOffset>11</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB12</name>
          <description>Filter bits</description>
          <bitOffset>12</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB13</name>
          <description>Filter bits</description>
          <bitOffset>13</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB14</name>
          <description>Filter bits</description>
          <bitOffset>14</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB15</name>
          <description>Filter bits</description>
          <bitOffset>15</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB16</name>
          <description>Filter bits</description>
          <bitOffset>16</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB17</name>
          <description>Filter bits</description>
          <bitOffset>17</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB18</name>
          <description>Filter bits</description>
          <bitOffset>18</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB19</name>
          <description>Filter bits</description>
          <bitOffset>19</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB20</name>
          <description>Filter bits</description>
          <bitOffset>20</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB21</name>
          <description>Filter bits</description>
          <bitOffset>21</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB22</name>
          <description>Filter bits</description>
          <bitOffset>22</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB23</name>
          <description>Filter bits</description>
          <bitOffset>23</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB24</name>
          <description>Filter bits</description>
          <bitOffset>24</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB25</name>
          <description>Filter bits</description>
          <bitOffset>25</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB26</name>
          <description>Filter bits</description>
          <bitOffset>26</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB27</name>
          <description>Filter bits</description>
          <bitOffset>27</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB28</name>
          <description>Filter bits</description>
          <bitOffset>28</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB29</name>
          <description>Filter bits</description>
          <bitOffset>29</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB30</name>
          <description>Filter bits</description>
          <bitOffset>30</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB31</name>
          <description>Filter bits</description>
          <bitOffset>31</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
      </fields>
    </register>
    <register>
      <name>F25R2</name>
      <displayName>F25R2</displayName>
      <description>Filter bank 25 register 2</description>
      <addressOffset>0x30C</addressOffset>
      <size>0x20</size>
      <access>read-write</access>
      <resetValue>0x00000000</resetValue>
      <fields>
        <field>
          <name>FB0</name>
          <description>Filter bits</description>
          <bitOffset>0</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB1</name>
          <description>Filter bits</description>
          <bitOffset>1</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB2</name>
          <description>Filter bits</description>
          <bitOffset>2</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB3</name>
          <description>Filter bits</description>
          <bitOffset>3</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB4</name>
          <description>Filter bits</description>
          <bitOffset>4</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB5</name>
          <description>Filter bits</description>
          <bitOffset>5</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB6</name>
          <description>Filter bits</description>
          <bitOffset>6</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB7</name>
          <description>Filter bits</description>
          <bitOffset>7</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB8</name>
          <description>Filter bits</description>
          <bitOffset>8</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB9</name>
          <description>Filter bits</description>
          <bitOffset>9</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB10</name>
          <description>Filter bits</description>
          <bitOffset>10</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB11</name>
          <description>Filter bits</description>
          <bitOffset>11</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB12</name>
          <description>Filter bits</description>
          <bitOffset>12</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB13</name>
          <description>Filter bits</description>
          <bitOffset>13</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB14</name>
          <description>Filter bits</description>
          <bitOffset>14</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB15</name>
          <description>Filter bits</description>
          <bitOffset>15</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB16</name>
          <description>Filter bits</description>
          <bitOffset>16</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB17</name>
          <description>Filter bits</description>
          <bitOffset>17</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB18</name>
          <description>Filter bits</description>
          <bitOffset>18</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB19</name>
          <description>Filter bits</description>
          <bitOffset>19</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB20</name>
          <description>Filter bits</description>
          <bitOffset>20</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB21</name>
          <description>Filter bits</description>
          <bitOffset>21</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB22</name>
          <description>Filter bits</description>
          <bitOffset>22</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB23</name>
          <description>Filter bits</description>
          <bitOffset>23</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB24</name>
          <description>Filter bits</description>
          <bitOffset>24</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB25</name>
          <description>Filter bits</description>
          <bitOffset>25</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB26</name>
          <description>Filter bits</description>
          <bitOffset>26</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB27</name>
          <description>Filter bits</description>
          <bitOffset>27</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB28</name>
          <description>Filter bits</description>
          <bitOffset>28</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB29</name>
          <description>Filter bits</description>
          <bitOffset>29</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB30</name>
          <description>Filter bits</description>
          <bitOffset>30</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB31</name>
          <description>Filter bits</description>
          <bitOffset>31</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
      </fields>
    </register>
    <register>
      <name>F26R1</name>
      <displayName>F26R1</displayName>
      <description>Filter bank 26 register 1</description>
      <addressOffset>0x310</addressOffset>
      <size>0x20</size>
      <access>read-write</access>
      <resetValue>0x00000000</resetValue>
      <fields>
        <field>
          <name>FB0</name>
          <description>Filter bits</description>
          <bitOffset>0</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB1</name>
          <description>Filter bits</description>
          <bitOffset>1</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB2</name>
          <description>Filter bits</description>
          <bitOffset>2</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB3</name>
          <description>Filter bits</description>
          <bitOffset>3</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB4</name>
          <description>Filter bits</description>
          <bitOffset>4</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB5</name>
          <description>Filter bits</description>
          <bitOffset>5</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB6</name>
          <description>Filter bits</description>
          <bitOffset>6</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB7</name>
          <description>Filter bits</description>
          <bitOffset>7</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB8</name>
          <description>Filter bits</description>
          <bitOffset>8</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB9</name>
          <description>Filter bits</description>
          <bitOffset>9</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB10</name>
          <description>Filter bits</description>
          <bitOffset>10</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB11</name>
          <description>Filter bits</description>
          <bitOffset>11</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB12</name>
          <description>Filter bits</description>
          <bitOffset>12</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB13</name>
          <description>Filter bits</description>
          <bitOffset>13</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB14</name>
          <description>Filter bits</description>
          <bitOffset>14</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB15</name>
          <description>Filter bits</description>
          <bitOffset>15</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB16</name>
          <description>Filter bits</description>
          <bitOffset>16</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB17</name>
          <description>Filter bits</description>
          <bitOffset>17</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB18</name>
          <description>Filter bits</description>
          <bitOffset>18</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB19</name>
          <description>Filter bits</description>
          <bitOffset>19</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB20</name>
          <description>Filter bits</description>
          <bitOffset>20</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB21</name>
          <description>Filter bits</description>
          <bitOffset>21</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB22</name>
          <description>Filter bits</description>
          <bitOffset>22</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB23</name>
          <description>Filter bits</description>
          <bitOffset>23</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB24</name>
          <description>Filter bits</description>
          <bitOffset>24</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB25</name>
          <description>Filter bits</description>
          <bitOffset>25</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB26</name>
          <description>Filter bits</description>
          <bitOffset>26</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB27</name>
          <description>Filter bits</description>
          <bitOffset>27</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB28</name>
          <description>Filter bits</description>
          <bitOffset>28</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB29</name>
          <description>Filter bits</description>
          <bitOffset>29</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB30</name>
          <description>Filter bits</description>
          <bitOffset>30</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB31</name>
          <description>Filter bits</description>
          <bitOffset>31</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
      </fields>
    </register>
    <register>
      <name>F26R2</name>
      <displayName>F26R2</displayName>
      <description>Filter bank 26 register 2</description>
      <addressOffset>0x314</addressOffset>
      <size>0x20</size>
      <access>read-write</access>
      <resetValue>0x00000000</resetValue>
      <fields>
        <field>
          <name>FB0</name>
          <description>Filter bits</description>
          <bitOffset>0</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB1</name>
          <description>Filter bits</description>
          <bitOffset>1</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB2</name>
          <description>Filter bits</description>
          <bitOffset>2</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB3</name>
          <description>Filter bits</description>
          <bitOffset>3</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB4</name>
          <description>Filter bits</description>
          <bitOffset>4</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB5</name>
          <description>Filter bits</description>
          <bitOffset>5</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB6</name>
          <description>Filter bits</description>
          <bitOffset>6</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB7</name>
          <description>Filter bits</description>
          <bitOffset>7</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB8</name>
          <description>Filter bits</description>
          <bitOffset>8</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB9</name>
          <description>Filter bits</description>
          <bitOffset>9</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB10</name>
          <description>Filter bits</description>
          <bitOffset>10</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB11</name>
          <description>Filter bits</description>
          <bitOffset>11</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB12</name>
          <description>Filter bits</description>
          <bitOffset>12</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB13</name>
          <description>Filter bits</description>
          <bitOffset>13</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB14</name>
          <description>Filter bits</description>
          <bitOffset>14</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB15</name>
          <description>Filter bits</description>
          <bitOffset>15</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB16</name>
          <description>Filter bits</description>
          <bitOffset>16</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB17</name>
          <description>Filter bits</description>
          <bitOffset>17</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB18</name>
          <description>Filter bits</description>
          <bitOffset>18</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB19</name>
          <description>Filter bits</description>
          <bitOffset>19</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB20</name>
          <description>Filter bits</description>
          <bitOffset>20</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB21</name>
          <description>Filter bits</description>
          <bitOffset>21</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB22</name>
          <description>Filter bits</description>
          <bitOffset>22</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB23</name>
          <description>Filter bits</description>
          <bitOffset>23</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB24</name>
          <description>Filter bits</description>
          <bitOffset>24</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB25</name>
          <description>Filter bits</description>
          <bitOffset>25</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB26</name>
          <description>Filter bits</description>
          <bitOffset>26</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB27</name>
          <description>Filter bits</description>
          <bitOffset>27</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB28</name>
          <description>Filter bits</description>
          <bitOffset>28</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB29</name>
          <description>Filter bits</description>
          <bitOffset>29</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB30</name>
          <description>Filter bits</description>
          <bitOffset>30</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB31</name>
          <description>Filter bits</description>
          <bitOffset>31</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
      </fields>
    </register>
    <register>
      <name>F27R1</name>
      <displayName>F27R1</displayName>
      <description>Filter bank 27 register 1</description>
      <addressOffset>0x318</addressOffset>
      <size>0x20</size>
      <access>read-write</access>
      <resetValue>0x00000000</resetValue>
      <fields>
        <field>
          <name>FB0</name>
          <description>Filter bits</description>
          <bitOffset>0</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB1</name>
          <description>Filter bits</description>
          <bitOffset>1</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB2</name>
          <description>Filter bits</description>
          <bitOffset>2</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB3</name>
          <description>Filter bits</description>
          <bitOffset>3</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB4</name>
          <description>Filter bits</description>
          <bitOffset>4</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB5</name>
          <description>Filter bits</description>
          <bitOffset>5</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB6</name>
          <description>Filter bits</description>
          <bitOffset>6</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB7</name>
          <description>Filter bits</description>
          <bitOffset>7</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB8</name>
          <description>Filter bits</description>
          <bitOffset>8</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB9</name>
          <description>Filter bits</description>
          <bitOffset>9</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB10</name>
          <description>Filter bits</description>
          <bitOffset>10</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB11</name>
          <description>Filter bits</description>
          <bitOffset>11</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB12</name>
          <description>Filter bits</description>
          <bitOffset>12</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB13</name>
          <description>Filter bits</description>
          <bitOffset>13</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB14</name>
          <description>Filter bits</description>
          <bitOffset>14</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB15</name>
          <description>Filter bits</description>
          <bitOffset>15</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB16</name>
          <description>Filter bits</description>
          <bitOffset>16</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB17</name>
          <description>Filter bits</description>
          <bitOffset>17</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB18</name>
          <description>Filter bits</description>
          <bitOffset>18</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB19</name>
          <description>Filter bits</description>
          <bitOffset>19</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB20</name>
          <description>Filter bits</description>
          <bitOffset>20</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB21</name>
          <description>Filter bits</description>
          <bitOffset>21</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB22</name>
          <description>Filter bits</description>
          <bitOffset>22</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB23</name>
          <description>Filter bits</description>
          <bitOffset>23</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB24</name>
          <description>Filter bits</description>
          <bitOffset>24</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB25</name>
          <description>Filter bits</description>
          <bitOffset>25</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB26</name>
          <description>Filter bits</description>
          <bitOffset>26</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB27</name>
          <description>Filter bits</description>
          <bitOffset>27</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB28</name>
          <description>Filter bits</description>
          <bitOffset>28</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB29</name>
          <description>Filter bits</description>
          <bitOffset>29</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB30</name>
          <description>Filter bits</description>
          <bitOffset>30</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB31</name>
          <description>Filter bits</description>
          <bitOffset>31</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
      </fields>
    </register>
    <register>
      <name>F27R2</name>
      <displayName>F27R2</displayName>
      <description>Filter bank 27 register 2</description>
      <addressOffset>0x31C</addressOffset>
      <size>0x20</size>
      <access>read-write</access>
      <resetValue>0x00000000</resetValue>
      <fields>
        <field>
          <name>FB0</name>
          <description>Filter bits</description>
          <bitOffset>0</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB1</name>
          <description>Filter bits</description>
          <bitOffset>1</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB2</name>
          <description>Filter bits</description>
          <bitOffset>2</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB3</name>
          <description>Filter bits</description>
          <bitOffset>3</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB4</name>
          <description>Filter bits</description>
          <bitOffset>4</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB5</name>
          <description>Filter bits</description>
          <bitOffset>5</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB6</name>
          <description>Filter bits</description>
          <bitOffset>6</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB7</name>
          <description>Filter bits</description>
          <bitOffset>7</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB8</name>
          <description>Filter bits</description>
          <bitOffset>8</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB9</name>
          <description>Filter bits</description>
          <bitOffset>9</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB10</name>
          <description>Filter bits</description>
          <bitOffset>10</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB11</name>
          <description>Filter bits</description>
          <bitOffset>11</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB12</name>
          <description>Filter bits</description>
          <bitOffset>12</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB13</name>
          <description>Filter bits</description>
          <bitOffset>13</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB14</name>
          <description>Filter bits</description>
          <bitOffset>14</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB15</name>
          <description>Filter bits</description>
          <bitOffset>15</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB16</name>
          <description>Filter bits</description>
          <bitOffset>16</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB17</name>
          <description>Filter bits</description>
          <bitOffset>17</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB18</name>
          <description>Filter bits</description>
          <bitOffset>18</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB19</name>
          <description>Filter bits</description>
          <bitOffset>19</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB20</name>
          <description>Filter bits</description>
          <bitOffset>20</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB21</name>
          <description>Filter bits</description>
          <bitOffset>21</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB22</name>
          <description>Filter bits</description>
          <bitOffset>22</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB23</name>
          <description>Filter bits</description>
          <bitOffset>23</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB24</name>
          <description>Filter bits</description>
          <bitOffset>24</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB25</name>
          <description>Filter bits</description>
          <bitOffset>25</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB26</name>
          <description>Filter bits</description>
          <bitOffset>26</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB27</name>
          <description>Filter bits</description>
          <bitOffset>27</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB28</name>
          <description>Filter bits</description>
          <bitOffset>28</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB29</name>
          <description>Filter bits</description>
          <bitOffset>29</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB30</name>
          <description>Filter bits</description>
          <bitOffset>30</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
        <field>
          <name>FB31</name>
          <description>Filter bits</description>
          <bitOffset>31</bitOffset>
          <bitWidth>1</bitWidth>
        </field>
      </fields>
    </register>
  </registers>
  <interrupt>
    <name>USB_HP_CAN_TX</name>
    <description>USB High Priority/CAN_TX
        interrupts</description>
    <value>19</value>
  </interrupt>
  <interrupt>
    <name>USB_LP_CAN_RX0</name>
    <description>USB Low Priority/CAN_RX0
        interrupts</description>
    <value>20</value>
  </interrupt>
  <interrupt>
    <name>CAN_RX1</name>
    <description>CAN_RX1 interrupt</description>
    <value>21</value>
  </interrupt>
  <interrupt>
    <name>CAN_SCE</name>
    <description>CAN_SCE interrupt</description>
    <value>22</value>
  </interrupt>
</peripheral>*/
